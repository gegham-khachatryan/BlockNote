{"version":3,"file":"blocknote.js","sources":["../src/extensions/Blocks/api/block.ts","../src/extensions/Blocks/nodes/BlockContent/HeadingBlockContent/HeadingBlockContent.ts","../src/extensions/Blocks/helpers/getBlockInfoFromPos.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/ListItemKeyboardShortcuts.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/BulletListItemBlockContent/BulletListItemBlockContent.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListIndexingPlugin.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListItemBlockContent.ts","../src/extensions/Blocks/nodes/BlockContent/ParagraphBlockContent/ParagraphBlockContent.ts","../src/extensions/Blocks/api/defaultBlocks.ts","../src/extensions/UniqueID/UniqueID.ts","../src/shared/utils.ts","../src/api/nodeConversions/nodeConversions.ts","../src/api/util/nodeUtil.ts","../src/api/blockManipulation/blockManipulation.ts","../src/api/formatConversions/removeUnderlinesRehypePlugin.ts","../src/api/formatConversions/simplifyBlocksRehypePlugin.ts","../src/api/formatConversions/formatConversions.ts","../src/extensions/BackgroundColor/BackgroundColorExtension.ts","../src/extensions/BackgroundColor/BackgroundColorMark.ts","../src/extensions/Blocks/PreviousBlockTypePlugin.ts","../src/extensions/Blocks/nodes/BlockAttributes.ts","../src/extensions/Blocks/nodes/BlockContainer.ts","../src/extensions/Blocks/nodes/BlockGroup.ts","../src/extensions/Blocks/index.ts","../src/extensions/Blocks/api/serialization.ts","../src/extensions/Blocks/helpers/findBlock.ts","../src/shared/plugins/suggestion/SuggestionPlugin.ts","../src/extensions/SlashMenu/SlashMenuExtension.ts","../src/extensions/DraggableBlocks/MultipleNodeSelection.ts","../src/extensions/DraggableBlocks/DraggableBlocksPlugin.ts","../src/extensions/DraggableBlocks/DraggableBlocksExtension.ts","../src/extensions/FormattingToolbar/FormattingToolbarPlugin.ts","../src/extensions/FormattingToolbar/FormattingToolbarExtension.ts","../src/extensions/HyperlinkToolbar/HyperlinkToolbarPlugin.ts","../src/extensions/HyperlinkToolbar/HyperlinkMark.ts","../src/extensions/Placeholder/PlaceholderExtension.ts","../src/shared/plugins/suggestion/SuggestionItem.ts","../src/extensions/SlashMenu/BaseSlashMenuItem.ts","../src/extensions/SlashMenu/defaultSlashMenuItems.tsx","../src/extensions/TextAlignment/TextAlignmentExtension.ts","../src/extensions/TextColor/TextColorExtension.ts","../src/extensions/TextColor/TextColorMark.ts","../src/extensions/TrailingNode/TrailingNodeExtension.ts","../src/BlockNoteExtensions.ts","../src/BlockNoteEditor.ts"],"sourcesContent":["import { Attribute, Node } from \"@tiptap/core\";\nimport { BlockNoteEditor } from \"../../..\";\nimport styles from \"../nodes/Block.module.css\";\nimport {\n  BlockConfig,\n  BlockSchema,\n  BlockSpec,\n  PropSchema,\n  TipTapNode,\n  TipTapNodeConfig,\n} from \"./blockTypes\";\n\nexport function camelToDataKebab(str: string): string {\n  return \"data-\" + str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\n// Function that uses the 'propSchema' of a blockConfig to create a TipTap\n// node's `addAttributes` property.\nexport function propsToAttributes<\n  BType extends string,\n  PSchema extends PropSchema,\n  ContainsInlineContent extends boolean,\n  BSchema extends BlockSchema\n>(\n  blockConfig: Omit<\n    BlockConfig<BType, PSchema, ContainsInlineContent, BSchema>,\n    \"render\"\n  >\n) {\n  const tiptapAttributes: Record<string, Attribute> = {};\n\n  Object.entries(blockConfig.propSchema).forEach(([name, spec]) => {\n    tiptapAttributes[name] = {\n      default: spec.default,\n      keepOnSplit: true,\n      // Props are displayed in kebab-case as HTML attributes. If a prop's\n      // value is the same as its default, we don't display an HTML\n      // attribute for it.\n      parseHTML: (element) => element.getAttribute(camelToDataKebab(name)),\n      renderHTML: (attributes) =>\n        attributes[name] !== spec.default\n          ? {\n              [camelToDataKebab(name)]: attributes[name],\n            }\n          : {},\n    };\n  });\n\n  return tiptapAttributes;\n}\n\n// Function that uses the 'parse' function of a blockConfig to create a\n// TipTap node's `parseHTML` property. This is only used for parsing content\n// from the clipboard.\nexport function parse<\n  BType extends string,\n  PSchema extends PropSchema,\n  ContainsInlineContent extends boolean,\n  BSchema extends BlockSchema\n>(\n  blockConfig: Omit<\n    BlockConfig<BType, PSchema, ContainsInlineContent, BSchema>,\n    \"render\"\n  >\n) {\n  return [\n    {\n      tag: \"div[data-content-type=\" + blockConfig.type + \"]\",\n    },\n  ];\n}\n\n// Function that uses the 'render' function of a blockConfig to create a\n// TipTap node's `renderHTML` property. Since custom blocks use node views,\n// this is only used for serializing content to the clipboard.\nexport function render<\n  BType extends string,\n  PSchema extends PropSchema,\n  ContainsInlineContent extends boolean,\n  BSchema extends BlockSchema\n>(\n  blockConfig: Omit<\n    BlockConfig<BType, PSchema, ContainsInlineContent, BSchema>,\n    \"render\"\n  >,\n  HTMLAttributes: Record<string, any>\n) {\n  // Create blockContent element\n  const blockContent = document.createElement(\"div\");\n  // Add blockContent HTML attribute\n  blockContent.setAttribute(\"data-content-type\", blockConfig.type);\n  // Add props as HTML attributes in kebab-case with \"data-\" prefix\n  for (const [attribute, value] of Object.entries(HTMLAttributes)) {\n    blockContent.setAttribute(attribute, value);\n  }\n\n  // TODO: This only works for content copied within BlockNote.\n  // Creates contentDOM element to serialize inline content into.\n  let contentDOM: HTMLDivElement | undefined;\n  if (blockConfig.containsInlineContent) {\n    contentDOM = document.createElement(\"div\");\n    blockContent.appendChild(contentDOM);\n  } else {\n    contentDOM = undefined;\n  }\n\n  return contentDOM !== undefined\n    ? {\n        dom: blockContent,\n        contentDOM: contentDOM,\n      }\n    : {\n        dom: blockContent,\n      };\n}\n\n// A function to create custom block for API consumers\n// we want to hide the tiptap node from API consumers and provide a simpler API surface instead\nexport function createBlockSpec<\n  BType extends string,\n  PSchema extends PropSchema,\n  ContainsInlineContent extends boolean,\n  BSchema extends BlockSchema\n>(\n  blockConfig: BlockConfig<BType, PSchema, ContainsInlineContent, BSchema>\n): BlockSpec<BType, PSchema> {\n  const node = createTipTapBlock<BType>({\n    name: blockConfig.type,\n    content: blockConfig.containsInlineContent ? \"inline*\" : \"\",\n    selectable: blockConfig.containsInlineContent,\n\n    addOptions() {\n      return {\n        editor: undefined,\n      };\n    },\n\n    addAttributes() {\n      return propsToAttributes(blockConfig);\n    },\n\n    parseHTML() {\n      return parse(blockConfig);\n    },\n\n    renderHTML({ HTMLAttributes }) {\n      return render(blockConfig, HTMLAttributes);\n    },\n\n    addNodeView() {\n      return ({ HTMLAttributes, getPos }) => {\n        // Create blockContent element\n        const blockContent = document.createElement(\"div\");\n        // Sets blockContent class\n        blockContent.className = styles.blockContent;\n        // Add blockContent HTML attribute\n        blockContent.setAttribute(\"data-content-type\", blockConfig.type);\n        // Add props as HTML attributes in kebab-case with \"data-\" prefix\n        for (const [attribute, value] of Object.entries(HTMLAttributes)) {\n          blockContent.setAttribute(attribute, value);\n        }\n\n        // Gets BlockNote editor instance\n        const editor = this.options.editor! as BlockNoteEditor<\n          BSchema & { [k in BType]: BlockSpec<BType, PSchema> }\n        >;\n        // Gets position of the node\n        if (typeof getPos === \"boolean\") {\n          throw new Error(\n            \"Cannot find node position as getPos is a boolean, not a function.\"\n          );\n        }\n        const pos = getPos();\n        // Gets TipTap editor instance\n        const tipTapEditor = editor._tiptapEditor;\n        // Gets parent blockContainer node\n        const blockContainer = tipTapEditor.state.doc.resolve(pos!).node();\n        // Gets block identifier\n        const blockIdentifier = blockContainer.attrs.id;\n\n        // Get the block\n        const block = editor.getBlock(blockIdentifier)!;\n        if (block.type !== blockConfig.type) {\n          throw new Error(\"Block type does not match\");\n        }\n\n        // Render elements\n        const rendered = blockConfig.render(block as any, editor);\n        // Add inlineContent class to inline content\n        if (\"contentDOM\" in rendered) {\n          rendered.contentDOM.className = `${\n            rendered.contentDOM.className\n              ? rendered.contentDOM.className + \" \"\n              : \"\"\n          }${styles.inlineContent}`;\n        }\n        // Add elements to blockContent\n        blockContent.appendChild(rendered.dom);\n\n        return \"contentDOM\" in rendered\n          ? {\n              dom: blockContent,\n              contentDOM: rendered.contentDOM,\n            }\n          : {\n              dom: blockContent,\n            };\n      };\n    },\n  });\n\n  return {\n    node: node,\n    propSchema: blockConfig.propSchema,\n  };\n}\n\nexport function createTipTapBlock<Type extends string>(\n  config: TipTapNodeConfig<Type>\n): TipTapNode<Type> {\n  // Type cast is needed as Node.name is mutable, though there is basically no\n  // reason to change it after creation. Alternative is to wrap Node in a new\n  // class, which I don't think is worth it since we'd only be changing 1\n  // attribute to be read only.\n  return Node.create({\n    ...config,\n    group: \"blockContent\",\n  }) as TipTapNode<Type>;\n}\n","import { InputRule, mergeAttributes } from \"@tiptap/core\";\nimport { createTipTapBlock } from \"../../../api/block\";\nimport styles from \"../../Block.module.css\";\n\nexport const HeadingBlockContent = createTipTapBlock<\"heading\">({\n  name: \"heading\",\n  content: \"inline*\",\n\n  addAttributes() {\n    return {\n      level: {\n        default: \"1\",\n        // instead of \"level\" attributes, use \"data-level\"\n        parseHTML: (element) => element.getAttribute(\"data-level\"),\n        renderHTML: (attributes) => {\n          return {\n            \"data-level\": attributes.level,\n          };\n        },\n      },\n    };\n  },\n\n  addInputRules() {\n    return [\n      ...[\"1\", \"2\", \"3\"].map((level) => {\n        // Creates a heading of appropriate level when starting with \"#\", \"##\", or \"###\".\n        return new InputRule({\n          find: new RegExp(`^(#{${parseInt(level)}})\\\\s$`),\n          handler: ({ state, chain, range }) => {\n            chain()\n              .BNUpdateBlock(state.selection.from, {\n                type: \"heading\",\n                props: {\n                  level: level as \"1\" | \"2\" | \"3\",\n                },\n              })\n              // Removes the \"#\" character(s) used to set the heading.\n              .deleteRange({ from: range.from, to: range.to });\n          },\n        });\n      }),\n    ];\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"h1\",\n        attrs: { level: \"1\" },\n        node: \"heading\",\n      },\n      {\n        tag: \"h2\",\n        attrs: { level: \"2\" },\n        node: \"heading\",\n      },\n      {\n        tag: \"h3\",\n        attrs: { level: \"3\" },\n        node: \"heading\",\n      },\n    ];\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockContent,\n        \"data-content-type\": this.name,\n      }),\n      [\"h\" + node.attrs.level, { class: styles.inlineContent }, 0],\n    ];\n  },\n});\n","import { Node, NodeType } from \"prosemirror-model\";\n\nexport type BlockInfo = {\n  id: string;\n  node: Node;\n  contentNode: Node;\n  contentType: NodeType;\n  numChildBlocks: number;\n  startPos: number;\n  endPos: number;\n  depth: number;\n};\n\n/**\n * Retrieves information regarding the most nested block node in a ProseMirror doc, that a given position lies in.\n * @param doc The ProseMirror doc.\n * @param posInBlock A position somewhere within a block node.\n * @returns A BlockInfo object for the block the given position is in, or undefined if the position is not in a block\n * for the given doc.\n */\nexport function getBlockInfoFromPos(\n  doc: Node,\n  posInBlock: number\n): BlockInfo | undefined {\n  if (posInBlock < 0 || posInBlock > doc.nodeSize) {\n    return undefined;\n  }\n\n  const $pos = doc.resolve(posInBlock);\n\n  const maxDepth = $pos.depth;\n  let node = $pos.node(maxDepth);\n  let depth = maxDepth;\n\n  while (true) {\n    if (depth < 0) {\n      return undefined;\n    }\n\n    if (node.type.name === \"blockContainer\") {\n      break;\n    }\n\n    depth -= 1;\n    node = $pos.node(depth);\n  }\n\n  const id = node.attrs[\"id\"];\n  const contentNode = node.firstChild!;\n  const contentType = contentNode.type;\n  const numChildBlocks = node.childCount === 2 ? node.lastChild!.childCount : 0;\n\n  const startPos = $pos.start(depth);\n  const endPos = $pos.end(depth);\n\n  return {\n    id,\n    node,\n    contentNode,\n    contentType,\n    numChildBlocks,\n    startPos,\n    endPos,\n    depth,\n  };\n}\n","import { Editor } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../../../helpers/getBlockInfoFromPos\";\n\nexport const handleEnter = (editor: Editor) => {\n  const { node, contentType } = getBlockInfoFromPos(\n    editor.state.doc,\n    editor.state.selection.from\n  )!;\n\n  const selectionEmpty =\n    editor.state.selection.anchor === editor.state.selection.head;\n\n  if (!contentType.name.endsWith(\"ListItem\") || !selectionEmpty) {\n    return false;\n  }\n\n  return editor.commands.first(({ state, chain, commands }) => [\n    () =>\n      // Changes list item block to a text block if the content is empty.\n      commands.command(() => {\n        if (node.textContent.length === 0) {\n          return commands.BNUpdateBlock(state.selection.from, {\n            type: \"paragraph\",\n            props: {},\n          });\n        }\n\n        return false;\n      }),\n\n    () =>\n      // Splits the current block, moving content inside that's after the cursor to a new block of the same type\n      // below.\n      commands.command(() => {\n        if (node.textContent.length > 0) {\n          chain()\n            .deleteSelection()\n            .BNSplitBlock(state.selection.from, true)\n            .run();\n\n          return true;\n        }\n\n        return false;\n      }),\n  ]);\n};\n","import { InputRule, mergeAttributes } from \"@tiptap/core\";\nimport { createTipTapBlock } from \"../../../../api/block\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts\";\nimport styles from \"../../../Block.module.css\";\n\nexport const BulletListItemBlockContent = createTipTapBlock<\"bulletListItem\">({\n  name: \"bulletListItem\",\n  content: \"inline*\",\n\n  addInputRules() {\n    return [\n      // Creates an unordered list when starting with \"-\", \"+\", or \"*\".\n      new InputRule({\n        find: new RegExp(`^[-+*]\\\\s$`),\n        handler: ({ state, chain, range }) => {\n          chain()\n            .BNUpdateBlock(state.selection.from, {\n              type: \"bulletListItem\",\n              props: {},\n            })\n            // Removes the \"-\", \"+\", or \"*\" character used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => handleEnter(this.editor),\n    };\n  },\n\n  parseHTML() {\n    return [\n      // Case for regular HTML list structure.\n      {\n        tag: \"li\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.tagName === \"UL\") {\n            return {};\n          }\n\n          return false;\n        },\n        node: \"bulletListItem\",\n      },\n      // Case for BlockNote list structure.\n      {\n        tag: \"p\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.getAttribute(\"data-content-type\") === \"bulletListItem\") {\n            return {};\n          }\n\n          return false;\n        },\n        priority: 300,\n        node: \"bulletListItem\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockContent,\n        \"data-content-type\": this.name,\n      }),\n      [\"p\", { class: styles.inlineContent }, 0],\n    ];\n  },\n});\n","import { Plugin, PluginKey } from \"prosemirror-state\";\nimport { getBlockInfoFromPos } from \"../../../../helpers/getBlockInfoFromPos\";\n\n// ProseMirror Plugin which automatically assigns indices to ordered list items per nesting level.\nconst PLUGIN_KEY = new PluginKey(`numbered-list-indexing`);\nexport const NumberedListIndexingPlugin = () => {\n  return new Plugin({\n    key: PLUGIN_KEY,\n    appendTransaction: (_transactions, _oldState, newState) => {\n      const tr = newState.tr;\n      tr.setMeta(\"numberedListIndexing\", true);\n\n      let modified = false;\n\n      // Traverses each node the doc using DFS, so blocks which are on the same nesting level will be traversed in the\n      // same order they appear. This means the index of each list item block can be calculated by incrementing the\n      // index of the previous list item block.\n      newState.doc.descendants((node, pos) => {\n        if (\n          node.type.name === \"blockContainer\" &&\n          node.firstChild!.type.name === \"numberedListItem\"\n        ) {\n          let newIndex = \"1\";\n          const isFirstBlockInDoc = pos === 1;\n\n          const blockInfo = getBlockInfoFromPos(tr.doc, pos + 1)!;\n          if (blockInfo === undefined) {\n            return;\n          }\n\n          // Checks if this block is the start of a new ordered list, i.e. if it's the first block in the document, the\n          // first block in its nesting level, or the previous block is not an ordered list item.\n          if (!isFirstBlockInDoc) {\n            const prevBlockInfo = getBlockInfoFromPos(tr.doc, pos - 2)!;\n            if (prevBlockInfo === undefined) {\n              return;\n            }\n\n            const isFirstBlockInNestingLevel =\n              blockInfo.depth !== prevBlockInfo.depth;\n\n            if (!isFirstBlockInNestingLevel) {\n              const prevBlockContentNode = prevBlockInfo.contentNode;\n              const prevBlockContentType = prevBlockInfo.contentType;\n\n              const isPrevBlockOrderedListItem =\n                prevBlockContentType.name === \"numberedListItem\";\n\n              if (isPrevBlockOrderedListItem) {\n                const prevBlockIndex = prevBlockContentNode.attrs[\"index\"];\n\n                newIndex = (parseInt(prevBlockIndex) + 1).toString();\n              }\n            }\n          }\n\n          const contentNode = blockInfo.contentNode;\n          const index = contentNode.attrs[\"index\"];\n\n          if (index !== newIndex) {\n            modified = true;\n\n            tr.setNodeMarkup(pos + 1, undefined, {\n              index: newIndex,\n            });\n          }\n        }\n      });\n\n      return modified ? tr : null;\n    },\n  });\n};\n","import { InputRule, mergeAttributes } from \"@tiptap/core\";\nimport { createTipTapBlock } from \"../../../../api/block\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts\";\nimport { NumberedListIndexingPlugin } from \"./NumberedListIndexingPlugin\";\nimport styles from \"../../../Block.module.css\";\n\nexport const NumberedListItemBlockContent =\n  createTipTapBlock<\"numberedListItem\">({\n    name: \"numberedListItem\",\n    content: \"inline*\",\n\n    addAttributes() {\n      return {\n        index: {\n          default: null,\n          parseHTML: (element) => element.getAttribute(\"data-index\"),\n          renderHTML: (attributes) => {\n            return {\n              \"data-index\": attributes.index,\n            };\n          },\n        },\n      };\n    },\n\n    addInputRules() {\n      return [\n        // Creates an ordered list when starting with \"1.\".\n        new InputRule({\n          find: new RegExp(`^1\\\\.\\\\s$`),\n          handler: ({ state, chain, range }) => {\n            chain()\n              .BNUpdateBlock(state.selection.from, {\n                type: \"numberedListItem\",\n                props: {},\n              })\n              // Removes the \"1.\" characters used to set the list.\n              .deleteRange({ from: range.from, to: range.to });\n          },\n        }),\n      ];\n    },\n\n    addKeyboardShortcuts() {\n      return {\n        Enter: () => handleEnter(this.editor),\n      };\n    },\n\n    addProseMirrorPlugins() {\n      return [NumberedListIndexingPlugin()];\n    },\n\n    parseHTML() {\n      return [\n        // Case for regular HTML list structure.\n        // (e.g.: when pasting from other apps)\n        {\n          tag: \"li\",\n          getAttrs: (element) => {\n            if (typeof element === \"string\") {\n              return false;\n            }\n\n            const parent = element.parentElement;\n\n            if (parent === null) {\n              return false;\n            }\n\n            if (parent.tagName === \"OL\") {\n              return {};\n            }\n\n            return false;\n          },\n          node: \"numberedListItem\",\n        },\n        // Case for BlockNote list structure.\n        // (e.g.: when pasting from blocknote)\n        {\n          tag: \"p\",\n          getAttrs: (element) => {\n            if (typeof element === \"string\") {\n              return false;\n            }\n\n            const parent = element.parentElement;\n\n            if (parent === null) {\n              return false;\n            }\n\n            if (\n              parent.getAttribute(\"data-content-type\") === \"numberedListItem\"\n            ) {\n              return {};\n            }\n\n            return false;\n          },\n          priority: 300,\n          node: \"numberedListItem\",\n        },\n      ];\n    },\n\n    renderHTML({ HTMLAttributes }) {\n      return [\n        \"div\",\n        mergeAttributes(HTMLAttributes, {\n          class: styles.blockContent,\n          \"data-content-type\": this.name,\n        }),\n        // we use a <p> tag, because for <li> tags we'd need to add a <ul> parent for around siblings to be semantically correct,\n        // which would be quite cumbersome\n        [\"p\", { class: styles.inlineContent }, 0],\n      ];\n    },\n  });\n","import { mergeAttributes } from \"@tiptap/core\";\nimport { createTipTapBlock } from \"../../../api/block\";\nimport styles from \"../../Block.module.css\";\n\nexport const ParagraphBlockContent = createTipTapBlock<\"paragraph\">({\n  name: \"paragraph\",\n  content: \"inline*\",\n\n  parseHTML() {\n    return [\n      {\n        tag: \"p\",\n        priority: 200,\n        node: \"paragraph\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockContent,\n        \"data-content-type\": this.name,\n      }),\n      [\"p\", { class: styles.inlineContent }, 0],\n    ];\n  },\n});\n","import { HeadingBlockContent } from \"../nodes/BlockContent/HeadingBlockContent/HeadingBlockContent\";\nimport { BulletListItemBlockContent } from \"../nodes/BlockContent/ListItemBlockContent/BulletListItemBlockContent/BulletListItemBlockContent\";\nimport { NumberedListItemBlockContent } from \"../nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListItemBlockContent\";\nimport { ParagraphBlockContent } from \"../nodes/BlockContent/ParagraphBlockContent/ParagraphBlockContent\";\nimport { PropSchema, TypesMatch } from \"./blockTypes\";\n\nexport const defaultProps = {\n  backgroundColor: {\n    default: \"transparent\" as const,\n  },\n  textColor: {\n    default: \"black\" as const, // TODO\n  },\n  textAlignment: {\n    default: \"left\" as const,\n    values: [\"left\", \"center\", \"right\", \"justify\"] as const,\n  },\n} satisfies PropSchema;\n\nexport type DefaultProps = typeof defaultProps;\n\nexport const defaultBlockSchema = {\n  paragraph: {\n    propSchema: defaultProps,\n    node: ParagraphBlockContent,\n  },\n  heading: {\n    propSchema: {\n      ...defaultProps,\n      level: { default: \"1\", values: [\"1\", \"2\", \"3\"] as const },\n    },\n    node: HeadingBlockContent,\n  },\n  bulletListItem: {\n    propSchema: defaultProps,\n    node: BulletListItemBlockContent,\n  },\n  numberedListItem: {\n    propSchema: defaultProps,\n    node: NumberedListItemBlockContent,\n  },\n} as const;\n\nexport type DefaultBlockSchema = TypesMatch<typeof defaultBlockSchema>;\n","import {\n  combineTransactionSteps,\n  Extension,\n  findChildren,\n  findChildrenInRange,\n  getChangedRanges,\n} from \"@tiptap/core\";\nimport { Fragment, Slice } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { v4 } from \"uuid\";\n\n/**\n * Code from Tiptap UniqueID extension (https://tiptap.dev/api/extensions/unique-id)\n * This extension is licensed under MIT (even though it's part of Tiptap pro).\n *\n * If you're a user of BlockNote, we still recommend to support their awesome work and become a sponsor!\n * https://tiptap.dev/pro\n */\n\n/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nfunction removeDuplicates(array: any, by = JSON.stringify) {\n  const seen: any = {};\n  return array.filter((item: any) => {\n    const key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true);\n  });\n}\n\n/**\n * Returns a list of duplicated items within an array.\n */\nfunction findDuplicates(items: any) {\n  const filtered = items.filter(\n    (el: any, index: number) => items.indexOf(el) !== index\n  );\n  const duplicates = removeDuplicates(filtered);\n  return duplicates;\n}\n\nconst UniqueID = Extension.create({\n  name: \"uniqueID\",\n  // we’ll set a very high priority to make sure this runs first\n  // and is compatible with `appendTransaction` hooks of other extensions\n  priority: 10000,\n  addOptions() {\n    return {\n      attributeName: \"id\",\n      types: [],\n      generateID: () => {\n        // Use mock ID if tests are running.\n        if ((window as any).__TEST_OPTIONS) {\n          if ((window as any).__TEST_OPTIONS.mockID === undefined) {\n            (window as any).__TEST_OPTIONS.mockID = 0;\n          } else {\n            (window as any).__TEST_OPTIONS.mockID++;\n          }\n\n          return (window as any).__TEST_OPTIONS.mockID.toString() as string;\n        }\n\n        return v4();\n      },\n      filterTransaction: null,\n    };\n  },\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          [this.options.attributeName]: {\n            default: null,\n            parseHTML: (element) =>\n              element.getAttribute(`data-${this.options.attributeName}`),\n            renderHTML: (attributes) => ({\n              [`data-${this.options.attributeName}`]:\n                attributes[this.options.attributeName],\n            }),\n          },\n        },\n      },\n    ];\n  },\n  // check initial content for missing ids\n  onCreate() {\n    // Don’t do this when the collaboration extension is active\n    // because this may update the content, so Y.js tries to merge these changes.\n    // This leads to empty block nodes.\n    // See: https://github.com/ueberdosis/tiptap/issues/2400\n    if (\n      this.editor.extensionManager.extensions.find(\n        (extension) => extension.name === \"collaboration\"\n      )\n    ) {\n      return;\n    }\n    const { view, state } = this.editor;\n    const { tr, doc } = state;\n    const { types, attributeName, generateID } = this.options;\n    const nodesWithoutId = findChildren(doc, (node) => {\n      return (\n        types.includes(node.type.name) && node.attrs[attributeName] === null\n      );\n    });\n    nodesWithoutId.forEach(({ node, pos }) => {\n      tr.setNodeMarkup(pos, undefined, {\n        ...node.attrs,\n        [attributeName]: generateID(),\n      });\n    });\n    tr.setMeta(\"addToHistory\", false);\n    view.dispatch(tr);\n  },\n  addProseMirrorPlugins() {\n    let dragSourceElement: any = null;\n    let transformPasted = false;\n    return [\n      new Plugin({\n        key: new PluginKey(\"uniqueID\"),\n        appendTransaction: (transactions, oldState, newState) => {\n          // console.log(\"appendTransaction\");\n          const docChanges =\n            transactions.some((transaction) => transaction.docChanged) &&\n            !oldState.doc.eq(newState.doc);\n          const filterTransactions =\n            this.options.filterTransaction &&\n            transactions.some((tr) => {\n              var _a, _b;\n              return !((_b = (_a = this.options).filterTransaction) === null ||\n              _b === void 0\n                ? void 0\n                : _b.call(_a, tr));\n            });\n          if (!docChanges || filterTransactions) {\n            return;\n          }\n          const { tr } = newState;\n          const { types, attributeName, generateID } = this.options;\n          const transform = combineTransactionSteps(\n            oldState.doc,\n            transactions as any\n          );\n          const { mapping } = transform;\n          // get changed ranges based on the old state\n          const changes = getChangedRanges(transform);\n\n          changes.forEach(({ newRange }) => {\n            const newNodes = findChildrenInRange(\n              newState.doc,\n              newRange,\n              (node) => {\n                return types.includes(node.type.name);\n              }\n            );\n            const newIds = newNodes\n              .map(({ node }) => node.attrs[attributeName])\n              .filter((id) => id !== null);\n            const duplicatedNewIds = findDuplicates(newIds);\n            newNodes.forEach(({ node, pos }) => {\n              var _a;\n              // instead of checking `node.attrs[attributeName]` directly\n              // we look at the current state of the node within `tr.doc`.\n              // this helps to prevent adding new ids to the same node\n              // if the node changed multiple times within one transaction\n              const id =\n                (_a = tr.doc.nodeAt(pos)) === null || _a === void 0\n                  ? void 0\n                  : _a.attrs[attributeName];\n              if (id === null) {\n                tr.setNodeMarkup(pos, undefined, {\n                  ...node.attrs,\n                  [attributeName]: generateID(),\n                });\n                return;\n              }\n              // check if the node doesn’t exist in the old state\n              const { deleted } = mapping.invert().mapResult(pos);\n              const newNode = deleted && duplicatedNewIds.includes(id);\n              if (newNode) {\n                tr.setNodeMarkup(pos, undefined, {\n                  ...node.attrs,\n                  [attributeName]: generateID(),\n                });\n              }\n            });\n          });\n          if (!tr.steps.length) {\n            return;\n          }\n          return tr;\n        },\n        // we register a global drag handler to track the current drag source element\n        view(view) {\n          const handleDragstart = (event: any) => {\n            var _a;\n            dragSourceElement = (\n              (_a = view.dom.parentElement) === null || _a === void 0\n                ? void 0\n                : _a.contains(event.target)\n            )\n              ? view.dom.parentElement\n              : null;\n          };\n          window.addEventListener(\"dragstart\", handleDragstart);\n          return {\n            destroy() {\n              window.removeEventListener(\"dragstart\", handleDragstart);\n            },\n          };\n        },\n        props: {\n          // `handleDOMEvents` is called before `transformPasted`\n          // so we can do some checks before\n          handleDOMEvents: {\n            // only create new ids for dropped content while holding `alt`\n            // or content is dragged from another editor\n            drop: (view, event: any) => {\n              var _a;\n              if (\n                dragSourceElement !== view.dom.parentElement ||\n                ((_a = event.dataTransfer) === null || _a === void 0\n                  ? void 0\n                  : _a.effectAllowed) === \"copy\"\n              ) {\n                dragSourceElement = null;\n                transformPasted = true;\n              }\n              return false;\n            },\n            // always create new ids on pasted content\n            paste: () => {\n              transformPasted = true;\n              return false;\n            },\n          },\n          // we’ll remove ids for every pasted node\n          // so we can create a new one within `appendTransaction`\n          transformPasted: (slice) => {\n            if (!transformPasted) {\n              return slice;\n            }\n            const { types, attributeName } = this.options;\n            const removeId = (fragment: any) => {\n              const list: any[] = [];\n              fragment.forEach((node: any) => {\n                // don’t touch text nodes\n                if (node.isText) {\n                  list.push(node);\n                  return;\n                }\n                // check for any other child nodes\n                if (!types.includes(node.type.name)) {\n                  list.push(node.copy(removeId(node.content)));\n                  return;\n                }\n                // remove id\n                const nodeWithoutId = node.type.create(\n                  {\n                    ...node.attrs,\n                    [attributeName]: null,\n                  },\n                  removeId(node.content),\n                  node.marks\n                );\n                list.push(nodeWithoutId);\n              });\n              return Fragment.from(list);\n            };\n            // reset check\n            transformPasted = false;\n            return new Slice(\n              removeId(slice.content),\n              slice.openStart,\n              slice.openEnd\n            );\n          },\n        },\n      }),\n    ];\n  },\n});\n\nexport { UniqueID, UniqueID as default };\n//# sourceMappingURL=tiptap-extension-unique-id.esm.js.map\n","export const isAppleOS = () =>\n  /Mac/.test(navigator.platform) ||\n  (/AppleWebKit/.test(navigator.userAgent) &&\n    /Mobile\\/\\w+/.test(navigator.userAgent));\n\nexport function formatKeyboardShortcut(shortcut: string) {\n  if (isAppleOS()) {\n    return shortcut.replace(\"Mod\", \"⌘\");\n  } else {\n    return shortcut.replace(\"Mod\", \"Ctrl\");\n  }\n}\n\nexport class UnreachableCaseError extends Error {\n  constructor(val: never) {\n    super(`Unreachable case: ${val}`);\n  }\n}\n","import { Mark } from \"@tiptap/pm/model\";\nimport { Node, Schema } from \"prosemirror-model\";\nimport {\n  Block,\n  BlockSchema,\n  PartialBlock,\n} from \"../../extensions/Blocks/api/blockTypes\";\n\nimport { defaultProps } from \"../../extensions/Blocks/api/defaultBlocks\";\nimport {\n  ColorStyle,\n  InlineContent,\n  PartialInlineContent,\n  PartialLink,\n  StyledText,\n  Styles,\n  ToggledStyle,\n} from \"../../extensions/Blocks/api/inlineContentTypes\";\nimport { getBlockInfoFromPos } from \"../../extensions/Blocks/helpers/getBlockInfoFromPos\";\nimport UniqueID from \"../../extensions/UniqueID/UniqueID\";\nimport { UnreachableCaseError } from \"../../shared/utils\";\n\nconst toggleStyles = new Set<ToggledStyle>([\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"strike\",\n  \"code\",\n]);\nconst colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n/**\n * Convert a StyledText inline element to a\n * prosemirror text node with the appropriate marks\n */\nfunction styledTextToNodes(styledText: StyledText, schema: Schema): Node[] {\n  const marks: Mark[] = [];\n\n  for (const [style, value] of Object.entries(styledText.styles)) {\n    if (toggleStyles.has(style as ToggledStyle)) {\n      marks.push(schema.mark(style));\n    } else if (colorStyles.has(style as ColorStyle)) {\n      marks.push(schema.mark(style, { color: value }));\n    }\n  }\n\n  return (\n    styledText.text\n      // Splits text & line breaks.\n      .split(/(\\n)/g)\n      // If the content ends with a line break, an empty string is added to the\n      // end, which this removes.\n      .filter((text) => text.length > 0)\n      // Converts text & line breaks to nodes.\n      .map((text) => {\n        if (text === \"\\n\") {\n          return schema.nodes[\"hardBreak\"].create();\n        } else {\n          return schema.text(text, marks);\n        }\n      })\n  );\n}\n\n/**\n * Converts a Link inline content element to\n * prosemirror text nodes with the appropriate marks\n */\nfunction linkToNodes(link: PartialLink, schema: Schema): Node[] {\n  const linkMark = schema.marks.link.create({\n    href: link.href,\n  });\n\n  return styledTextArrayToNodes(link.content, schema).map((node) => {\n    if (node.type.name === \"text\") {\n      return node.mark([...node.marks, linkMark]);\n    }\n\n    if (node.type.name === \"hardBreak\") {\n      return node;\n    }\n    throw new Error(\"unexpected node type\");\n  });\n}\n\n/**\n * Converts an array of StyledText inline content elements to\n * prosemirror text nodes with the appropriate marks\n */\nfunction styledTextArrayToNodes(\n  content: string | StyledText[],\n  schema: Schema\n): Node[] {\n  let nodes: Node[] = [];\n\n  if (typeof content === \"string\") {\n    nodes.push(\n      ...styledTextToNodes({ type: \"text\", text: content, styles: {} }, schema)\n    );\n    return nodes;\n  }\n\n  for (const styledText of content) {\n    nodes.push(...styledTextToNodes(styledText, schema));\n  }\n  return nodes;\n}\n\n/**\n * converts an array of inline content elements to prosemirror nodes\n */\nexport function inlineContentToNodes(\n  blockContent: PartialInlineContent[],\n  schema: Schema\n): Node[] {\n  let nodes: Node[] = [];\n\n  for (const content of blockContent) {\n    if (content.type === \"link\") {\n      nodes.push(...linkToNodes(content, schema));\n    } else if (content.type === \"text\") {\n      nodes.push(...styledTextArrayToNodes([content], schema));\n    } else {\n      throw new UnreachableCaseError(content);\n    }\n  }\n  return nodes;\n}\n\n/**\n * Converts a BlockNote block to a TipTap node.\n */\nexport function blockToNode<BSchema extends BlockSchema>(\n  block: PartialBlock<BSchema>,\n  schema: Schema\n) {\n  let id = block.id;\n\n  if (id === undefined) {\n    id = UniqueID.options.generateID();\n  }\n\n  let type = block.type;\n\n  if (type === undefined) {\n    type = \"paragraph\";\n  }\n\n  let contentNode: Node;\n\n  if (!block.content) {\n    contentNode = schema.nodes[type].create(block.props);\n  } else if (typeof block.content === \"string\") {\n    contentNode = schema.nodes[type].create(\n      block.props,\n      schema.text(block.content)\n    );\n  } else {\n    const nodes = inlineContentToNodes(block.content, schema);\n    contentNode = schema.nodes[type].create(block.props, nodes);\n  }\n\n  const children: Node[] = [];\n\n  if (block.children) {\n    for (const child of block.children) {\n      children.push(blockToNode(child, schema));\n    }\n  }\n\n  const groupNode = schema.nodes[\"blockGroup\"].create({}, children);\n\n  return schema.nodes[\"blockContainer\"].create(\n    {\n      id: id,\n      ...block.props,\n    },\n    children.length > 0 ? [contentNode, groupNode] : contentNode\n  );\n}\n\n/**\n * Converts an internal (prosemirror) content node to a BlockNote InlineContent array.\n */\nfunction contentNodeToInlineContent(contentNode: Node) {\n  const content: InlineContent[] = [];\n  let currentContent: InlineContent | undefined = undefined;\n\n  // Most of the logic below is for handling links because in ProseMirror links are marks\n  // while in BlockNote links are a type of inline content\n  contentNode.content.forEach((node) => {\n    // hardBreak nodes do not have an InlineContent equivalent, instead we\n    // add a newline to the previous node.\n    if (node.type.name === \"hardBreak\") {\n      if (currentContent) {\n        // Current content exists.\n        if (currentContent.type === \"text\") {\n          // Current content is text.\n          currentContent.text += \"\\n\";\n        } else if (currentContent.type === \"link\") {\n          // Current content is a link.\n          currentContent.content[currentContent.content.length - 1].text +=\n            \"\\n\";\n        }\n      } else {\n        // Current content does not exist.\n        currentContent = {\n          type: \"text\",\n          text: \"\\n\",\n          styles: {},\n        };\n      }\n\n      return;\n    }\n\n    const styles: Styles = {};\n    let linkMark: Mark | undefined;\n    let commentMark: Mark | undefined;\n\n    for (const mark of node.marks) {\n      if (mark.type.name === \"link\") {\n        linkMark = mark;\n      } else if (mark.type.name === \"comment\") {\n        commentMark = mark;\n      } else if (toggleStyles.has(mark.type.name as ToggledStyle)) {\n        styles[mark.type.name as ToggledStyle] = true;\n      } else if (colorStyles.has(mark.type.name as ColorStyle)) {\n        styles[mark.type.name as ColorStyle] = mark.attrs.color;\n      } else {\n        throw Error(\"Mark is of an unrecognized type: \" + mark.type.name);\n      }\n    }\n\n    // Parsing links and text.\n    // Current content exists.\n    if (currentContent) {\n      // Current content is text.\n      if (currentContent.type === \"text\") {\n        if (linkMark) {\n          // Node is a link (different type to current content).\n          content.push(currentContent);\n          currentContent = {\n            type: \"link\",\n            href: linkMark.attrs.href,\n            content: [\n              {\n                type: \"text\",\n                text: node.textContent,\n                styles,\n              },\n            ],\n          };\n        } else if (commentMark) {\n          content.push(currentContent);\n        } else {\n          // Node is text (same type as current content).\n          if (\n            JSON.stringify(currentContent.styles) === JSON.stringify(styles)\n          ) {\n            // Styles are the same.\n            currentContent.text += node.textContent;\n          } else {\n            // Styles are different.\n            content.push(currentContent);\n            currentContent = {\n              type: \"text\",\n              text: node.textContent,\n              styles,\n            };\n          }\n        }\n      } else if (currentContent.type === \"link\") {\n        // Current content is a link.\n        if (linkMark) {\n          // Node is a link (same type as current content).\n          // Link URLs are the same.\n          if (currentContent.href === linkMark.attrs.href) {\n            // Styles are the same.\n            if (\n              JSON.stringify(\n                currentContent.content[currentContent.content.length - 1].styles\n              ) === JSON.stringify(styles)\n            ) {\n              currentContent.content[currentContent.content.length - 1].text +=\n                node.textContent;\n            } else {\n              // Styles are different.\n              currentContent.content.push({\n                type: \"text\",\n                text: node.textContent,\n                styles,\n              });\n            }\n          } else {\n            // Link URLs are different.\n            content.push(currentContent);\n            currentContent = {\n              type: \"link\",\n              href: linkMark.attrs.href,\n              content: [\n                {\n                  type: \"text\",\n                  text: node.textContent,\n                  styles,\n                },\n              ],\n            };\n          }\n        } else {\n          // Node is text (different type to current content).\n          content.push(currentContent);\n          currentContent = {\n            type: \"text\",\n            text: node.textContent,\n            styles,\n          };\n        }\n      }\n    }\n    // Current content does not exist.\n    else {\n      // Node is text.\n      if (!linkMark) {\n        currentContent = {\n          type: \"text\",\n          text: node.textContent,\n          styles,\n        };\n      }\n      // Node is a link.\n      else {\n        currentContent = {\n          type: \"link\",\n          href: linkMark.attrs.href,\n          content: [\n            {\n              type: \"text\",\n              text: node.textContent,\n              styles,\n            },\n          ],\n        };\n      }\n    }\n  });\n\n  if (currentContent) {\n    content.push(currentContent);\n  }\n\n  return content;\n}\n\n/**\n * Convert a TipTap node to a BlockNote block.\n */\nexport function nodeToBlock<BSchema extends BlockSchema>(\n  node: Node,\n  blockSchema: BSchema,\n  blockCache?: WeakMap<Node, Block<BSchema>>\n): Block<BSchema> {\n  if (node.type.name !== \"blockContainer\") {\n    throw Error(\n      \"Node must be of type blockContainer, but is of type\" +\n        node.type.name +\n        \".\"\n    );\n  }\n\n  const cachedBlock = blockCache?.get(node);\n\n  if (cachedBlock) {\n    return cachedBlock;\n  }\n\n  const blockInfo = getBlockInfoFromPos(node, 0)!;\n\n  let id = blockInfo.id;\n\n  // Only used for blocks converted from other formats.\n  if (id === null) {\n    id = UniqueID.options.generateID();\n  }\n\n  const props: any = {};\n  for (const [attr, value] of Object.entries({\n    ...blockInfo.node.attrs,\n    ...blockInfo.contentNode.attrs,\n  })) {\n    const blockSpec = blockSchema[blockInfo.contentType.name];\n    if (!blockSpec) {\n      throw Error(\n        \"Block is of an unrecognized type: \" + blockInfo.contentType.name\n      );\n    }\n\n    const propSchema = blockSpec.propSchema;\n\n    if (attr in propSchema) {\n      props[attr] = value;\n    }\n    // Block ids are stored as node attributes the same way props are, so we\n    // need to ensure we don't attempt to read block ids as props.\n\n    // the second check is for the backgroundColor & textColor props.\n    // Since we want them to be inherited by child blocks, we can't put them on the blockContent node,\n    // and instead have to put them on the blockContainer node.\n    // The blockContainer node is the same for all block types, but some custom blocks might not use backgroundColor & textColor,\n    // so these 2 props are technically unexpected but we shouldn't log a warning.\n    // (this is a bit hacky)\n    else if (attr !== \"id\" && !(attr in defaultProps)) {\n      console.warn(\"Block has an unrecognized attribute: \" + attr);\n    }\n  }\n\n  const content = contentNodeToInlineContent(blockInfo.contentNode);\n\n  const children: Block<BSchema>[] = [];\n  for (let i = 0; i < blockInfo.numChildBlocks; i++) {\n    children.push(\n      nodeToBlock(blockInfo.node.lastChild!.child(i), blockSchema, blockCache)\n    );\n  }\n\n  const block: Block<BSchema> = {\n    id,\n    type: blockInfo.contentType.name,\n    props,\n    content,\n    children,\n  };\n\n  blockCache?.set(node, block);\n\n  return block;\n}\n","import { Node } from \"prosemirror-model\";\n\n/**\n * Get a TipTap node by id\n */\nexport function getNodeById(\n  id: string,\n  doc: Node\n): { node: Node; posBeforeNode: number } {\n  let targetNode: Node | undefined = undefined;\n  let posBeforeNode: number | undefined = undefined;\n\n  doc.firstChild!.descendants((node, pos) => {\n    // Skips traversing nodes after node with target ID has been found.\n    if (targetNode) {\n      return false;\n    }\n\n    // Keeps traversing nodes if block with target ID has not been found.\n    if (node.type.name !== \"blockContainer\" || node.attrs.id !== id) {\n      return true;\n    }\n\n    targetNode = node;\n    posBeforeNode = pos + 1;\n\n    return false;\n  });\n\n  if (targetNode === undefined || posBeforeNode === undefined) {\n    throw Error(\"Could not find block in the editor with matching ID.\");\n  }\n\n  return {\n    node: targetNode,\n    posBeforeNode: posBeforeNode,\n  };\n}\n","import { Editor } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\nimport {\n  BlockIdentifier,\n  BlockSchema,\n  PartialBlock,\n} from \"../../extensions/Blocks/api/blockTypes\";\nimport { blockToNode } from \"../nodeConversions/nodeConversions\";\nimport { getNodeById } from \"../util/nodeUtil\";\n\nexport function insertBlocks<BSchema extends BlockSchema>(\n  blocksToInsert: PartialBlock<BSchema>[],\n  referenceBlock: BlockIdentifier,\n  placement: \"before\" | \"after\" | \"nested\" = \"before\",\n  editor: Editor\n): void {\n  const id =\n    typeof referenceBlock === \"string\" ? referenceBlock : referenceBlock.id;\n\n  const nodesToInsert: Node[] = [];\n  for (const blockSpec of blocksToInsert) {\n    nodesToInsert.push(blockToNode(blockSpec, editor.schema));\n  }\n\n  let insertionPos = -1;\n\n  const { node, posBeforeNode } = getNodeById(id, editor.state.doc);\n\n  if (placement === \"before\") {\n    insertionPos = posBeforeNode;\n  }\n\n  if (placement === \"after\") {\n    insertionPos = posBeforeNode + node.nodeSize;\n  }\n\n  if (placement === \"nested\") {\n    // Case if block doesn't already have children.\n    if (node.childCount < 2) {\n      insertionPos = posBeforeNode + node.firstChild!.nodeSize + 1;\n\n      const blockGroupNode = editor.state.schema.nodes[\"blockGroup\"].create(\n        {},\n        nodesToInsert\n      );\n\n      editor.view.dispatch(\n        editor.state.tr.insert(insertionPos, blockGroupNode)\n      );\n\n      return;\n    }\n\n    insertionPos = posBeforeNode + node.firstChild!.nodeSize + 2;\n  }\n\n  editor.view.dispatch(editor.state.tr.insert(insertionPos, nodesToInsert));\n}\n\nexport function updateBlock<BSchema extends BlockSchema>(\n  blockToUpdate: BlockIdentifier,\n  update: PartialBlock<BSchema>,\n  editor: Editor\n) {\n  const id =\n    typeof blockToUpdate === \"string\" ? blockToUpdate : blockToUpdate.id;\n  const { posBeforeNode } = getNodeById(id, editor.state.doc);\n\n  editor.commands.BNUpdateBlock(posBeforeNode + 1, update);\n}\n\nexport function removeBlocks(\n  blocksToRemove: BlockIdentifier[],\n  editor: Editor\n) {\n  const idsOfBlocksToRemove = new Set<string>(\n    blocksToRemove.map((block) =>\n      typeof block === \"string\" ? block : block.id\n    )\n  );\n\n  let removedSize = 0;\n\n  editor.state.doc.descendants((node, pos) => {\n    // Skips traversing nodes after all target blocks have been removed.\n    if (idsOfBlocksToRemove.size === 0) {\n      return false;\n    }\n\n    // Keeps traversing nodes if block with target ID has not been found.\n    if (\n      node.type.name !== \"blockContainer\" ||\n      !idsOfBlocksToRemove.has(node.attrs.id)\n    ) {\n      return true;\n    }\n\n    idsOfBlocksToRemove.delete(node.attrs.id);\n    const oldDocSize = editor.state.doc.nodeSize;\n\n    editor.commands.BNDeleteBlock(pos - removedSize + 1);\n\n    const newDocSize = editor.state.doc.nodeSize;\n    removedSize += oldDocSize - newDocSize;\n\n    return false;\n  });\n\n  if (idsOfBlocksToRemove.size > 0) {\n    let notFoundIds = [...idsOfBlocksToRemove].join(\"\\n\");\n\n    throw Error(\n      \"Blocks with the following IDs could not be found in the editor: \" +\n        notFoundIds\n    );\n  }\n}\n\nexport function replaceBlocks<BSchema extends BlockSchema>(\n  blocksToRemove: BlockIdentifier[],\n  blocksToInsert: PartialBlock<BSchema>[],\n  editor: Editor\n) {\n  insertBlocks(blocksToInsert, blocksToRemove[0], \"before\", editor);\n  removeBlocks(blocksToRemove, editor);\n}\n","import { Element as HASTElement, Parent as HASTParent } from \"hast\";\n\n/**\n * Rehype plugin which removes <u> tags. Used to remove underlines before converting HTML to markdown, as Markdown\n * doesn't support underlines.\n */\nexport function removeUnderlines() {\n  const removeUnderlinesHelper = (tree: HASTParent) => {\n    let numChildElements = tree.children.length;\n\n    for (let i = 0; i < numChildElements; i++) {\n      const node = tree.children[i];\n\n      if (node.type === \"element\") {\n        // Recursively removes underlines from child elements.\n        removeUnderlinesHelper(node);\n\n        if ((node as HASTElement).tagName === \"u\") {\n          // Lifts child nodes outside underline element, deletes the underline element, and updates current index &\n          // the number of child elements.\n          if (node.children.length > 0) {\n            tree.children.splice(i, 1, ...node.children);\n\n            const numElementsAdded = node.children.length - 1;\n            numChildElements += numElementsAdded;\n            i += numElementsAdded;\n          } else {\n            tree.children.splice(i, 1);\n\n            numChildElements--;\n            i--;\n          }\n        }\n      }\n    }\n  };\n\n  return removeUnderlinesHelper;\n}\n","import { Element as HASTElement, Parent as HASTParent } from \"hast\";\nimport { fromDom } from \"hast-util-from-dom\";\n\ntype SimplifyBlocksOptions = {\n  orderedListItemBlockTypes: Set<string>;\n  unorderedListItemBlockTypes: Set<string>;\n};\n\n/**\n * Rehype plugin which converts the HTML output string rendered by BlockNote into a simplified structure which better\n * follows HTML standards. It does several things:\n * - Removes all block related div elements, leaving only the actual content inside the block.\n * - Lifts nested blocks to a higher level for all block types that don't represent list items.\n * - Wraps blocks which represent list items in corresponding ul/ol HTML elements and restructures them to comply\n * with HTML list structure.\n * @param options Options for specifying which block types represent ordered and unordered list items.\n */\nexport function simplifyBlocks(options: SimplifyBlocksOptions) {\n  const listItemBlockTypes = new Set<string>([\n    ...options.orderedListItemBlockTypes,\n    ...options.unorderedListItemBlockTypes,\n  ]);\n\n  const simplifyBlocksHelper = (tree: HASTParent) => {\n    let numChildElements = tree.children.length;\n    let activeList: HASTElement | undefined;\n\n    for (let i = 0; i < numChildElements; i++) {\n      const blockOuter = tree.children[i] as HASTElement;\n      const blockContainer = blockOuter.children[0] as HASTElement;\n      const blockContent = blockContainer.children[0] as HASTElement;\n      const blockGroup =\n        blockContainer.children.length === 2\n          ? (blockContainer.children[1] as HASTElement)\n          : null;\n\n      const isListItemBlock = listItemBlockTypes.has(\n        blockContent.properties![\"dataContentType\"] as string\n      );\n\n      const listItemBlockType = isListItemBlock\n        ? options.orderedListItemBlockTypes.has(\n            blockContent.properties![\"dataContentType\"] as string\n          )\n          ? \"ol\"\n          : \"ul\"\n        : null;\n\n      // Plugin runs recursively to process nested blocks.\n      if (blockGroup !== null) {\n        simplifyBlocksHelper(blockGroup);\n      }\n\n      // Checks that there is an active list, but the block can't be added to it as it's of a different type.\n      if (activeList && activeList.tagName !== listItemBlockType) {\n        // Blocks that were copied into the list are removed and the list is inserted in their place.\n        tree.children.splice(\n          i - activeList.children.length,\n          activeList.children.length,\n          activeList\n        );\n\n        // Updates the current index and number of child elements.\n        const numElementsRemoved = activeList.children.length - 1;\n        i -= numElementsRemoved;\n        numChildElements -= numElementsRemoved;\n\n        activeList = undefined;\n      }\n\n      // Checks if the block represents a list item.\n      if (isListItemBlock) {\n        // Checks if a list isn't already active. We don't have to check if the block and the list are of the same\n        // type as this was already done earlier.\n        if (!activeList) {\n          // Creates a new list element to represent an active list.\n          activeList = fromDom(\n            document.createElement(listItemBlockType!)\n          ) as HASTElement;\n        }\n\n        // Creates a new list item element to represent the block.\n        const listItemElement = fromDom(\n          document.createElement(\"li\")\n        ) as HASTElement;\n\n        // Adds only the content inside the block to the active list.\n        listItemElement.children.push(blockContent.children[0]);\n        // Nested blocks have already been processed in the recursive function call, so the resulting elements are\n        // also added to the active list.\n        if (blockGroup !== null) {\n          listItemElement.children.push(...blockGroup.children);\n        }\n\n        // Adds the list item representing the block to the active list.\n        activeList.children.push(listItemElement);\n      } else if (blockGroup !== null) {\n        // Lifts all children out of the current block, as only list items should allow nesting.\n        tree.children.splice(i + 1, 0, ...blockGroup.children);\n        // Replaces the block with only the content inside it.\n        tree.children[i] = blockContent.children[0];\n\n        // Updates the current index and number of child elements.\n        const numElementsAdded = blockGroup.children.length;\n        i += numElementsAdded;\n        numChildElements += numElementsAdded;\n      } else {\n        // Replaces the block with only the content inside it.\n        tree.children[i] = blockContent.children[0];\n      }\n    }\n\n    // Since the active list is only inserted after encountering a block which can't be added to it, there are cases\n    // where it remains un-inserted after processing all blocks, which are handled here.\n    if (activeList) {\n      tree.children.splice(\n        numChildElements - activeList.children.length,\n        activeList.children.length,\n        activeList\n      );\n    }\n  };\n\n  return simplifyBlocksHelper;\n}\n","import { DOMParser, DOMSerializer, Schema } from \"prosemirror-model\";\nimport rehypeParse from \"rehype-parse\";\nimport rehypeRemark from \"rehype-remark\";\nimport rehypeStringify from \"rehype-stringify\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkParse from \"remark-parse\";\nimport remarkRehype from \"remark-rehype\";\nimport remarkStringify from \"remark-stringify\";\nimport { unified } from \"unified\";\nimport { Block, BlockSchema } from \"../../extensions/Blocks/api/blockTypes\";\n\nimport { blockToNode, nodeToBlock } from \"../nodeConversions/nodeConversions\";\nimport { removeUnderlines } from \"./removeUnderlinesRehypePlugin\";\nimport { simplifyBlocks } from \"./simplifyBlocksRehypePlugin\";\n\nexport async function blocksToHTML<BSchema extends BlockSchema>(\n  blocks: Block<BSchema>[],\n  schema: Schema\n): Promise<string> {\n  const htmlParentElement = document.createElement(\"div\");\n  const serializer = DOMSerializer.fromSchema(schema);\n\n  for (const block of blocks) {\n    const node = blockToNode(block, schema);\n    const htmlNode = serializer.serializeNode(node);\n    htmlParentElement.appendChild(htmlNode);\n  }\n\n  const htmlString = await unified()\n    .use(rehypeParse, { fragment: true })\n    .use(simplifyBlocks, {\n      orderedListItemBlockTypes: new Set<string>([\"numberedListItem\"]),\n      unorderedListItemBlockTypes: new Set<string>([\"bulletListItem\"]),\n    })\n    .use(rehypeStringify)\n    .process(htmlParentElement.innerHTML);\n\n  return htmlString.value as string;\n}\n\nexport async function HTMLToBlocks<BSchema extends BlockSchema>(\n  html: string,\n  blockSchema: BSchema,\n  schema: Schema\n): Promise<Block<BSchema>[]> {\n  const htmlNode = document.createElement(\"div\");\n  htmlNode.innerHTML = html.trim();\n\n  const parser = DOMParser.fromSchema(schema);\n  const parentNode = parser.parse(htmlNode);\n\n  const blocks: Block<BSchema>[] = [];\n\n  for (let i = 0; i < parentNode.firstChild!.childCount; i++) {\n    blocks.push(nodeToBlock(parentNode.firstChild!.child(i), blockSchema));\n  }\n\n  return blocks;\n}\n\nexport async function blocksToMarkdown<BSchema extends BlockSchema>(\n  blocks: Block<BSchema>[],\n  schema: Schema\n): Promise<string> {\n  const markdownString = await unified()\n    .use(rehypeParse, { fragment: true })\n    .use(removeUnderlines)\n    .use(rehypeRemark)\n    .use(remarkGfm)\n    .use(remarkStringify)\n    .process(await blocksToHTML(blocks, schema));\n\n  return markdownString.value as string;\n}\n\nexport async function markdownToBlocks<BSchema extends BlockSchema>(\n  markdown: string,\n  blockSchema: BSchema,\n  schema: Schema\n): Promise<Block<BSchema>[]> {\n  const htmlString = await unified()\n    .use(remarkParse)\n    .use(remarkGfm)\n    .use(remarkRehype)\n    .use(rehypeStringify)\n    .process(markdown);\n\n  return HTMLToBlocks(htmlString.value as string, blockSchema, schema);\n}\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    blockBackgroundColor: {\n      setBlockBackgroundColor: (\n        posInBlock: number,\n        color: string\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const BackgroundColorExtension = Extension.create({\n  name: \"blockBackgroundColor\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          backgroundColor: {\n            default: \"default\",\n            parseHTML: (element) =>\n              element.hasAttribute(\"data-background-color\")\n                ? element.getAttribute(\"data-background-color\")\n                : \"default\",\n            renderHTML: (attributes) =>\n              attributes.backgroundColor !== \"default\" && {\n                \"data-background-color\": attributes.backgroundColor,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setBlockBackgroundColor:\n        (posInBlock, color) =>\n        ({ state, view }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          state.tr.setNodeAttribute(\n            blockInfo.startPos - 1,\n            \"backgroundColor\",\n            color\n          );\n\n          view.focus();\n\n          return true;\n        },\n    };\n  },\n});\n","import { Mark } from \"@tiptap/core\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    backgroundColor: {\n      setBackgroundColor: (color: string) => ReturnType;\n    };\n  }\n}\n\nexport const BackgroundColorMark = Mark.create({\n  name: \"backgroundColor\",\n\n  addAttributes() {\n    return {\n      color: {\n        default: undefined,\n        parseHTML: (element) => element.getAttribute(\"data-background-color\"),\n        renderHTML: (attributes) => ({\n          \"data-background-color\": attributes.color,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.hasAttribute(\"data-background-color\")) {\n            return { color: element.getAttribute(\"data-background-color\") };\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"span\", HTMLAttributes, 0];\n  },\n\n  addCommands() {\n    return {\n      setBackgroundColor:\n        (color) =>\n        ({ commands }) => {\n          if (color !== \"default\") {\n            return commands.setMark(this.name, { color: color });\n          }\n\n          return commands.unsetMark(this.name);\n        },\n    };\n  },\n});\n","import { findChildren } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\n\nconst PLUGIN_KEY = new PluginKey(`previous-blocks`);\n\nconst nodeAttributes: Record<string, string> = {\n  // Numbered List Items\n  index: \"index\",\n  // Headings\n  level: \"level\",\n  // All Blocks\n  type: \"type\",\n  depth: \"depth\",\n  \"depth-change\": \"depth-change\",\n};\n\n/**\n * This plugin tracks transformation of Block node attributes, so we can support CSS transitions.\n *\n * Problem it solves: ProseMirror recreates the DOM when transactions happen. So when a transaction changes a Node attribute,\n * it results in a completely new DOM element. This means CSS transitions don't work.\n *\n * Solution: When attributes change on a node, this plugin sets a data-* attribute with the \"previous\" value. This way we can still use CSS transitions. (See block.module.css)\n */\nexport const PreviousBlockTypePlugin = () => {\n  let timeout: any;\n  return new Plugin({\n    key: PLUGIN_KEY,\n    view(_editorView) {\n      return {\n        update: async (view, _prevState) => {\n          if (this.key?.getState(view.state).updatedBlocks.size > 0) {\n            // use setTimeout 0 to clear the decorations so that at least\n            // for one DOM-render the decorations have been applied\n            timeout = setTimeout(() => {\n              view.dispatch(\n                view.state.tr.setMeta(PLUGIN_KEY, { clearUpdate: true })\n              );\n            }, 0);\n          }\n        },\n        destroy: () => {\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n        },\n      };\n    },\n    state: {\n      init() {\n        return {\n          // Block attributes, by block ID, from just before the previous transaction.\n          prevTransactionOldBlockAttrs: {} as any,\n          // Block attributes, by block ID, from just before the current transaction.\n          currentTransactionOldBlockAttrs: {} as any,\n          // Set of IDs of blocks whose attributes changed from the current transaction.\n          updatedBlocks: new Set<string>(),\n        };\n      },\n\n      apply(transaction, prev, oldState, newState) {\n        prev.currentTransactionOldBlockAttrs = {};\n        prev.updatedBlocks.clear();\n\n        if (!transaction.docChanged || oldState.doc.eq(newState.doc)) {\n          return prev;\n        }\n\n        // TODO: Instead of iterating through the entire document, only check nodes affected by the transactions. Will\n        //  also probably require checking nodes affected by the previous transaction too.\n        // We didn't get this to work yet:\n        // const transform = combineTransactionSteps(oldState.doc, [transaction]);\n        // // const { mapping } = transform;\n        // const changes = getChangedRanges(transform);\n        //\n        // changes.forEach(({ oldRange, newRange }) => {\n        // const oldNodes = findChildrenInRange(\n        //   oldState.doc,\n        //   oldRange,\n        //   (node) => node.attrs.id\n        // );\n        //\n        // const newNodes = findChildrenInRange(\n        //   newState.doc,\n        //   newRange,\n        //   (node) => node.attrs.id\n        // );\n\n        const currentTransactionOriginalOldBlockAttrs = {} as any;\n\n        const oldNodes = findChildren(oldState.doc, (node) => node.attrs.id);\n        const oldNodesById = new Map(\n          oldNodes.map((node) => [node.node.attrs.id, node])\n        );\n        const newNodes = findChildren(newState.doc, (node) => node.attrs.id);\n\n        // Traverses all block containers in the new editor state.\n        for (let node of newNodes) {\n          const oldNode = oldNodesById.get(node.node.attrs.id);\n\n          const oldContentNode = oldNode?.node.firstChild;\n          const newContentNode = node.node.firstChild;\n\n          if (oldNode && oldContentNode && newContentNode) {\n            const newAttrs = {\n              index: newContentNode.attrs.index,\n              level: newContentNode.attrs.level,\n              type: newContentNode.type.name,\n              depth: newState.doc.resolve(node.pos).depth,\n            };\n\n            let oldAttrs = {\n              index: oldContentNode.attrs.index,\n              level: oldContentNode.attrs.level,\n              type: oldContentNode.type.name,\n              depth: oldState.doc.resolve(oldNode.pos).depth,\n            };\n\n            currentTransactionOriginalOldBlockAttrs[node.node.attrs.id] =\n              oldAttrs;\n\n            // Whenever a transaction is appended by the OrderedListItemIndexPlugin, it's given the metadata:\n            // { \"orderedListIndexing\": true }\n            // These appended transactions happen immediately after any transaction which causes ordered list item\n            // indices to require updating, including those which trigger animations. Therefore, these animations are\n            // immediately overridden when the PreviousBlockTypePlugin processes the appended transaction, despite only\n            // the listItemIndex attribute changing. To solve this, oldAttrs must be edited for transactions with the\n            // \"orderedListIndexing\" metadata, so the correct animation can be re-triggered.\n            if (transaction.getMeta(\"numberedListIndexing\")) {\n              // If the block existed before the transaction, gets the attributes from before the previous transaction\n              // (i.e. the transaction that caused list item indices to need updating).\n              if (node.node.attrs.id in prev.prevTransactionOldBlockAttrs) {\n                oldAttrs =\n                  prev.prevTransactionOldBlockAttrs[node.node.attrs.id];\n              }\n\n              // Stops list item indices themselves being animated (looks smoother), unless the block's content type is\n              // changing from a numbered list item to something else.\n              if (newAttrs.type === \"numberedListItem\") {\n                oldAttrs.index = newAttrs.index;\n              }\n            }\n\n            prev.currentTransactionOldBlockAttrs[node.node.attrs.id] = oldAttrs;\n\n            // TODO: faster deep equal?\n            if (JSON.stringify(oldAttrs) !== JSON.stringify(newAttrs)) {\n              (oldAttrs as any)[\"depth-change\"] =\n                oldAttrs.depth - newAttrs.depth;\n\n              // for debugging:\n              // console.log(\n              //   \"id:\",\n              //   node.node.attrs.id,\n              //   \"previousBlockTypePlugin changes detected, oldAttrs\",\n              //   oldAttrs,\n              //   \"new\",\n              //   newAttrs\n              // );\n\n              prev.updatedBlocks.add(node.node.attrs.id);\n            }\n          }\n        }\n\n        prev.prevTransactionOldBlockAttrs =\n          currentTransactionOriginalOldBlockAttrs;\n\n        return prev;\n      },\n    },\n    props: {\n      decorations(state) {\n        const pluginState = (this as Plugin).getState(state);\n        if (pluginState.updatedBlocks.size === 0) {\n          return undefined;\n        }\n\n        const decorations: Decoration[] = [];\n\n        state.doc.descendants((node, pos) => {\n          if (!node.attrs.id) {\n            return;\n          }\n\n          if (!pluginState.updatedBlocks.has(node.attrs.id)) {\n            return;\n          }\n\n          const prevAttrs =\n            pluginState.currentTransactionOldBlockAttrs[node.attrs.id];\n          const decorationAttrs: any = {};\n\n          for (let [nodeAttr, val] of Object.entries(prevAttrs)) {\n            decorationAttrs[\"data-prev-\" + nodeAttributes[nodeAttr]] =\n              val || \"none\";\n          }\n\n          // for debugging:\n          // console.log(\n          //   \"previousBlockTypePlugin committing decorations\",\n          //   decorationAttrs\n          // );\n\n          const decoration = Decoration.node(pos, pos + node.nodeSize, {\n            ...decorationAttrs,\n          });\n\n          decorations.push(decoration);\n        });\n\n        return DecorationSet.create(state.doc, decorations);\n      },\n    },\n  });\n};\n","// Object containing all possible block attributes.\nconst BlockAttributes: Record<string, string> = {\n  blockColor: \"data-block-color\",\n  blockStyle: \"data-block-style\",\n  id: \"data-id\",\n  depth: \"data-depth\",\n  depthChange: \"data-depth-change\",\n};\n\nexport default BlockAttributes;\n","import { mergeAttributes, Node } from \"@tiptap/core\";\nimport { Fragment, Node as PMNode, Slice } from \"prosemirror-model\";\nimport { TextSelection } from \"prosemirror-state\";\nimport {\n  blockToNode,\n  inlineContentToNodes,\n} from \"../../../api/nodeConversions/nodeConversions\";\n\nimport { getBlockInfoFromPos } from \"../helpers/getBlockInfoFromPos\";\nimport { PreviousBlockTypePlugin } from \"../PreviousBlockTypePlugin\";\nimport styles from \"./Block.module.css\";\nimport BlockAttributes from \"./BlockAttributes\";\nimport { BlockSchema, PartialBlock } from \"../api/blockTypes\";\n\n// TODO\nexport interface IBlock {\n  HTMLAttributes: Record<string, any>;\n}\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    block: {\n      BNCreateBlock: (pos: number) => ReturnType;\n      BNDeleteBlock: (posInBlock: number) => ReturnType;\n      BNMergeBlocks: (posBetweenBlocks: number) => ReturnType;\n      BNSplitBlock: (posInBlock: number, keepType: boolean) => ReturnType;\n      BNUpdateBlock: <BSchema extends BlockSchema>(\n        posInBlock: number,\n        block: PartialBlock<BSchema>\n      ) => ReturnType;\n      BNCreateOrUpdateBlock: <BSchema extends BlockSchema>(\n        posInBlock: number,\n        block: PartialBlock<BSchema>\n      ) => ReturnType;\n    };\n  }\n}\n\n/**\n * The main \"Block node\" documents consist of\n */\nexport const BlockContainer = Node.create<IBlock>({\n  name: \"blockContainer\",\n  group: \"blockContainer\",\n  // A block always contains content, and optionally a blockGroup which contains nested blocks\n  content: \"blockContent blockGroup?\",\n  // Ensures content-specific keyboard handlers trigger first.\n  priority: 50,\n  defining: true,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const attrs: Record<string, string> = {};\n          for (let [nodeAttr, HTMLAttr] of Object.entries(BlockAttributes)) {\n            if (element.getAttribute(HTMLAttr)) {\n              attrs[nodeAttr] = element.getAttribute(HTMLAttr)!;\n            }\n          }\n\n          if (element.getAttribute(\"data-node-type\") === \"blockContainer\") {\n            return attrs;\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockOuter,\n        \"data-node-type\": \"block-outer\",\n      }),\n      [\n        \"div\",\n        mergeAttributes(HTMLAttributes, {\n          // TODO: maybe remove html attributes from inner block\n          class: styles.block,\n          \"data-node-type\": this.name,\n        }),\n        0,\n      ],\n    ];\n  },\n\n  addCommands() {\n    return {\n      // Creates a new text block at a given position.\n      BNCreateBlock:\n        (pos) =>\n        ({ state, dispatch }) => {\n          const newBlock =\n            state.schema.nodes[\"blockContainer\"].createAndFill()!;\n\n          if (dispatch) {\n            state.tr.insert(pos, newBlock);\n          }\n\n          return true;\n        },\n      // Deletes a block at a given position.\n      BNDeleteBlock:\n        (posInBlock) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { startPos, endPos } = blockInfo;\n\n          if (dispatch) {\n            state.tr.deleteRange(startPos, endPos);\n          }\n\n          return true;\n        },\n      // Updates a block at a given position.\n      BNUpdateBlock:\n        (posInBlock, block) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { startPos, endPos, node, contentNode } = blockInfo;\n\n          if (dispatch) {\n            // Adds blockGroup node with child blocks if necessary.\n            if (block.children !== undefined) {\n              const childNodes = [];\n\n              // Creates ProseMirror nodes for each child block, including their descendants.\n              for (const child of block.children) {\n                childNodes.push(blockToNode(child, state.schema));\n              }\n\n              // Checks if a blockGroup node already exists.\n              if (node.childCount === 2) {\n                // Replaces all child nodes in the existing blockGroup with the ones created earlier.\n                state.tr.replace(\n                  startPos + contentNode.nodeSize + 1,\n                  endPos - 1,\n                  new Slice(Fragment.from(childNodes), 0, 0)\n                );\n              } else {\n                // Inserts a new blockGroup containing the child nodes created earlier.\n                state.tr.insert(\n                  startPos + contentNode.nodeSize,\n                  state.schema.nodes[\"blockGroup\"].create({}, childNodes)\n                );\n              }\n            }\n\n            // Replaces the blockContent node's content if necessary.\n            if (block.content !== undefined) {\n              let content: PMNode[] = [];\n\n              // Checks if the provided content is a string or InlineContent[] type.\n              if (typeof block.content === \"string\") {\n                // Adds a single text node with no marks to the content.\n                content.push(state.schema.text(block.content));\n              } else {\n                // Adds a text node with the provided styles converted into marks to the content, for each InlineContent\n                // object.\n                content = inlineContentToNodes(block.content, state.schema);\n              }\n\n              // Replaces the contents of the blockContent node with the previously created text node(s).\n              state.tr.replace(\n                startPos + 1,\n                startPos + contentNode.nodeSize - 1,\n                new Slice(Fragment.from(content), 0, 0)\n              );\n            }\n\n            // Changes the blockContent node type and adds the provided props as attributes. Also preserves all existing\n            // attributes that are compatible with the new type.\n            state.tr.setNodeMarkup(\n              startPos,\n              block.type === undefined\n                ? undefined\n                : state.schema.nodes[block.type],\n              {\n                ...contentNode.attrs,\n                ...block.props,\n              }\n            );\n\n            // Adds all provided props as attributes to the parent blockContainer node too, and also preserves existing\n            // attributes.\n            state.tr.setNodeMarkup(startPos - 1, undefined, {\n              ...node.attrs,\n              ...block.props,\n            });\n          }\n\n          return true;\n        },\n      // Appends the text contents of a block to the nearest previous block, given a position between them. Children of\n      // the merged block are moved out of it first, rather than also being merged.\n      //\n      // In the example below, the position passed into the function is between Block1 and Block2.\n      //\n      // Block1\n      //    Block2\n      // Block3\n      //    Block4\n      //        Block5\n      //\n      // Becomes:\n      //\n      // Block1\n      //    Block2Block3\n      // Block4\n      //     Block5\n      BNMergeBlocks:\n        (posBetweenBlocks) =>\n        ({ state, dispatch }) => {\n          const nextNodeIsBlock =\n            state.doc.resolve(posBetweenBlocks + 1).node().type.name ===\n            \"blockContainer\";\n          const prevNodeIsBlock =\n            state.doc.resolve(posBetweenBlocks - 1).node().type.name ===\n            \"blockContainer\";\n\n          if (!nextNodeIsBlock || !prevNodeIsBlock) {\n            return false;\n          }\n\n          const nextBlockInfo = getBlockInfoFromPos(\n            state.doc,\n            posBetweenBlocks + 1\n          );\n\n          const { node, contentNode, startPos, endPos, depth } = nextBlockInfo!;\n\n          // Removes a level of nesting all children of the next block by 1 level, if it contains both content and block\n          // group nodes.\n          if (node.childCount === 2) {\n            const childBlocksStart = state.doc.resolve(\n              startPos + contentNode.nodeSize + 1\n            );\n            const childBlocksEnd = state.doc.resolve(endPos - 1);\n            const childBlocksRange =\n              childBlocksStart.blockRange(childBlocksEnd);\n\n            // Moves the block group node inside the block into the block group node that the current block is in.\n            if (dispatch) {\n              state.tr.lift(childBlocksRange!, depth - 1);\n            }\n          }\n\n          let prevBlockEndPos = posBetweenBlocks - 1;\n          let prevBlockInfo = getBlockInfoFromPos(state.doc, prevBlockEndPos);\n\n          // Finds the nearest previous block, regardless of nesting level.\n          while (prevBlockInfo!.numChildBlocks > 0) {\n            prevBlockEndPos--;\n            prevBlockInfo = getBlockInfoFromPos(state.doc, prevBlockEndPos);\n            if (prevBlockInfo === undefined) {\n              return false;\n            }\n          }\n\n          // Deletes next block and adds its text content to the nearest previous block.\n\n          if (dispatch) {\n            dispatch(\n              state.tr\n                .deleteRange(startPos, startPos + contentNode.nodeSize)\n                .replace(\n                  prevBlockEndPos - 1,\n                  startPos,\n                  new Slice(contentNode.content, 0, 0)\n                )\n                .scrollIntoView()\n            );\n\n            state.tr.setSelection(\n              new TextSelection(state.doc.resolve(prevBlockEndPos - 1))\n            );\n          }\n\n          return true;\n        },\n      // Splits a block at a given position. Content after the position is moved to a new block below, at the same\n      // nesting level.\n      BNSplitBlock:\n        (posInBlock, keepType) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { contentNode, contentType, startPos, endPos, depth } =\n            blockInfo;\n\n          const originalBlockContent = state.doc.cut(startPos + 1, posInBlock);\n          const newBlockContent = state.doc.cut(posInBlock, endPos - 1);\n\n          const newBlock =\n            state.schema.nodes[\"blockContainer\"].createAndFill()!;\n\n          const newBlockInsertionPos = endPos + 1;\n          const newBlockContentPos = newBlockInsertionPos + 2;\n\n          if (dispatch) {\n            // Creates a new block. Since the schema requires it to have a content node, a paragraph node is created\n            // automatically, spanning newBlockContentPos to newBlockContentPos + 1.\n            state.tr.insert(newBlockInsertionPos, newBlock);\n\n            // Replaces the content of the newly created block's content node. Doesn't replace the whole content node so\n            // its type doesn't change.\n            state.tr.replace(\n              newBlockContentPos,\n              newBlockContentPos + 1,\n              newBlockContent.content.size > 0\n                ? new Slice(\n                    Fragment.from(newBlockContent),\n                    depth + 2,\n                    depth + 2\n                  )\n                : undefined\n            );\n\n            // Changes the type of the content node. The range doesn't matter as long as both from and to positions are\n            // within the content node.\n            if (keepType) {\n              state.tr.setBlockType(\n                newBlockContentPos,\n                newBlockContentPos,\n                state.schema.node(contentType).type,\n                contentNode.attrs\n              );\n            }\n\n            // Sets the selection to the start of the new block's content node.\n            state.tr.setSelection(\n              new TextSelection(state.doc.resolve(newBlockContentPos))\n            );\n\n            // Replaces the content of the original block's content node. Doesn't replace the whole content node so its\n            // type doesn't change.\n            state.tr.replace(\n              startPos + 1,\n              endPos - 1,\n              originalBlockContent.content.size > 0\n                ? new Slice(\n                    Fragment.from(originalBlockContent),\n                    depth + 2,\n                    depth + 2\n                  )\n                : undefined\n            );\n          }\n\n          return true;\n        },\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [PreviousBlockTypePlugin()];\n  },\n\n  addKeyboardShortcuts() {\n    // handleBackspace is partially adapted from https://github.com/ueberdosis/tiptap/blob/ed56337470efb4fd277128ab7ef792b37cfae992/packages/core/src/extensions/keymap.ts\n    const handleBackspace = () =>\n      this.editor.commands.first(({ commands }) => [\n        // Deletes the selection if it's not empty.\n        () => commands.deleteSelection(),\n        // Undoes an input rule if one was triggered in the last editor state change.\n        () => commands.undoInputRule(),\n        // Reverts block content type to a paragraph if the selection is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { contentType } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const isParagraph = contentType.name === \"paragraph\";\n\n            if (selectionAtBlockStart && !isParagraph) {\n              return commands.BNUpdateBlock(state.selection.from, {\n                type: \"paragraph\",\n                props: {},\n              });\n            }\n\n            return false;\n          }),\n        // Removes a level of nesting if the block is indented if the selection is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n\n            if (selectionAtBlockStart) {\n              return commands.liftListItem(\"blockContainer\");\n            }\n\n            return false;\n          }),\n        // Merges block with the previous one if it isn't indented, isn't the first block in the doc, and the selection\n        // is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { depth, startPos } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockAtDocStart = startPos === 2;\n\n            const posBetweenBlocks = startPos - 1;\n\n            if (\n              !blockAtDocStart &&\n              selectionAtBlockStart &&\n              selectionEmpty &&\n              depth === 2\n            ) {\n              return commands.BNMergeBlocks(posBetweenBlocks);\n            }\n\n            return false;\n          }),\n      ]);\n\n    const handleEnter = () =>\n      this.editor.commands.first(({ commands }) => [\n        // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start\n        // of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { node, depth } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockEmpty = node.textContent.length === 0;\n            const blockIndented = depth > 2;\n\n            if (\n              selectionAtBlockStart &&\n              selectionEmpty &&\n              blockEmpty &&\n              blockIndented\n            ) {\n              return commands.liftListItem(\"blockContainer\");\n            }\n\n            return false;\n          }),\n        // Creates a new block and moves the selection to it if the current one is empty, while the selection is also\n        // empty & at the start of the block.\n        () =>\n          commands.command(({ state, chain }) => {\n            const { node, endPos } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockEmpty = node.textContent.length === 0;\n\n            if (selectionAtBlockStart && selectionEmpty && blockEmpty) {\n              const newBlockInsertionPos = endPos + 1;\n              const newBlockContentPos = newBlockInsertionPos + 2;\n\n              chain()\n                .BNCreateBlock(newBlockInsertionPos)\n                .setTextSelection(newBlockContentPos)\n                .run();\n\n              return true;\n            }\n\n            return false;\n          }),\n        // Splits the current block, moving content inside that's after the cursor to a new text block below. Also\n        // deletes the selection beforehand, if it's not empty.\n        () =>\n          commands.command(({ state, chain }) => {\n            const { node } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const blockEmpty = node.textContent.length === 0;\n\n            if (!blockEmpty) {\n              chain()\n                .deleteSelection()\n                .BNSplitBlock(state.selection.from, false)\n                .run();\n\n              return true;\n            }\n\n            return false;\n          }),\n      ]);\n\n    return {\n      Backspace: handleBackspace,\n      Enter: handleEnter,\n      // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the\n      // editor since the browser will try to use tab for keyboard navigation.\n      Tab: () => {\n        this.editor.commands.sinkListItem(\"blockContainer\");\n        return true;\n      },\n      \"Shift-Tab\": () => {\n        this.editor.commands.liftListItem(\"blockContainer\");\n        return true;\n      },\n      \"Mod-Alt-0\": () =>\n        this.editor.commands.BNCreateBlock(\n          this.editor.state.selection.anchor + 2\n        ),\n      \"Mod-Alt-1\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"1\",\n          },\n        }),\n      \"Mod-Alt-2\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"2\",\n          },\n        }),\n      \"Mod-Alt-3\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"3\",\n          },\n        }),\n      \"Mod-Shift-7\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"bulletListItem\",\n          props: {},\n        }),\n      \"Mod-Shift-8\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"numberedListItem\",\n          props: {},\n        }),\n    };\n  },\n});\n","import { mergeAttributes, Node } from \"@tiptap/core\";\nimport styles from \"./Block.module.css\";\n\nexport const BlockGroup = Node.create({\n  name: \"blockGroup\",\n  group: \"blockGroup\",\n  content: \"blockContainer+\",\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.getAttribute(\"data-node-type\") === \"blockGroup\") {\n            // Null means the element matches, but we don't want to add any attributes to the node.\n            return null;\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes, {\n        class: styles.blockGroup,\n        \"data-node-type\": \"blockGroup\",\n      }),\n      0,\n    ];\n  },\n});\n","import { Node } from \"@tiptap/core\";\nimport { BlockContainer } from \"./nodes/BlockContainer\";\nimport { BlockGroup } from \"./nodes/BlockGroup\";\n\nexport const blocks: any[] = [\n  BlockContainer,\n  BlockGroup,\n  Node.create({\n    name: \"doc\",\n    topNode: true,\n    content: \"blockGroup\",\n  }),\n];\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\nimport { DOMSerializer, Schema } from \"prosemirror-model\";\n\nconst customBlockSerializer = (schema: Schema) => {\n  const defaultSerializer = DOMSerializer.fromSchema(schema);\n\n  return new DOMSerializer(\n    {\n      ...defaultSerializer.nodes,\n      // TODO: If a serializer is defined in the config for a custom block, it\n      //  should be added here. We still need to figure out how the serializer\n      //  should be defined in the custom blocks API though, and implement that,\n      //  before we can do this.\n    },\n    defaultSerializer.marks\n  );\n};\nexport const CustomBlockSerializerExtension = Extension.create({\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        props: {\n          clipboardSerializer: customBlockSerializer(this.editor.schema),\n        },\n      }),\n    ];\n  },\n});","import { findParentNode } from \"@tiptap/core\";\n\nexport const findBlock = findParentNode(\n  (node) => node.type.name === \"blockContainer\"\n);\n","import { Editor, Range } from \"@tiptap/core\";\nimport { EditorState, Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet, EditorView } from \"prosemirror-view\";\nimport { findBlock } from \"../../../extensions/Blocks/helpers/findBlock\";\nimport {\n  SuggestionsMenu,\n  SuggestionsMenuDynamicParams,\n  SuggestionsMenuFactory,\n  SuggestionsMenuStaticParams,\n} from \"./SuggestionsMenuFactoryTypes\";\nimport { SuggestionItem } from \"./SuggestionItem\";\nimport { BlockNoteEditor } from \"../../../BlockNoteEditor\";\nimport { BlockSchema } from \"../../../extensions/Blocks/api/blockTypes\";\n\nexport type SuggestionPluginOptions<\n  T extends SuggestionItem,\n  BSchema extends BlockSchema\n> = {\n  /**\n   * The name of the plugin.\n   *\n   * Used for ensuring that the plugin key is unique when more than one instance of the SuggestionPlugin is used.\n   */\n  pluginKey: PluginKey;\n\n  /**\n   * The BlockNote editor.\n   */\n  editor: BlockNoteEditor<BSchema>;\n\n  /**\n   * The character that should trigger the suggestion menu to pop up (e.g. a '/' for commands), when typed by the user.\n   */\n  defaultTriggerCharacter: string;\n\n  suggestionsMenuFactory: SuggestionsMenuFactory<T>;\n\n  /**\n   * The callback that gets executed when an item is selected by the user.\n   *\n   * **NOTE:** The command text is not removed automatically from the editor by this plugin,\n   * this should be done manually. The `editor` and `range` properties passed\n   * to the callback function might come in handy when doing this.\n   */\n  onSelectItem?: (props: { item: T; editor: BlockNoteEditor<BSchema> }) => void;\n\n  /**\n   * A function that should supply the plugin with items to suggest, based on a certain query string.\n   */\n  items?: (query: string) => T[];\n\n  allow?: (props: { editor: Editor; range: Range }) => boolean;\n};\n\ntype SuggestionPluginState<T extends SuggestionItem> = {\n  // True when the menu is shown, false when hidden.\n  active: boolean;\n  // The character that triggered the menu being shown. Allowing the trigger to be different to the default\n  // trigger allows other extensions to open it programmatically.\n  triggerCharacter: string | undefined;\n  // The editor position just after the trigger character, i.e. where the user query begins. Used to figure out\n  // which menu items to show and can also be used to delete the trigger character.\n  queryStartPos: number | undefined;\n  // The items that should be shown in the menu.\n  items: T[];\n  // The index of the item in the menu that's currently hovered using the keyboard.\n  keyboardHoveredItemIndex: number | undefined;\n  // The number of characters typed after the last query that matched with at least 1 item. Used to close the\n  // menu if the user keeps entering queries that don't return any results.\n  notFoundCount: number | undefined;\n  decorationId: string | undefined;\n};\n\nfunction getDefaultPluginState<\n  T extends SuggestionItem\n>(): SuggestionPluginState<T> {\n  return {\n    active: false,\n    triggerCharacter: undefined,\n    queryStartPos: undefined,\n    items: [] as T[],\n    keyboardHoveredItemIndex: undefined,\n    notFoundCount: 0,\n    decorationId: undefined,\n  };\n}\n\ntype SuggestionPluginViewOptions<\n  T extends SuggestionItem,\n  BSchema extends BlockSchema\n> = {\n  editor: BlockNoteEditor<BSchema>;\n  pluginKey: PluginKey;\n  onSelectItem: (props: { item: T; editor: BlockNoteEditor<BSchema> }) => void;\n  suggestionsMenuFactory: SuggestionsMenuFactory<T>;\n};\n\nclass SuggestionPluginView<\n  T extends SuggestionItem,\n  BSchema extends BlockSchema\n> {\n  editor: BlockNoteEditor<BSchema>;\n  pluginKey: PluginKey;\n\n  suggestionsMenu: SuggestionsMenu<T>;\n\n  pluginState: SuggestionPluginState<T>;\n  itemCallback: (item: T) => void;\n\n  private lastPosition: DOMRect | undefined;\n\n  constructor({\n    editor,\n    pluginKey,\n    onSelectItem: selectItemCallback = () => {},\n    suggestionsMenuFactory,\n  }: SuggestionPluginViewOptions<T, BSchema>) {\n    this.editor = editor;\n    this.pluginKey = pluginKey;\n\n    this.pluginState = getDefaultPluginState<T>();\n\n    this.itemCallback = (item: T) => {\n      editor._tiptapEditor\n        .chain()\n        .focus()\n        .deleteRange({\n          from:\n            this.pluginState.queryStartPos! -\n            this.pluginState.triggerCharacter!.length,\n          to: editor._tiptapEditor.state.selection.from,\n        })\n        .run();\n\n      selectItemCallback({\n        item: item,\n        editor: editor,\n      });\n    };\n\n    this.suggestionsMenu = suggestionsMenuFactory(this.getStaticParams());\n  }\n\n  update(view: EditorView, prevState: EditorState) {\n    const prev = this.pluginKey.getState(prevState);\n    const next = this.pluginKey.getState(view.state);\n\n    // See how the state changed\n    const started = !prev.active && next.active;\n    const stopped = prev.active && !next.active;\n    // TODO: Currently also true for cases in which an update isn't needed so selected list item index updates still\n    //  cause the view to update. May need to be more strict.\n    const changed = prev.active && next.active;\n\n    // Cancel when suggestion isn't active\n    if (!started && !changed && !stopped) {\n      return;\n    }\n\n    this.pluginState = stopped ? prev : next;\n\n    if (stopped || !this.editor.isEditable) {\n      this.suggestionsMenu.hide();\n\n      // Listener stops focus moving to the menu on click.\n      this.suggestionsMenu.element!.removeEventListener(\"mousedown\", (event) =>\n        event.preventDefault()\n      );\n    }\n\n    if (changed) {\n      this.suggestionsMenu.render(this.getDynamicParams(), false);\n    }\n\n    if (started && this.editor.isEditable) {\n      this.suggestionsMenu.render(this.getDynamicParams(), true);\n\n      // Listener stops focus moving to the menu on click.\n      this.suggestionsMenu.element!.addEventListener(\"mousedown\", (event) =>\n        event.preventDefault()\n      );\n    }\n  }\n\n  getStaticParams(): SuggestionsMenuStaticParams<T> {\n    return {\n      itemCallback: (item: T) => this.itemCallback(item),\n      getReferenceRect: () => {\n        const decorationNode = document.querySelector(\n          `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n        );\n\n        if (!decorationNode) {\n          if (this.lastPosition === undefined) {\n            throw new Error(\n              \"Attempted to access trigger character reference rect before rendering suggestions menu.\"\n            );\n          }\n\n          return this.lastPosition;\n        }\n\n        const triggerCharacterBoundingBox =\n          decorationNode.getBoundingClientRect();\n        this.lastPosition = triggerCharacterBoundingBox;\n\n        return triggerCharacterBoundingBox;\n      },\n    };\n  }\n\n  getDynamicParams(): SuggestionsMenuDynamicParams<T> {\n    return {\n      items: this.pluginState.items,\n      keyboardHoveredItemIndex: this.pluginState.keyboardHoveredItemIndex!,\n    };\n  }\n}\n\n/**\n * A ProseMirror plugin for suggestions, designed to make '/'-commands possible as well as mentions.\n *\n * This is basically a simplified version of TipTap's [Suggestions](https://github.com/ueberdosis/tiptap/tree/db92a9b313c5993b723c85cd30256f1d4a0b65e1/packages/suggestion) plugin.\n *\n * This version is adapted from the aforementioned version in the following ways:\n * - This version supports generic items instead of only strings (to allow for more advanced filtering for example)\n * - This version hides some unnecessary complexity from the user of the plugin.\n * - This version handles key events differently\n *\n * @param options options for configuring the plugin\n * @returns the prosemirror plugin\n */\nexport function createSuggestionPlugin<\n  T extends SuggestionItem,\n  BSchema extends BlockSchema\n>({\n  pluginKey,\n  editor,\n  defaultTriggerCharacter,\n  suggestionsMenuFactory,\n  onSelectItem: selectItemCallback = () => {},\n  items = () => [],\n}: SuggestionPluginOptions<T, BSchema>) {\n  // Assertions\n  if (defaultTriggerCharacter.length !== 1) {\n    throw new Error(\"'char' should be a single character\");\n  }\n\n  const deactivate = (view: EditorView) => {\n    view.dispatch(view.state.tr.setMeta(pluginKey, { deactivate: true }));\n  };\n\n  // Plugin key is passed in as a parameter, so it can be exported and used in the DraggableBlocksPlugin.\n  return new Plugin({\n    key: pluginKey,\n\n    view: (view: EditorView) =>\n      new SuggestionPluginView<T, BSchema>({\n        editor: editor,\n        pluginKey: pluginKey,\n        onSelectItem: (props: {\n          item: T;\n          editor: BlockNoteEditor<BSchema>;\n        }) => {\n          deactivate(view);\n          selectItemCallback(props);\n        },\n        suggestionsMenuFactory: suggestionsMenuFactory,\n      }),\n\n    state: {\n      // Initialize the plugin's internal state.\n      init(): SuggestionPluginState<T> {\n        return getDefaultPluginState<T>();\n      },\n\n      // Apply changes to the plugin state from an editor transaction.\n      apply(transaction, prev, oldState, newState): SuggestionPluginState<T> {\n        // TODO: More clearly define which transactions should be ignored.\n        if (transaction.getMeta(\"orderedListIndexing\") !== undefined) {\n          return prev;\n        }\n\n        // Checks if the menu should be shown.\n        if (transaction.getMeta(pluginKey)?.activate) {\n          return {\n            active: true,\n            triggerCharacter:\n              transaction.getMeta(pluginKey)?.triggerCharacter || \"\",\n            queryStartPos: newState.selection.from,\n            items: items(\"\"),\n            keyboardHoveredItemIndex: 0,\n            // TODO: Maybe should be 1 if the menu has no possible items? Probably redundant since a menu with no items\n            //  is useless in practice.\n            notFoundCount: 0,\n            decorationId: `id_${Math.floor(Math.random() * 0xffffffff)}`,\n          };\n        }\n\n        // Checks if the menu is hidden, in which case it doesn't need to be hidden or updated.\n        if (!prev.active) {\n          return prev;\n        }\n\n        const next = { ...prev };\n\n        // Updates which menu items to show by checking which items the current query (the text between the trigger\n        // character and caret) matches with.\n        next.items = items(\n          newState.doc.textBetween(prev.queryStartPos!, newState.selection.from)\n        );\n\n        // Updates notFoundCount if the query doesn't match any items.\n        next.notFoundCount = 0;\n        if (next.items.length === 0) {\n          // Checks how many characters were typed or deleted since the last transaction, and updates the notFoundCount\n          // accordingly. Also ensures the notFoundCount does not become negative.\n          next.notFoundCount = Math.max(\n            0,\n            prev.notFoundCount! +\n              (newState.selection.from - oldState.selection.from)\n          );\n        }\n\n        // Hides the menu. This is done after items and notFoundCount are already updated as notFoundCount is needed to\n        // check if the menu should be hidden.\n        if (\n          // Highlighting text should hide the menu.\n          newState.selection.from !== newState.selection.to ||\n          // Transactions with plugin metadata {deactivate: true} should hide the menu.\n          transaction.getMeta(pluginKey)?.deactivate ||\n          // Certain mouse events should hide the menu.\n          // TODO: Change to global mousedown listener.\n          transaction.getMeta(\"focus\") ||\n          transaction.getMeta(\"blur\") ||\n          transaction.getMeta(\"pointer\") ||\n          // Moving the caret before the character which triggered the menu should hide it.\n          (prev.active && newState.selection.from < prev.queryStartPos!) ||\n          // Entering more than 3 characters, after the last query that matched with at least 1 menu item, should hide\n          // the menu.\n          next.notFoundCount > 3\n        ) {\n          return getDefaultPluginState<T>();\n        }\n\n        // Updates keyboardHoveredItemIndex if necessary.\n        if (\n          transaction.getMeta(pluginKey)?.selectedItemIndexChanged !== undefined\n        ) {\n          let newIndex =\n            transaction.getMeta(pluginKey).selectedItemIndexChanged;\n\n          // Allows selection to jump between first and last items.\n          if (newIndex < 0) {\n            newIndex = prev.items.length - 1;\n          } else if (newIndex >= prev.items.length) {\n            newIndex = 0;\n          }\n\n          next.keyboardHoveredItemIndex = newIndex;\n        }\n\n        return next;\n      },\n    },\n\n    props: {\n      handleKeyDown(view, event) {\n        const menuIsActive = (this as Plugin).getState(view.state).active;\n\n        // Shows the menu if the default trigger character was pressed and the menu isn't active.\n        if (event.key === defaultTriggerCharacter && !menuIsActive) {\n          view.dispatch(\n            view.state.tr\n              .insertText(defaultTriggerCharacter)\n              .scrollIntoView()\n              .setMeta(pluginKey, {\n                activate: true,\n                triggerCharacter: defaultTriggerCharacter,\n              })\n          );\n\n          return true;\n        }\n\n        // Doesn't handle other keystrokes if the menu isn't active.\n        if (!menuIsActive) {\n          return false;\n        }\n\n        // Handles keystrokes for navigating the menu.\n        const {\n          triggerCharacter,\n          queryStartPos,\n          items,\n          keyboardHoveredItemIndex,\n        } = pluginKey.getState(view.state);\n\n        // Moves the keyboard selection to the previous item.\n        if (event.key === \"ArrowUp\") {\n          view.dispatch(\n            view.state.tr.setMeta(pluginKey, {\n              selectedItemIndexChanged: keyboardHoveredItemIndex - 1,\n            })\n          );\n          return true;\n        }\n\n        // Moves the keyboard selection to the next item.\n        if (event.key === \"ArrowDown\") {\n          view.dispatch(\n            view.state.tr.setMeta(pluginKey, {\n              selectedItemIndexChanged: keyboardHoveredItemIndex + 1,\n            })\n          );\n          return true;\n        }\n\n        // Selects an item and closes the menu.\n        if (event.key === \"Enter\") {\n          deactivate(view);\n          editor._tiptapEditor\n            .chain()\n            .focus()\n            .deleteRange({\n              from: queryStartPos! - triggerCharacter!.length,\n              to: editor._tiptapEditor.state.selection.from,\n            })\n            .run();\n\n          selectItemCallback({\n            item: items[keyboardHoveredItemIndex],\n            editor: editor,\n          });\n\n          return true;\n        }\n\n        // Closes the menu.\n        if (event.key === \"Escape\") {\n          deactivate(view);\n          return true;\n        }\n\n        return false;\n      },\n\n      // Hides menu in cases where mouse click does not cause an editor state change.\n      handleClick(view) {\n        deactivate(view);\n      },\n\n      // Setup decorator on the currently active suggestion.\n      decorations(state) {\n        const { active, decorationId, queryStartPos, triggerCharacter } = (\n          this as Plugin\n        ).getState(state);\n\n        if (!active) {\n          return null;\n        }\n\n        // If the menu was opened programmatically by another extension, it may not use a trigger character. In this\n        // case, the decoration is set on the whole block instead, as the decoration range would otherwise be empty.\n        if (triggerCharacter === \"\") {\n          const blockNode = findBlock(state.selection);\n          if (blockNode) {\n            return DecorationSet.create(state.doc, [\n              Decoration.node(\n                blockNode.pos,\n                blockNode.pos + blockNode.node.nodeSize,\n                {\n                  nodeName: \"span\",\n                  class: \"suggestion-decorator\",\n                  \"data-decoration-id\": decorationId,\n                }\n              ),\n            ]);\n          }\n        }\n        // Creates an inline decoration around the trigger character.\n        return DecorationSet.create(state.doc, [\n          Decoration.inline(\n            queryStartPos - triggerCharacter.length,\n            queryStartPos,\n            {\n              nodeName: \"span\",\n              class: \"suggestion-decorator\",\n              \"data-decoration-id\": decorationId,\n            }\n          ),\n        ]);\n      },\n    },\n  });\n}\n","import { Extension } from \"@tiptap/core\";\nimport { PluginKey } from \"prosemirror-state\";\nimport { createSuggestionPlugin } from \"../../shared/plugins/suggestion/SuggestionPlugin\";\nimport { SuggestionsMenuFactory } from \"../../shared/plugins/suggestion/SuggestionsMenuFactoryTypes\";\nimport { BaseSlashMenuItem } from \"./BaseSlashMenuItem\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport { BlockSchema } from \"../Blocks/api/blockTypes\";\n\nexport type SlashMenuOptions<BSchema extends BlockSchema> = {\n  editor: BlockNoteEditor<BSchema> | undefined;\n  commands: BaseSlashMenuItem<BSchema>[] | undefined;\n  slashMenuFactory: SuggestionsMenuFactory<any> | undefined;\n};\n\nexport const SlashMenuPluginKey = new PluginKey(\"suggestions-slash-commands\");\n\nexport const createSlashMenuExtension = <BSchema extends BlockSchema>() =>\n  Extension.create<SlashMenuOptions<BSchema>>({\n    name: \"slash-command\",\n\n    addOptions() {\n      return {\n        editor: undefined,\n        commands: undefined,\n        slashMenuFactory: undefined,\n      };\n    },\n\n    addProseMirrorPlugins() {\n      if (!this.options.slashMenuFactory || !this.options.commands) {\n        throw new Error(\"required args not defined for SlashMenuExtension\");\n      }\n\n      const commands = this.options.commands;\n\n      return [\n        createSuggestionPlugin<BaseSlashMenuItem<BSchema>, BSchema>({\n          pluginKey: SlashMenuPluginKey,\n          editor: this.options.editor!,\n          defaultTriggerCharacter: \"/\",\n          suggestionsMenuFactory: this.options.slashMenuFactory!,\n          items: (query) => {\n            return commands.filter((cmd: BaseSlashMenuItem<BSchema>) =>\n              cmd.match(query)\n            );\n          },\n          onSelectItem: ({ item, editor }) => {\n            item.execute(editor);\n          },\n        }),\n      ];\n    },\n  });\n","import { Selection } from \"prosemirror-state\";\nimport { Fragment, Node, ResolvedPos, Slice } from \"prosemirror-model\";\nimport { Mappable } from \"prosemirror-transform\";\n\n/**\n * This class represents an editor selection which spans multiple nodes/blocks. It's currently only used to allow users\n * to drag multiple blocks at the same time. Expects the selection anchor and head to be between nodes, i.e. just before\n * the first target node and just after the last, and that anchor and head are at the same nesting level.\n *\n * Partially based on ProseMirror's NodeSelection implementation:\n * (https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.ts)\n * MultipleNodeSelection differs from NodeSelection in the following ways:\n * 1. Stores which nodes are included in the selection instead of just a single node.\n * 2. Already expects the selection to start just before the first target node and ends just after the last, while a\n * NodeSelection automatically sets both anchor and head to just before the single target node.\n */\nexport class MultipleNodeSelection extends Selection {\n  nodes: Array<Node>;\n\n  constructor($anchor: ResolvedPos, $head: ResolvedPos) {\n    super($anchor, $head);\n\n    // Parent is at the same nesting level as anchor/head since they are just before/ just after target nodes.\n    const parentNode = $anchor.node();\n\n    this.nodes = [];\n    $anchor.doc.nodesBetween($anchor.pos, $head.pos, (node, _pos, parent) => {\n      if (parent !== null && parent.eq(parentNode)) {\n        this.nodes.push(node);\n        return false;\n      }\n      return;\n    });\n  }\n\n  static create(doc: Node, from: number, to = from): MultipleNodeSelection {\n    return new MultipleNodeSelection(doc.resolve(from), doc.resolve(to));\n  }\n\n  content(): Slice {\n    return new Slice(Fragment.from(this.nodes), 0, 0);\n  }\n\n  eq(selection: Selection): boolean {\n    if (!(selection instanceof MultipleNodeSelection)) {\n      return false;\n    }\n\n    if (this.nodes.length !== selection.nodes.length) {\n      return false;\n    }\n\n    if (this.from !== selection.from || this.to !== selection.to) {\n      return false;\n    }\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      if (!this.nodes[i].eq(selection.nodes[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  map(doc: Node, mapping: Mappable): Selection {\n    let fromResult = mapping.mapResult(this.from);\n    let toResult = mapping.mapResult(this.to);\n\n    if (toResult.deleted) {\n      return Selection.near(doc.resolve(fromResult.pos));\n    }\n\n    if (fromResult.deleted) {\n      return Selection.near(doc.resolve(toResult.pos));\n    }\n\n    return new MultipleNodeSelection(\n      doc.resolve(fromResult.pos),\n      doc.resolve(toResult.pos)\n    );\n  }\n\n  toJSON(): any {\n    return { type: \"node\", anchor: this.anchor, head: this.head };\n  }\n}\n","import { Editor } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\nimport { NodeSelection, Plugin, PluginKey, Selection } from \"prosemirror-state\";\nimport * as pv from \"prosemirror-view\";\nimport { EditorView } from \"prosemirror-view\";\nimport styles from \"../../editor.module.css\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\nimport { SlashMenuPluginKey } from \"../SlashMenu/SlashMenuExtension\";\nimport {\n  BlockSideMenu,\n  BlockSideMenuDynamicParams,\n  BlockSideMenuFactory,\n  BlockSideMenuStaticParams,\n} from \"./BlockSideMenuFactoryTypes\";\nimport { DraggableBlocksOptions } from \"./DraggableBlocksExtension\";\nimport { MultipleNodeSelection } from \"./MultipleNodeSelection\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport { BlockSchema } from \"../Blocks/api/blockTypes\";\n\nconst serializeForClipboard = (pv as any).__serializeForClipboard;\n// code based on https://github.com/ueberdosis/tiptap/issues/323#issuecomment-506637799\n\nlet dragImageElement: Element | undefined;\n\nfunction getDraggableBlockFromCoords(\n  coords: { left: number; top: number },\n  view: EditorView\n) {\n  if (!view.dom.isConnected) {\n    // view is not connected to the DOM, this can cause posAtCoords to fail\n    // (Cannot read properties of null (reading 'nearestDesc'), https://github.com/TypeCellOS/BlockNote/issues/123)\n    return undefined;\n  }\n\n  let pos = view.posAtCoords(coords);\n  if (!pos) {\n    return undefined;\n  }\n  let node = view.domAtPos(pos.pos).node as HTMLElement;\n\n  if (node === view.dom) {\n    // mouse over root\n    return undefined;\n  }\n\n  while (\n    node &&\n    node.parentNode &&\n    node.parentNode !== view.dom &&\n    !node.hasAttribute?.(\"data-id\")\n  ) {\n    node = node.parentNode as HTMLElement;\n  }\n  if (!node) {\n    return undefined;\n  }\n  return { node, id: node.getAttribute(\"data-id\")! };\n}\n\nfunction blockPositionFromCoords(\n  coords: { left: number; top: number },\n  view: EditorView\n) {\n  let block = getDraggableBlockFromCoords(coords, view);\n\n  if (block && block.node.nodeType === 1) {\n    // TODO: this uses undocumented PM APIs? do we need this / let's add docs?\n    const docView = (view as any).docView;\n    let desc = docView.nearestDesc(block.node, true);\n    if (!desc || desc === docView) {\n      return null;\n    }\n    return desc.posBefore;\n  }\n  return null;\n}\n\nfunction blockPositionsFromSelection(selection: Selection, doc: Node) {\n  // Absolute positions just before the first block spanned by the selection, and just after the last block. Having the\n  // selection start and end just before and just after the target blocks ensures no whitespace/line breaks are left\n  // behind after dragging & dropping them.\n  let beforeFirstBlockPos: number;\n  let afterLastBlockPos: number;\n\n  // Even the user starts dragging blocks but drops them in the same place, the selection will still be moved just\n  // before & just after the blocks spanned by the selection, and therefore doesn't need to change if they try to drag\n  // the same blocks again. If this happens, the anchor & head move out of the block content node they were originally\n  // in. If the anchor should update but the head shouldn't and vice versa, it means the user selection is outside a\n  // block content node, which should never happen.\n  const selectionStartInBlockContent =\n    doc.resolve(selection.from).node().type.spec.group === \"blockContent\";\n  const selectionEndInBlockContent =\n    doc.resolve(selection.to).node().type.spec.group === \"blockContent\";\n\n  // Ensures that entire outermost nodes are selected if the selection spans multiple nesting levels.\n  const minDepth = Math.min(selection.$anchor.depth, selection.$head.depth);\n\n  if (selectionStartInBlockContent && selectionEndInBlockContent) {\n    // Absolute positions at the start of the first block in the selection and at the end of the last block. User\n    // selections will always start and end in block content nodes, but we want the start and end positions of their\n    // parent block nodes, which is why minDepth - 1 is used.\n    const startFirstBlockPos = selection.$from.start(minDepth - 1);\n    const endLastBlockPos = selection.$to.end(minDepth - 1);\n\n    // Shifting start and end positions by one moves them just outside the first and last selected blocks.\n    beforeFirstBlockPos = doc.resolve(startFirstBlockPos - 1).pos;\n    afterLastBlockPos = doc.resolve(endLastBlockPos + 1).pos;\n  } else {\n    beforeFirstBlockPos = selection.from;\n    afterLastBlockPos = selection.to;\n  }\n\n  return { from: beforeFirstBlockPos, to: afterLastBlockPos };\n}\n\nfunction setDragImage(view: EditorView, from: number, to = from) {\n  if (from === to) {\n    // Moves to position to be just after the first (and only) selected block.\n    to += view.state.doc.resolve(from + 1).node().nodeSize;\n  }\n\n  // Parent element is cloned to remove all unselected children without affecting the editor content.\n  const parentClone = view.domAtPos(from).node.cloneNode(true) as Element;\n  const parent = view.domAtPos(from).node as Element;\n\n  const getElementIndex = (parentElement: Element, targetElement: Element) =>\n    Array.prototype.indexOf.call(parentElement.children, targetElement);\n\n  const firstSelectedBlockIndex = getElementIndex(\n    parent,\n    // Expects from position to be just before the first selected block.\n    view.domAtPos(from + 1).node.parentElement!\n  );\n  const lastSelectedBlockIndex = getElementIndex(\n    parent,\n    // Expects to position to be just after the last selected block.\n    view.domAtPos(to - 1).node.parentElement!\n  );\n\n  for (let i = parent.childElementCount - 1; i >= 0; i--) {\n    if (i > lastSelectedBlockIndex || i < firstSelectedBlockIndex) {\n      parentClone.removeChild(parentClone.children[i]);\n    }\n  }\n\n  // dataTransfer.setDragImage(element) only works if element is attached to the DOM.\n  unsetDragImage();\n  dragImageElement = parentClone;\n\n  // TODO: This is hacky, need a better way of assigning classes to the editor so that they can also be applied to the\n  //  drag preview.\n  const classes = view.dom.className.split(\" \");\n  const inheritedClasses = classes\n    .filter(\n      (className) =>\n        !className.includes(\"bn\") &&\n        !className.includes(\"ProseMirror\") &&\n        !className.includes(\"editor\")\n    )\n    .join(\" \");\n\n  dragImageElement.className =\n    dragImageElement.className +\n    \" \" +\n    styles.dragPreview +\n    \" \" +\n    inheritedClasses;\n\n  document.body.appendChild(dragImageElement);\n}\n\nfunction unsetDragImage() {\n  if (dragImageElement !== undefined) {\n    document.body.removeChild(dragImageElement);\n    dragImageElement = undefined;\n  }\n}\n\nfunction dragStart(e: DragEvent, view: EditorView) {\n  if (!e.dataTransfer) {\n    return;\n  }\n\n  const editorBoundingBox = view.dom.getBoundingClientRect();\n\n  let coords = {\n    left: editorBoundingBox.left + editorBoundingBox.width / 2, // take middle of editor\n    top: e.clientY,\n  };\n\n  let pos = blockPositionFromCoords(coords, view);\n  if (pos != null) {\n    const selection = view.state.selection;\n    const doc = view.state.doc;\n\n    const { from, to } = blockPositionsFromSelection(selection, doc);\n\n    const draggedBlockInSelection = from <= pos && pos < to;\n    const multipleBlocksSelected =\n      selection.$anchor.node() !== selection.$head.node() ||\n      selection instanceof MultipleNodeSelection;\n\n    if (draggedBlockInSelection && multipleBlocksSelected) {\n      view.dispatch(\n        view.state.tr.setSelection(MultipleNodeSelection.create(doc, from, to))\n      );\n      setDragImage(view, from, to);\n    } else {\n      view.dispatch(\n        view.state.tr.setSelection(NodeSelection.create(view.state.doc, pos))\n      );\n      setDragImage(view, pos);\n    }\n\n    let slice = view.state.selection.content();\n    let { dom, text } = serializeForClipboard(view, slice);\n\n    e.dataTransfer.clearData();\n    e.dataTransfer.setData(\"text/html\", dom.innerHTML);\n    e.dataTransfer.setData(\"text/plain\", text);\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setDragImage(dragImageElement!, 0, 0);\n    view.dragging = { slice, move: true };\n  }\n}\n\nexport type BlockMenuViewProps<BSchema extends BlockSchema> = {\n  tiptapEditor: Editor;\n  editor: BlockNoteEditor<BSchema>;\n  blockMenuFactory: BlockSideMenuFactory<BSchema>;\n  horizontalPosAnchoredAtRoot: boolean;\n};\n\nexport class BlockMenuView<BSchema extends BlockSchema> {\n  editor: BlockNoteEditor<BSchema>;\n  private ttEditor: Editor;\n\n  // When true, the drag handle with be anchored at the same level as root elements\n  // When false, the drag handle with be just to the left of the element\n  horizontalPosAnchoredAtRoot: boolean;\n\n  horizontalPosAnchor: number;\n\n  blockMenu: BlockSideMenu<BSchema>;\n\n  hoveredBlock: HTMLElement | undefined;\n\n  // Used to check if currently dragged content comes from this editor instance.\n  isDragging = false;\n  menuOpen = false;\n  menuFrozen = false;\n\n  private lastPosition: DOMRect | undefined;\n\n  constructor({\n    tiptapEditor,\n    editor,\n    blockMenuFactory,\n    horizontalPosAnchoredAtRoot,\n  }: BlockMenuViewProps<BSchema>) {\n    this.editor = editor;\n    this.ttEditor = tiptapEditor;\n    this.horizontalPosAnchoredAtRoot = horizontalPosAnchoredAtRoot;\n    this.horizontalPosAnchor = (\n      this.ttEditor.view.dom.firstChild! as HTMLElement\n    ).getBoundingClientRect().x;\n\n    this.blockMenu = blockMenuFactory(this.getStaticParams());\n\n    document.body.addEventListener(\"drop\", this.onDrop, true);\n    document.body.addEventListener(\"dragover\", this.onDragOver);\n    this.ttEditor.view.dom.addEventListener(\"dragstart\", this.onDragStart);\n\n    // Shows or updates menu position whenever the cursor moves, if the menu isn't frozen.\n    document.body.addEventListener(\"mousemove\", this.onMouseMove, true);\n\n    // Hides and unfreezes the menu whenever the user selects the editor with the mouse or presses a key.\n    // TODO: Better integration with suggestions menu and only editor scope?\n    document.body.addEventListener(\"mousedown\", this.onMouseDown, true);\n    document.body.addEventListener(\"keydown\", this.onKeyDown, true);\n  }\n\n  /**\n   * Sets isDragging when dragging text.\n   */\n  onDragStart = () => {\n    this.isDragging = true;\n  };\n\n  /**\n   * If the event is outside the editor contents,\n   * we dispatch a fake event, so that we can still drop the content\n   * when dragging / dropping to the side of the editor\n   */\n  onDrop = (event: DragEvent) => {\n    if ((event as any).synthetic || !this.isDragging) {\n      return;\n    }\n    let pos = this.ttEditor.view.posAtCoords({\n      left: event.clientX,\n      top: event.clientY,\n    });\n\n    this.isDragging = false;\n\n    if (!pos || pos.inside === -1) {\n      const evt = new Event(\"drop\", event) as any;\n      const editorBoundingBox = (\n        this.ttEditor.view.dom.firstChild! as HTMLElement\n      ).getBoundingClientRect();\n      evt.clientX = editorBoundingBox.left + editorBoundingBox.width / 2;\n      evt.clientY = event.clientY;\n      evt.dataTransfer = event.dataTransfer;\n      evt.preventDefault = () => event.preventDefault();\n      evt.synthetic = true; // prevent recursion\n      // console.log(\"dispatch fake drop\");\n      this.ttEditor.view.dom.dispatchEvent(evt);\n    }\n  };\n\n  /**\n   * If the event is outside the editor contents,\n   * we dispatch a fake event, so that we can still drop the content\n   * when dragging / dropping to the side of the editor\n   */\n  onDragOver = (event: DragEvent) => {\n    if ((event as any).synthetic || !this.isDragging) {\n      return;\n    }\n    let pos = this.ttEditor.view.posAtCoords({\n      left: event.clientX,\n      top: event.clientY,\n    });\n\n    if (!pos || pos.inside === -1) {\n      const evt = new Event(\"dragover\", event) as any;\n      const editorBoundingBox = (\n        this.ttEditor.view.dom.firstChild! as HTMLElement\n      ).getBoundingClientRect();\n      evt.clientX = editorBoundingBox.left + editorBoundingBox.width / 2;\n      evt.clientY = event.clientY;\n      evt.dataTransfer = event.dataTransfer;\n      evt.preventDefault = () => event.preventDefault();\n      evt.synthetic = true; // prevent recursion\n      // console.log(\"dispatch fake dragover\");\n      this.ttEditor.view.dom.dispatchEvent(evt);\n    }\n  };\n\n  onKeyDown = (_event: KeyboardEvent) => {\n    if (this.menuOpen) {\n      this.menuOpen = false;\n      this.blockMenu.hide();\n    }\n\n    this.menuFrozen = false;\n  };\n\n  onMouseDown = (event: MouseEvent) => {\n    if (this.blockMenu.element?.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    if (this.menuOpen) {\n      this.menuOpen = false;\n      this.blockMenu.hide();\n    }\n\n    this.menuFrozen = false;\n  };\n\n  onMouseMove = (event: MouseEvent) => {\n    if (this.menuFrozen) {\n      return;\n    }\n\n    // Editor itself may have padding or other styling which affects\n    // size/position, so we get the boundingRect of the first child (i.e. the\n    // blockGroup that wraps all blocks in the editor) for more accurate side\n    // menu placement.\n    const editorBoundingBox = (\n      this.ttEditor.view.dom.firstChild! as HTMLElement\n    ).getBoundingClientRect();\n    // We want the full area of the editor to check if the cursor is hovering\n    // above it though.\n    const editorOuterBoundingBox =\n      this.ttEditor.view.dom.getBoundingClientRect();\n    const cursorWithinEditor =\n      event.clientX >= editorOuterBoundingBox.left &&\n      event.clientX <= editorOuterBoundingBox.right &&\n      event.clientY >= editorOuterBoundingBox.top &&\n      event.clientY <= editorOuterBoundingBox.bottom;\n\n    // Doesn't update if the mouse hovers an element that's over the editor but\n    // isn't a part of it or the side menu.\n    if (\n      // Cursor is within the editor area\n      cursorWithinEditor &&\n      // An element is hovered\n      event &&\n      event.target &&\n      // Element is outside the editor\n      this.ttEditor.view.dom !== event.target &&\n      !this.ttEditor.view.dom.contains(event.target as HTMLElement) &&\n      // Element is outside the side menu\n      this.blockMenu.element !== event.target &&\n      !this.blockMenu.element?.contains(event.target as HTMLElement)\n    ) {\n      if (this.menuOpen) {\n        this.menuOpen = false;\n        this.blockMenu.hide();\n      }\n\n      return;\n    }\n\n    this.horizontalPosAnchor = editorBoundingBox.x;\n\n    // Gets block at mouse cursor's vertical position.\n    const coords = {\n      left: editorBoundingBox.left + editorBoundingBox.width / 2, // take middle of editor\n      top: event.clientY,\n    };\n    const block = getDraggableBlockFromCoords(coords, this.ttEditor.view);\n\n    // Closes the menu if the mouse cursor is beyond the editor vertically.\n    if (!block || !this.editor.isEditable) {\n      if (this.menuOpen) {\n        this.menuOpen = false;\n        this.blockMenu.hide();\n      }\n\n      return;\n    }\n\n    // Doesn't update if the menu is already open and the mouse cursor is still hovering the same block.\n    if (\n      this.menuOpen &&\n      this.hoveredBlock?.hasAttribute(\"data-id\") &&\n      this.hoveredBlock?.getAttribute(\"data-id\") === block.id\n    ) {\n      return;\n    }\n\n    this.hoveredBlock = block.node;\n\n    // Gets the block's content node, which lets to ignore child blocks when determining the block menu's position.\n    const blockContent = block.node.firstChild as HTMLElement;\n\n    if (!blockContent) {\n      return;\n    }\n\n    // Shows or updates elements.\n    if (this.editor.isEditable) {\n      if (!this.menuOpen) {\n        this.menuOpen = true;\n        this.blockMenu.render(this.getDynamicParams(), true);\n      } else {\n        this.blockMenu.render(this.getDynamicParams(), false);\n      }\n    }\n  };\n\n  destroy() {\n    if (this.menuOpen) {\n      this.menuOpen = false;\n      this.blockMenu.hide();\n    }\n    document.body.removeEventListener(\"mousemove\", this.onMouseMove);\n    document.body.removeEventListener(\"dragover\", this.onDragOver);\n    this.ttEditor.view.dom.removeEventListener(\"dragstart\", this.onDragStart);\n    document.body.removeEventListener(\"drop\", this.onDrop);\n    document.body.removeEventListener(\"mousedown\", this.onMouseDown);\n    document.body.removeEventListener(\"keydown\", this.onKeyDown);\n  }\n\n  addBlock() {\n    this.menuOpen = false;\n    this.menuFrozen = true;\n    this.blockMenu.hide();\n\n    const blockContent = this.hoveredBlock!.firstChild! as HTMLElement;\n    const blockContentBoundingBox = blockContent.getBoundingClientRect();\n\n    const pos = this.ttEditor.view.posAtCoords({\n      left: blockContentBoundingBox.left + blockContentBoundingBox.width / 2,\n      top: blockContentBoundingBox.top + blockContentBoundingBox.height / 2,\n    });\n    if (!pos) {\n      return;\n    }\n\n    const blockInfo = getBlockInfoFromPos(this.ttEditor.state.doc, pos.pos);\n    if (blockInfo === undefined) {\n      return;\n    }\n\n    const { contentNode, endPos } = blockInfo;\n\n    // Creates a new block if current one is not empty for the suggestion menu to open in.\n    if (contentNode.textContent.length !== 0) {\n      const newBlockInsertionPos = endPos + 1;\n      const newBlockContentPos = newBlockInsertionPos + 2;\n\n      this.ttEditor\n        .chain()\n        .BNCreateBlock(newBlockInsertionPos)\n        .BNUpdateBlock(newBlockContentPos, { type: \"paragraph\", props: {} })\n        .setTextSelection(newBlockContentPos)\n        .run();\n    } else {\n      this.ttEditor.commands.setTextSelection(endPos);\n    }\n\n    // Focuses and activates the suggestion menu.\n    this.ttEditor.view.focus();\n    this.ttEditor.view.dispatch(\n      this.ttEditor.view.state.tr.scrollIntoView().setMeta(SlashMenuPluginKey, {\n        // TODO import suggestion plugin key\n        activate: true,\n        type: \"drag\",\n      })\n    );\n  }\n\n  getStaticParams(): BlockSideMenuStaticParams<BSchema> {\n    return {\n      editor: this.editor,\n      addBlock: () => this.addBlock(),\n      blockDragStart: (event: DragEvent) => {\n        // Sets isDragging when dragging blocks.\n        this.isDragging = true;\n        dragStart(event, this.ttEditor.view);\n      },\n      blockDragEnd: () => unsetDragImage(),\n      freezeMenu: () => {\n        this.menuFrozen = true;\n      },\n      unfreezeMenu: () => {\n        this.menuFrozen = false;\n      },\n      getReferenceRect: () => {\n        if (!this.menuOpen) {\n          if (this.lastPosition === undefined) {\n            throw new Error(\n              \"Attempted to access block reference rect before rendering block side menu.\"\n            );\n          }\n\n          return this.lastPosition;\n        }\n\n        const blockContent = this.hoveredBlock!.firstChild! as HTMLElement;\n        const blockContentBoundingBox = blockContent.getBoundingClientRect();\n        if (this.horizontalPosAnchoredAtRoot) {\n          blockContentBoundingBox.x = this.horizontalPosAnchor;\n        }\n        this.lastPosition = blockContentBoundingBox;\n\n        return blockContentBoundingBox;\n      },\n    };\n  }\n\n  getDynamicParams(): BlockSideMenuDynamicParams<BSchema> {\n    return {\n      block: this.editor.getBlock(this.hoveredBlock!.getAttribute(\"data-id\")!)!,\n    };\n  }\n}\n\nexport const createDraggableBlocksPlugin = <BSchema extends BlockSchema>(\n  options: DraggableBlocksOptions<BSchema>\n) => {\n  return new Plugin({\n    key: new PluginKey(\"DraggableBlocksPlugin\"),\n    view: () =>\n      new BlockMenuView({\n        tiptapEditor: options.tiptapEditor,\n        editor: options.editor,\n        blockMenuFactory: options.blockSideMenuFactory,\n        horizontalPosAnchoredAtRoot: true,\n      }),\n  });\n};\n","import { Editor, Extension } from \"@tiptap/core\";\nimport { BlockSideMenuFactory } from \"./BlockSideMenuFactoryTypes\";\nimport { createDraggableBlocksPlugin } from \"./DraggableBlocksPlugin\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport { BlockSchema } from \"../Blocks/api/blockTypes\";\n\nexport type DraggableBlocksOptions<BSchema extends BlockSchema> = {\n  tiptapEditor: Editor;\n  editor: BlockNoteEditor<BSchema>;\n  blockSideMenuFactory: BlockSideMenuFactory<BSchema>;\n};\n\n/**\n * This extension adds a menu to the side of blocks which features various BlockNote functions such as adding and\n * removing blocks. More importantly, it adds a drag handle which allows the user to drag and drop blocks.\n *\n * code based on https://github.com/ueberdosis/tiptap/issues/323#issuecomment-506637799\n */\nexport const createDraggableBlocksExtension = <BSchema extends BlockSchema>() =>\n  Extension.create<DraggableBlocksOptions<BSchema>>({\n    name: \"DraggableBlocksExtension\",\n    priority: 1000, // Need to be high, in order to hide menu when typing slash\n    addProseMirrorPlugins() {\n      if (!this.options.blockSideMenuFactory) {\n        throw new Error(\n          \"UI Element factory not defined for DraggableBlocksExtension\"\n        );\n      }\n      return [\n        createDraggableBlocksPlugin({\n          tiptapEditor: this.editor,\n          editor: this.options.editor,\n          blockSideMenuFactory: this.options.blockSideMenuFactory,\n        }),\n      ];\n    },\n  });\n","import {\n  Editor,\n  isNodeSelection,\n  isTextSelection,\n  posToDOMRect,\n} from \"@tiptap/core\";\nimport { EditorState, Plugin, PluginKey } from \"prosemirror-state\";\nimport { EditorView } from \"prosemirror-view\";\nimport { BlockNoteEditor, BlockSchema } from \"../..\";\nimport {\n  FormattingToolbar,\n  FormattingToolbarFactory,\n  FormattingToolbarStaticParams,\n} from \"./FormattingToolbarFactoryTypes\";\n\n// Same as TipTap bubblemenu plugin, but with these changes:\n// https://github.com/ueberdosis/tiptap/pull/2596/files\nexport interface FormattingToolbarPluginProps<BSchema extends BlockSchema> {\n  pluginKey: PluginKey;\n  tiptapEditor: Editor;\n  editor: BlockNoteEditor<BSchema>;\n  formattingToolbarFactory: FormattingToolbarFactory<BSchema>;\n}\n\nexport type FormattingToolbarViewProps<BSchema extends BlockSchema> =\n  FormattingToolbarPluginProps<BSchema> & {\n    view: EditorView;\n  };\n\nexport class FormattingToolbarView<BSchema extends BlockSchema> {\n  public editor: BlockNoteEditor<BSchema>;\n  private ttEditor: Editor;\n\n  public view: EditorView;\n\n  public formattingToolbar: FormattingToolbar;\n\n  public preventHide = false;\n\n  public preventShow = false;\n\n  public toolbarIsOpen = false;\n\n  public prevWasEditable: boolean | null = null;\n\n  private lastPosition: DOMRect | undefined;\n\n  public shouldShow: (props: {\n    view: EditorView;\n    state: EditorState;\n    from: number;\n    to: number;\n  }) => boolean = ({ view, state, from, to }) => {\n    const { doc, selection } = state;\n    const { empty } = selection;\n\n    // Sometime check for `empty` is not enough.\n    // Doubleclick an empty paragraph returns a node size of 2.\n    // So we check also for an empty text size.\n    const isEmptyTextBlock =\n      !doc.textBetween(from, to).length && isTextSelection(state.selection);\n\n    return !(!view.hasFocus() || empty || isEmptyTextBlock);\n  };\n\n  constructor({\n    editor,\n    tiptapEditor,\n    formattingToolbarFactory,\n    view,\n  }: FormattingToolbarViewProps<BSchema>) {\n    this.editor = editor;\n    this.ttEditor = tiptapEditor;\n    this.view = view;\n\n    this.formattingToolbar = formattingToolbarFactory(this.getStaticParams());\n\n    this.view.dom.addEventListener(\"mousedown\", this.viewMousedownHandler);\n    this.view.dom.addEventListener(\"mouseup\", this.viewMouseupHandler);\n    this.view.dom.addEventListener(\"dragstart\", this.dragstartHandler);\n\n    this.ttEditor.on(\"focus\", this.focusHandler);\n    this.ttEditor.on(\"blur\", this.blurHandler);\n  }\n\n  viewMousedownHandler = () => {\n    this.preventShow = true;\n  };\n\n  viewMouseupHandler = () => {\n    this.preventShow = false;\n    setTimeout(() => this.update(this.ttEditor.view));\n  };\n\n  dragstartHandler = () => {\n    this.formattingToolbar.hide();\n    this.toolbarIsOpen = false;\n  };\n\n  focusHandler = () => {\n    // we use `setTimeout` to make sure `selection` is already updated\n    setTimeout(() => this.update(this.ttEditor.view));\n  };\n\n  blurHandler = ({ event }: { event: FocusEvent }) => {\n    if (this.preventHide) {\n      this.preventHide = false;\n\n      return;\n    }\n\n    // Checks if the focus is moving to an element outside the editor. If it is,\n    // the toolbar is hidden.\n    if (\n      // An element is clicked.\n      event &&\n      event.relatedTarget &&\n      // Element is outside the toolbar.\n      (this.formattingToolbar.element === (event.relatedTarget as Node) ||\n        this.formattingToolbar.element?.contains(event.relatedTarget as Node))\n    ) {\n      return;\n    }\n\n    if (this.toolbarIsOpen) {\n      this.formattingToolbar.hide();\n      this.toolbarIsOpen = false;\n    }\n  };\n\n  update(view: EditorView, oldState?: EditorState) {\n    const { state, composing } = view;\n    const { doc, selection } = state;\n    const isSame =\n      oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n\n    if (\n      (this.prevWasEditable === null ||\n        this.prevWasEditable === this.editor.isEditable) &&\n      (composing || isSame)\n    ) {\n      return;\n    }\n\n    this.prevWasEditable = this.editor.isEditable;\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    const shouldShow = this.shouldShow?.({\n      view,\n      state,\n      from,\n      to,\n    });\n\n    // Checks if menu should be shown.\n    if (\n      this.editor.isEditable &&\n      !this.toolbarIsOpen &&\n      !this.preventShow &&\n      (shouldShow || this.preventHide)\n    ) {\n      this.formattingToolbar.render({}, true);\n      this.toolbarIsOpen = true;\n\n      return;\n    }\n\n    // Checks if menu should be updated.\n    if (\n      this.toolbarIsOpen &&\n      !this.preventShow &&\n      (shouldShow || this.preventHide)\n    ) {\n      this.formattingToolbar.render({}, false);\n      return;\n    }\n\n    // Checks if menu should be hidden.\n    if (\n      this.toolbarIsOpen &&\n      !this.preventHide &&\n      (!shouldShow || this.preventShow || !this.editor.isEditable)\n    ) {\n      this.formattingToolbar.hide();\n      this.toolbarIsOpen = false;\n\n      return;\n    }\n  }\n\n  destroy() {\n    this.view.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler);\n    this.view.dom.removeEventListener(\"mouseup\", this.viewMouseupHandler);\n    this.view.dom.removeEventListener(\"dragstart\", this.dragstartHandler);\n\n    this.ttEditor.off(\"focus\", this.focusHandler);\n    this.ttEditor.off(\"blur\", this.blurHandler);\n  }\n\n  getSelectionBoundingBox() {\n    const { state } = this.ttEditor.view;\n    const { selection } = state;\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    if (isNodeSelection(selection)) {\n      const node = this.ttEditor.view.nodeDOM(from) as HTMLElement;\n\n      if (node) {\n        return node.getBoundingClientRect();\n      }\n    }\n\n    return posToDOMRect(this.ttEditor.view, from, to);\n  }\n\n  getStaticParams(): FormattingToolbarStaticParams<BSchema> {\n    return {\n      editor: this.editor,\n      getReferenceRect: () => {\n        if (!this.toolbarIsOpen) {\n          if (this.lastPosition === undefined) {\n            throw new Error(\n              \"Attempted to access selection reference rect before rendering formatting toolbar.\"\n            );\n          }\n\n          return this.lastPosition;\n        }\n\n        const selectionBoundingBox = this.getSelectionBoundingBox();\n        this.lastPosition = selectionBoundingBox;\n\n        return selectionBoundingBox;\n      },\n    };\n  }\n}\n\nexport const createFormattingToolbarPlugin = <BSchema extends BlockSchema>(\n  options: FormattingToolbarPluginProps<BSchema>\n) => {\n  return new Plugin({\n    key: new PluginKey(\"FormattingToolbarPlugin\"),\n    view: (view) => new FormattingToolbarView({ view, ...options }),\n  });\n};\n","import { Extension } from \"@tiptap/core\";\nimport { PluginKey } from \"prosemirror-state\";\nimport { BlockNoteEditor, BlockSchema } from \"../..\";\nimport { FormattingToolbarFactory } from \"./FormattingToolbarFactoryTypes\";\nimport { createFormattingToolbarPlugin } from \"./FormattingToolbarPlugin\";\n\nexport type FormattingToolbarOptions<BSchema extends BlockSchema> = {\n  formattingToolbarFactory: FormattingToolbarFactory<BSchema>;\n  editor: BlockNoteEditor<BSchema>;\n};\n\n/**\n * The menu that is displayed when selecting a piece of text.\n */\nexport const createFormattingToolbarExtension = <\n  BSchema extends BlockSchema\n>() =>\n  Extension.create<FormattingToolbarOptions<BSchema>>({\n    name: \"FormattingToolbarExtension\",\n\n  addProseMirrorPlugins() {\n    if (!this.options.formattingToolbarFactory || !this.options.editor) {\n      throw new Error(\n        \"required args not defined for FormattingToolbarExtension\"\n      );\n    }\n\n      return [\n        createFormattingToolbarPlugin({\n          tiptapEditor: this.editor,\n          editor: this.options.editor,\n          formattingToolbarFactory: this.options.formattingToolbarFactory,\n          pluginKey: new PluginKey(\"FormattingToolbarPlugin\"),\n        }),\n      ];\n    },\n  });\n","import { Editor, getMarkRange, posToDOMRect, Range } from \"@tiptap/core\";\nimport { Mark } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport {\n  HyperlinkToolbar,\n  HyperlinkToolbarDynamicParams,\n  HyperlinkToolbarFactory,\n  HyperlinkToolbarStaticParams,\n} from \"./HyperlinkToolbarFactoryTypes\";\nconst PLUGIN_KEY = new PluginKey(\"HyperlinkToolbarPlugin\");\n\nexport type HyperlinkToolbarPluginProps = {\n  hyperlinkToolbarFactory: HyperlinkToolbarFactory;\n};\n\nexport type HyperlinkToolbarViewProps = {\n  editor: Editor;\n  hyperlinkToolbarFactory: HyperlinkToolbarFactory;\n};\n\nclass HyperlinkToolbarView {\n  editor: Editor;\n\n  hyperlinkToolbar: HyperlinkToolbar;\n\n  menuUpdateTimer: NodeJS.Timeout | undefined;\n  startMenuUpdateTimer: () => void;\n  stopMenuUpdateTimer: () => void;\n\n  mouseHoveredHyperlinkMark: Mark | undefined;\n  mouseHoveredHyperlinkMarkRange: Range | undefined;\n\n  keyboardHoveredHyperlinkMark: Mark | undefined;\n  keyboardHoveredHyperlinkMarkRange: Range | undefined;\n\n  hyperlinkMark: Mark | undefined;\n  hyperlinkMarkRange: Range | undefined;\n\n  private lastPosition: DOMRect | undefined;\n\n  constructor({ editor, hyperlinkToolbarFactory }: HyperlinkToolbarViewProps) {\n    this.editor = editor;\n\n    this.hyperlinkToolbar = hyperlinkToolbarFactory(this.getStaticParams());\n\n    this.startMenuUpdateTimer = () => {\n      this.menuUpdateTimer = setTimeout(() => {\n        this.update();\n      }, 250);\n    };\n\n    this.stopMenuUpdateTimer = () => {\n      if (this.menuUpdateTimer) {\n        clearTimeout(this.menuUpdateTimer);\n        this.menuUpdateTimer = undefined;\n      }\n\n      return false;\n    };\n\n    this.editor.view.dom.addEventListener(\"mouseover\", this.mouseOverHandler);\n    document.addEventListener(\"click\", this.clickHandler, true);\n  }\n\n  mouseOverHandler = (event: MouseEvent) => {\n    // Resets the hyperlink mark currently hovered by the mouse cursor.\n    this.mouseHoveredHyperlinkMark = undefined;\n    this.mouseHoveredHyperlinkMarkRange = undefined;\n\n    this.stopMenuUpdateTimer();\n\n    if (\n      event.target instanceof HTMLAnchorElement &&\n      event.target.nodeName === \"A\"\n    ) {\n      // Finds link mark at the hovered element's position to update mouseHoveredHyperlinkMark and\n      // mouseHoveredHyperlinkMarkRange.\n      const hoveredHyperlinkElement = event.target;\n      const posInHoveredHyperlinkMark =\n        this.editor.view.posAtDOM(hoveredHyperlinkElement, 0) + 1;\n      const resolvedPosInHoveredHyperlinkMark = this.editor.state.doc.resolve(\n        posInHoveredHyperlinkMark\n      );\n      const marksAtPos = resolvedPosInHoveredHyperlinkMark.marks();\n\n      for (const mark of marksAtPos) {\n        if (mark.type.name === this.editor.schema.mark(\"link\").type.name) {\n          this.mouseHoveredHyperlinkMark = mark;\n          this.mouseHoveredHyperlinkMarkRange =\n            getMarkRange(\n              resolvedPosInHoveredHyperlinkMark,\n              mark.type,\n              mark.attrs\n            ) || undefined;\n\n          break;\n        }\n      }\n    }\n\n    this.startMenuUpdateTimer();\n\n    return false;\n  };\n\n  clickHandler = (event: MouseEvent) => {\n    if (\n      // Toolbar is open.\n      this.hyperlinkMark &&\n      // An element is clicked.\n      event &&\n      event.target &&\n      // Element is outside the editor.\n      this.editor.view.dom !== (event.target as Node) &&\n      !this.editor.view.dom.contains(event.target as Node) &&\n      // Element is outside the toolbar.\n      this.hyperlinkToolbar.element !== (event.target as Node) &&\n      !this.hyperlinkToolbar.element?.contains(event.target as Node)\n    ) {\n      this.hyperlinkToolbar.hide();\n    }\n  };\n\n  update() {\n    if (!this.editor.view.hasFocus()) {\n      return;\n    }\n\n    // Saves the currently hovered hyperlink mark before it's updated.\n    const prevHyperlinkMark = this.hyperlinkMark;\n\n    // Resets the currently hovered hyperlink mark.\n    this.hyperlinkMark = undefined;\n    this.hyperlinkMarkRange = undefined;\n\n    // Resets the hyperlink mark currently hovered by the keyboard cursor.\n    this.keyboardHoveredHyperlinkMark = undefined;\n    this.keyboardHoveredHyperlinkMarkRange = undefined;\n\n    // Finds link mark at the editor selection's position to update keyboardHoveredHyperlinkMark and\n    // keyboardHoveredHyperlinkMarkRange.\n    if (this.editor.state.selection.empty) {\n      const marksAtPos = this.editor.state.selection.$from.marks();\n\n      for (const mark of marksAtPos) {\n        if (mark.type.name === this.editor.schema.mark(\"link\").type.name) {\n          this.keyboardHoveredHyperlinkMark = mark;\n          this.keyboardHoveredHyperlinkMarkRange =\n            getMarkRange(\n              this.editor.state.selection.$from,\n              mark.type,\n              mark.attrs\n            ) || undefined;\n\n          break;\n        }\n      }\n    }\n\n    if (this.mouseHoveredHyperlinkMark) {\n      this.hyperlinkMark = this.mouseHoveredHyperlinkMark;\n      this.hyperlinkMarkRange = this.mouseHoveredHyperlinkMarkRange;\n    }\n\n    // Keyboard cursor position takes precedence over mouse hovered hyperlink.\n    if (this.keyboardHoveredHyperlinkMark) {\n      this.hyperlinkMark = this.keyboardHoveredHyperlinkMark;\n      this.hyperlinkMarkRange = this.keyboardHoveredHyperlinkMarkRange;\n    }\n\n    if (this.hyperlinkMark && this.editor.isEditable) {\n      this.getDynamicParams();\n\n      // Shows menu.\n      if (!prevHyperlinkMark) {\n        this.hyperlinkToolbar.render(this.getDynamicParams(), true);\n\n        this.hyperlinkToolbar.element?.addEventListener(\n          \"mouseleave\",\n          this.startMenuUpdateTimer\n        );\n        this.hyperlinkToolbar.element?.addEventListener(\n          \"mouseenter\",\n          this.stopMenuUpdateTimer\n        );\n\n        return;\n      }\n\n      // Updates menu.\n      this.hyperlinkToolbar.render(this.getDynamicParams(), false);\n\n      return;\n    }\n\n    // Hides menu.\n    if (prevHyperlinkMark && (!this.hyperlinkMark || !this.editor.isEditable)) {\n      this.hyperlinkToolbar.element?.removeEventListener(\n        \"mouseleave\",\n        this.startMenuUpdateTimer\n      );\n      this.hyperlinkToolbar.element?.removeEventListener(\n        \"mouseenter\",\n        this.stopMenuUpdateTimer\n      );\n\n      this.hyperlinkToolbar.hide();\n\n      return;\n    }\n  }\n\n  destroy() {\n    this.editor.view.dom.removeEventListener(\n      \"mouseover\",\n      this.mouseOverHandler\n    );\n  }\n\n  getStaticParams(): HyperlinkToolbarStaticParams {\n    return {\n      editHyperlink: (url: string, text: string) => {\n        const tr = this.editor.view.state.tr.insertText(\n          text,\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.to\n        );\n        tr.addMark(\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.from + text.length,\n          this.editor.schema.mark(\"link\", { href: url })\n        );\n        this.editor.view.dispatch(tr);\n        this.editor.view.focus();\n\n        this.hyperlinkToolbar.hide();\n      },\n      deleteHyperlink: () => {\n        this.editor.view.dispatch(\n          this.editor.view.state.tr\n            .removeMark(\n              this.hyperlinkMarkRange!.from,\n              this.hyperlinkMarkRange!.to,\n              this.hyperlinkMark!.type\n            )\n            .setMeta(\"preventAutolink\", true)\n        );\n        this.editor.view.focus();\n\n        this.hyperlinkToolbar.hide();\n      },\n      getReferenceRect: () => {\n        if (!this.hyperlinkMark) {\n          if (this.lastPosition === undefined) {\n            throw new Error(\n              \"Attempted to access hyperlink reference rect before rendering hyperlink toolbar.\"\n            );\n          }\n\n          return this.lastPosition;\n        }\n\n        const hyperlinkBoundingBox = posToDOMRect(\n          this.editor.view,\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.to\n        );\n        this.lastPosition = hyperlinkBoundingBox;\n\n        return hyperlinkBoundingBox;\n      },\n    };\n  }\n\n  getDynamicParams(): HyperlinkToolbarDynamicParams {\n    return {\n      url: this.hyperlinkMark!.attrs.href,\n      text: this.editor.view.state.doc.textBetween(\n        this.hyperlinkMarkRange!.from,\n        this.hyperlinkMarkRange!.to\n      ),\n    };\n  }\n}\n\nexport const createHyperlinkToolbarPlugin = (\n  editor: Editor,\n  options: HyperlinkToolbarPluginProps\n) => {\n  return new Plugin({\n    key: PLUGIN_KEY,\n    view: () =>\n      new HyperlinkToolbarView({\n        editor: editor,\n        hyperlinkToolbarFactory: options.hyperlinkToolbarFactory,\n      }),\n  });\n};\n","import { Link } from \"@tiptap/extension-link\";\nimport {\n  createHyperlinkToolbarPlugin,\n  HyperlinkToolbarPluginProps,\n} from \"./HyperlinkToolbarPlugin\";\n\n/**\n * This custom link includes a special menu for editing/deleting/opening the link.\n * The menu will be triggered by hovering over the link with the mouse,\n * or by moving the cursor inside the link text\n */\nconst Hyperlink = Link.extend<HyperlinkToolbarPluginProps>({\n  priority: 500,\n  addProseMirrorPlugins() {\n    if (!this.options.hyperlinkToolbarFactory) {\n      throw new Error(\"UI Element factory not defined for HyperlinkMark\");\n    }\n\n    return [\n      ...(this.parent?.() || []),\n      createHyperlinkToolbarPlugin(this.editor, {\n        hyperlinkToolbarFactory: this.options.hyperlinkToolbarFactory,\n      }),\n    ];\n  },\n});\n\nexport default Hyperlink;\n","import { Editor, Extension } from \"@tiptap/core\";\nimport { Node as ProsemirrorNode } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\nimport { SlashMenuPluginKey } from \"../SlashMenu/SlashMenuExtension\";\n\nconst PLUGIN_KEY = new PluginKey(`blocknote-placeholder`);\n\n/**\n * This is a modified version of the tiptap\n * placeholder plugin, that also sets hasAnchorClass\n *\n * It does not set a data-placeholder (text is currently done in css)\n *\n */\nexport interface PlaceholderOptions {\n  emptyEditorClass: string;\n  emptyNodeClass: string;\n  isFilterClass: string;\n  hasAnchorClass: string;\n  placeholder:\n    | ((PlaceholderProps: {\n        editor: Editor;\n        node: ProsemirrorNode;\n        pos: number;\n        hasAnchor: boolean;\n      }) => string)\n    | string;\n  showOnlyWhenEditable: boolean;\n  showOnlyCurrent: boolean;\n  includeChildren: boolean;\n}\n\nexport const Placeholder = Extension.create<PlaceholderOptions>({\n  name: \"placeholder\",\n\n  addOptions() {\n    return {\n      emptyEditorClass: \"is-editor-empty\",\n      emptyNodeClass: \"is-empty\",\n      isFilterClass: \"is-filter\",\n      hasAnchorClass: \"has-anchor\",\n      placeholder: \"Write something …\",\n      showOnlyWhenEditable: true,\n      showOnlyCurrent: true,\n      includeChildren: false,\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: PLUGIN_KEY,\n        props: {\n          decorations: (state) => {\n            const { doc, selection } = state;\n            // Get state of slash menu\n            const menuState = SlashMenuPluginKey.getState(state);\n            const active =\n              this.editor.isEditable || !this.options.showOnlyWhenEditable;\n            const { anchor } = selection;\n            const decorations: Decoration[] = [];\n\n            if (!active) {\n              return;\n            }\n\n            doc.descendants((node, pos) => {\n              const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;\n              const isEmpty = !node.isLeaf && !node.childCount;\n\n              if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\n                const classes = [this.options.emptyNodeClass];\n\n                // TODO: Doesn't work?\n                if (this.editor.isEmpty) {\n                  classes.push(this.options.emptyEditorClass);\n                }\n\n                if (hasAnchor) {\n                  classes.push(this.options.hasAnchorClass);\n                }\n\n                // If slash menu is of drag type and active, show the filter placeholder\n                if (menuState?.triggerCharacter === \"\" && menuState?.active) {\n                  classes.push(this.options.isFilterClass);\n                }\n                // using widget, didn't work (caret position bug)\n                // const decoration = Decoration.widget(\n                //   pos + 1,\n                //   () => {\n                //     const el = document.createElement(\"span\");\n                //     el.innerText = \"hello\";\n                //     return el;\n                //   },\n                //   { side: 0 }\n\n                // Code that sets variables / classes\n                // const ph =\n                //   typeof this.options.placeholder === \"function\"\n                //     ? this.options.placeholder({\n                //         editor: this.editor,\n                //         node,\n                //         pos,\n                //         hasAnchor,\n                //       })\n                //     : this.options.placeholder;\n                // const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                //   class: classes.join(\" \"),\n                //   style: `--placeholder:'${ph.replaceAll(\"'\", \"\\\\'\")}';`,\n                //   \"data-placeholder\": ph,\n                // });\n\n                // Latest version, only set isEmpty and hasAnchor, rest is done via CSS\n\n                const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                  class: classes.join(\" \"),\n                });\n                decorations.push(decoration);\n              }\n\n              return this.options.includeChildren;\n            });\n\n            return DecorationSet.create(doc, decorations);\n          },\n        },\n      }),\n    ];\n  },\n});\n","/**\n * A generic interface used in all suggestion menus (slash menu, mentions, etc)\n */\nexport class SuggestionItem {\n  constructor(public name: string, public match: (query: string) => boolean) {}\n}\n","import { SuggestionItem } from \"../../shared/plugins/suggestion/SuggestionItem\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport { BlockSchema } from \"../Blocks/api/blockTypes\";\n\n/**\n * A class that defines a slash command (/<command>).\n *\n * (Not to be confused with ProseMirror commands nor TipTap commands.)\n */\nexport class BaseSlashMenuItem<\n  BSchema extends BlockSchema\n> extends SuggestionItem {\n  /**\n   * Constructs a new slash-command.\n   *\n   * @param name The name of the command\n   * @param execute The callback for creating a new node\n   * @param aliases Aliases for this command\n   */\n  constructor(\n    public readonly name: string,\n    public readonly execute: (editor: BlockNoteEditor<BSchema>) => void,\n    public readonly aliases: string[] = []\n  ) {\n    super(name, (query: string): boolean => {\n      return (\n        this.name.toLowerCase().startsWith(query.toLowerCase()) ||\n        this.aliases.filter((alias) =>\n          alias.toLowerCase().startsWith(query.toLowerCase())\n        ).length !== 0\n      );\n    });\n  }\n}\n","import { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport { PartialBlock } from \"../Blocks/api/blockTypes\";\nimport { DefaultBlockSchema } from \"../Blocks/api/defaultBlocks\";\nimport { BaseSlashMenuItem } from \"./BaseSlashMenuItem\";\n\nfunction insertOrUpdateBlock<BSchema extends DefaultBlockSchema>(\n  editor: BlockNoteEditor<BSchema>,\n  block: PartialBlock<BSchema>\n) {\n  const currentBlock = editor.getTextCursorPosition().block;\n\n  if (\n    (currentBlock.content.length === 1 &&\n      currentBlock.content[0].type === \"text\" &&\n      currentBlock.content[0].text === \"/\") ||\n    currentBlock.content.length === 0\n  ) {\n    editor.updateBlock(currentBlock, block);\n  } else {\n    editor.insertBlocks([block], currentBlock, \"after\");\n    editor.setTextCursorPosition(editor.getTextCursorPosition().nextBlock!);\n  }\n}\n\n/**\n * An array containing commands for creating all default blocks.\n */\nexport const defaultSlashMenuItems = [\n  // Command for creating a level 1 heading\n  new BaseSlashMenuItem<DefaultBlockSchema>(\n    \"Heading\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"heading\",\n        props: { level: \"1\" },\n      }),\n    [\"h\", \"heading1\", \"h1\"]\n  ),\n\n  // Command for creating a level 2 heading\n  new BaseSlashMenuItem<DefaultBlockSchema>(\n    \"Heading 2\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"heading\",\n        props: { level: \"2\" },\n      }),\n    [\"h2\", \"heading2\", \"subheading\"]\n  ),\n\n  // Command for creating a level 3 heading\n  new BaseSlashMenuItem<DefaultBlockSchema>(\n    \"Heading 3\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"heading\",\n        props: { level: \"3\" },\n      }),\n    [\"h3\", \"heading3\", \"subheading\"]\n  ),\n\n  // Command for creating an ordered list\n  new BaseSlashMenuItem<DefaultBlockSchema>(\n    \"Numbered List\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"numberedListItem\",\n      }),\n    [\"li\", \"list\", \"numberedlist\", \"numbered list\"]\n  ),\n\n  // Command for creating a bullet list\n  new BaseSlashMenuItem<DefaultBlockSchema>(\n    \"Bullet List\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"bulletListItem\",\n      }),\n    [\"ul\", \"list\", \"bulletlist\", \"bullet list\"]\n  ),\n\n  // Command for creating a paragraph (pretty useless)\n  new BaseSlashMenuItem<DefaultBlockSchema>(\n    \"Paragraph\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"paragraph\",\n      }),\n    [\"p\"]\n  ),\n\n  //     replaceRangeWithNode(editor, range, node);\n\n  //     return true;\n  //   },\n  //   [\"ol\", \"orderedlist\"],\n  //   OrderedListIcon,\n  //   \"Used to display an ordered (enumerated) list item\"\n  // ),\n\n  // Command for creating a blockquote\n  // blockquote: new SlashCommand(\n  //   \"Block Quote\",\n  //   CommandGroup.BASIC_BLOCKS,\n  //   (editor, range) => {\n  //     const paragraph = editor.schema.node(\"paragraph\");\n  //     const node = editor.schema.node(\n  //       \"blockquote\",\n  //       { \"block-id\": uniqueId.generate() },\n  //       paragraph\n  //     );\n\n  //     replaceRangeWithNode(editor, range, node);\n\n  //     return true;\n  //   },\n  //   [\"quote\", \"blockquote\"],\n  //   QuoteIcon,\n  //   \"Used to make a quote stand out\",\n  //   \"Ctrl+Shift+B\"\n  // ),\n\n  // Command for creating a horizontal rule\n  // horizontalRule: new SlashCommand(\n  //   \"Horizontal Rule\",\n  //   CommandGroup.BASIC_BLOCKS,\n  //   (editor, range) => {\n  //     const node = editor.schema.node(\"horizontalRule\", {\n  //       \"block-id\": uniqueId.generate(),\n  //     });\n\n  //     // insert horizontal rule, create a new block after the horizontal rule if applicable\n  //     // and put the cursor in the block after the horizontal rule.\n  //     editor\n  //       .chain()\n  //       .focus()\n  //       .replaceRangeAndUpdateSelection(range, node)\n  //       .command(({ tr, dispatch }) => {\n  //         if (dispatch) {\n  //           // the node immediately after the cursor\n  //           const nodeAfter = tr.selection.$to.nodeAfter;\n\n  //           // the position of the cursor\n  //           const cursorPos = tr.selection.$to.pos;\n\n  //           // check if there is no node after the cursor (end of document)\n  //           if (!nodeAfter) {\n  //             // create a new block of the default type (probably paragraph) after the cursor\n  //             const { parent } = tr.selection.$to;\n  //             const node = parent.type.contentMatch.defaultType?.create();\n\n  //             if (node) {\n  //               tr.insert(cursorPos, node);\n  //             }\n  //           }\n\n  //           // try to put the cursor at the start of the node directly after the inserted horizontal rule\n  //           tr.doc.nodesBetween(cursorPos, cursorPos + 1, (node, pos) => {\n  //             if (node.type.name !== \"horizontalRule\") {\n  //               tr.setSelection(TextSelection.create(tr.doc, pos));\n  //             }\n  //           });\n  //         }\n\n  //         return true;\n  //       })\n  //       .scrollIntoView()\n  //       .run();\n  //     return true;\n  //   },\n  //   [\"hr\", \"horizontalrule\"],\n  //   SeparatorIcon,\n  //   \"Used to separate sections with a horizontal line\"\n  // ),\n\n  // Command for creating a table\n  // table: new SlashCommand(\n  //   \"Table\",\n  //   CommandGroup.BASIC_BLOCKS,\n  //   (editor, range) => {\n  //     editor.chain().focus().deleteRange(range).run();\n  //     // TODO: add blockid, pending https://github.com/ueberdosis/tiptap/pull/1469\n  //     editor\n  //       .chain()\n  //       .focus()\n  //       .insertTable({ rows: 1, cols: 2, withHeaderRow: false })\n  //       .scrollIntoView()\n  //       .run();\n  //     return true;\n  //   },\n  //   [\"table\", \"database\"],\n  //   TableIcon,\n  //   \"Used to create a simple table\"\n  // ),\n];\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    textAlignment: {\n      setTextAlignment: (\n        textAlignment: \"left\" | \"center\" | \"right\" | \"justify\"\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const TextAlignmentExtension = Extension.create({\n  name: \"textAlignment\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        // Attribute is applied to block content instead of container so that child blocks don't inherit the text\n        // alignment styling.\n        types: [\"paragraph\", \"heading\", \"bulletListItem\", \"numberedListItem\"],\n        attributes: {\n          textAlignment: {\n            default: \"left\",\n            parseHTML: (element) => element.getAttribute(\"data-text-alignment\"),\n            renderHTML: (attributes) =>\n              attributes.textAlignment !== \"left\" && {\n                \"data-text-alignment\": attributes.textAlignment,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setTextAlignment:\n        (textAlignment) =>\n        ({ state }) => {\n          const positionsBeforeSelectedContent = [];\n\n          const blockInfo = getBlockInfoFromPos(\n            state.doc,\n            state.selection.from\n          );\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          // Finds all blockContent nodes that the current selection is in.\n          let pos = blockInfo.startPos;\n          while (pos < state.selection.to) {\n            if (\n              state.doc.resolve(pos).node().type.spec.group === \"blockContent\"\n            ) {\n              positionsBeforeSelectedContent.push(pos - 1);\n\n              pos += state.doc.resolve(pos).node().nodeSize - 1;\n            } else {\n              pos += 1;\n            }\n          }\n\n          // Sets text alignment for all blockContent nodes that the current selection is in.\n          for (const pos of positionsBeforeSelectedContent) {\n            state.tr.setNodeAttribute(pos, \"textAlignment\", textAlignment);\n          }\n\n          return true;\n        },\n    };\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    blockTextColor: {\n      setBlockTextColor: (posInBlock: number, color: string) => ReturnType;\n    };\n  }\n}\n\nexport const TextColorExtension = Extension.create({\n  name: \"blockTextColor\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          textColor: {\n            default: \"default\",\n            parseHTML: (element) =>\n              element.hasAttribute(\"data-text-color\")\n                ? element.getAttribute(\"data-text-color\")\n                : \"default\",\n            renderHTML: (attributes) =>\n              attributes.textColor !== \"default\" && {\n                \"data-text-color\": attributes.textColor,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setBlockTextColor:\n        (posInBlock, color) =>\n        ({ state, view }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          state.tr.setNodeAttribute(blockInfo.startPos - 1, \"textColor\", color);\n\n          view.focus();\n\n          return true;\n        },\n    };\n  },\n});\n","import { Mark } from \"@tiptap/core\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    textColor: {\n      setTextColor: (color: string) => ReturnType;\n    };\n  }\n}\n\nexport const TextColorMark = Mark.create({\n  name: \"textColor\",\n\n  addAttributes() {\n    return {\n      color: {\n        default: undefined,\n        parseHTML: (element) => element.getAttribute(\"data-text-color\"),\n        renderHTML: (attributes) => ({\n          \"data-text-color\": attributes.color,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.hasAttribute(\"data-text-color\")) {\n            return { color: element.getAttribute(\"data-text-color\") };\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"span\", HTMLAttributes, 0];\n  },\n\n  addCommands() {\n    return {\n      setTextColor:\n        (color) =>\n        ({ commands }) => {\n          if (color !== \"default\") {\n            return commands.setMark(this.name, { color: color });\n          }\n\n          return commands.unsetMark(this.name);\n        },\n    };\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\n\n// based on https://github.com/ueberdosis/tiptap/blob/40a9404c94c7fef7900610c195536384781ae101/demos/src/Experiments/TrailingNode/Vue/trailing-node.ts\n\n/**\n * Extension based on:\n * - https://github.com/ueberdosis/tiptap/blob/v1/packages/tiptap-extensions/src/extensions/TrailingNode.js\n * - https://github.com/remirror/remirror/blob/e0f1bec4a1e8073ce8f5500d62193e52321155b9/packages/prosemirror-trailing-node/src/trailing-node-plugin.ts\n */\n\nexport interface TrailingNodeOptions {\n  node: string;\n}\n\n/**\n * Add a trailing node to the document so the user can always click at the bottom of the document and start typing\n */\nexport const TrailingNode = Extension.create<TrailingNodeOptions>({\n  name: \"trailingNode\",\n\n  addProseMirrorPlugins() {\n    const plugin = new PluginKey(this.name);\n    // const disabledNodes = Object.entries(this.editor.schema.nodes)\n    //   .map(([, value]) => value)\n    //   .filter((node) => this.options.notAfter.includes(node.name));\n\n    return [\n      new Plugin({\n        key: plugin,\n        appendTransaction: (_, __, state) => {\n          const { doc, tr, schema } = state;\n          const shouldInsertNodeAtEnd = plugin.getState(state);\n          const endPosition = doc.content.size - 2;\n          const type = schema.nodes[\"blockContainer\"];\n          const contentType = schema.nodes[\"paragraph\"];\n          if (!shouldInsertNodeAtEnd) {\n            return;\n          }\n\n          return tr.insert(\n            endPosition,\n            type.create(undefined, contentType.create())\n          );\n        },\n        state: {\n          init: (_, _state) => {\n            // (maybe fix): use same logic as apply() here\n            // so it works when initializing\n          },\n          apply: (tr, value) => {\n            if (!tr.docChanged) {\n              return value;\n            }\n\n            let lastNode = tr.doc.lastChild;\n\n            if (!lastNode || lastNode.type.name !== \"blockGroup\") {\n              throw new Error(\"Expected blockGroup\");\n            }\n\n            lastNode = lastNode.lastChild;\n\n            if (!lastNode || lastNode.type.name !== \"blockContainer\") {\n              throw new Error(\"Expected blockContainer\");\n            }\n            return lastNode.nodeSize > 4; // empty <block><content/></block> is length 4\n          },\n        },\n      }),\n    ];\n  },\n});\n","import { Extensions, extensions } from \"@tiptap/core\";\n\nimport { BlockNoteEditor } from \"./BlockNoteEditor\";\n\nimport { Bold } from \"@tiptap/extension-bold\";\nimport { Code } from \"@tiptap/extension-code\";\nimport Collaboration from \"@tiptap/extension-collaboration\";\nimport CollaborationCursor from \"@tiptap/extension-collaboration-cursor\";\nimport { Dropcursor } from \"@tiptap/extension-dropcursor\";\nimport { Gapcursor } from \"@tiptap/extension-gapcursor\";\nimport { HardBreak } from \"@tiptap/extension-hard-break\";\nimport { History } from \"@tiptap/extension-history\";\nimport { Italic } from \"@tiptap/extension-italic\";\nimport { Link } from \"@tiptap/extension-link\";\nimport { Strike } from \"@tiptap/extension-strike\";\nimport { Text } from \"@tiptap/extension-text\";\nimport { Underline } from \"@tiptap/extension-underline\";\nimport * as Y from \"yjs\";\nimport styles from \"./editor.module.css\";\nimport { BackgroundColorExtension } from \"./extensions/BackgroundColor/BackgroundColorExtension\";\nimport { BackgroundColorMark } from \"./extensions/BackgroundColor/BackgroundColorMark\";\nimport { blocks } from \"./extensions/Blocks\";\nimport { BlockSchema } from \"./extensions/Blocks/api/blockTypes\";\nimport { CustomBlockSerializerExtension } from \"./extensions/Blocks/api/serialization\";\nimport blockStyles from \"./extensions/Blocks/nodes/Block.module.css\";\nimport { BlockSideMenuFactory } from \"./extensions/DraggableBlocks/BlockSideMenuFactoryTypes\";\nimport { createDraggableBlocksExtension } from \"./extensions/DraggableBlocks/DraggableBlocksExtension\";\nimport { createFormattingToolbarExtension } from \"./extensions/FormattingToolbar/FormattingToolbarExtension\";\nimport { FormattingToolbarFactory } from \"./extensions/FormattingToolbar/FormattingToolbarFactoryTypes\";\nimport HyperlinkMark from \"./extensions/HyperlinkToolbar/HyperlinkMark\";\nimport { HyperlinkToolbarFactory } from \"./extensions/HyperlinkToolbar/HyperlinkToolbarFactoryTypes\";\nimport { Placeholder } from \"./extensions/Placeholder/PlaceholderExtension\";\nimport {\n  BaseSlashMenuItem,\n  createSlashMenuExtension,\n} from \"./extensions/SlashMenu\";\nimport { TextAlignmentExtension } from \"./extensions/TextAlignment/TextAlignmentExtension\";\nimport { TextColorExtension } from \"./extensions/TextColor/TextColorExtension\";\nimport { TextColorMark } from \"./extensions/TextColor/TextColorMark\";\nimport { TrailingNode } from \"./extensions/TrailingNode/TrailingNodeExtension\";\nimport UniqueID from \"./extensions/UniqueID/UniqueID\";\nimport { SuggestionsMenuFactory } from \"./shared/plugins/suggestion/SuggestionsMenuFactoryTypes\";\n\nexport type UiFactories<BSchema extends BlockSchema> = Partial<{\n  formattingToolbarFactory: FormattingToolbarFactory<BSchema>;\n  hyperlinkToolbarFactory: HyperlinkToolbarFactory;\n  slashMenuFactory: SuggestionsMenuFactory<BaseSlashMenuItem<BSchema>>;\n  blockSideMenuFactory: BlockSideMenuFactory<BSchema>;\n}>;\n\n/**\n * Get all the Tiptap extensions BlockNote is configured with by default\n */\nexport const getBlockNoteExtensions = <BSchema extends BlockSchema>(opts: {\n  editor: BlockNoteEditor<BSchema>;\n  uiFactories: UiFactories<BSchema>;\n  slashCommands: BaseSlashMenuItem<any>[]; // couldn't fix type, see https://github.com/TypeCellOS/BlockNote/pull/191#discussion_r1210708771\n  blockSchema: BSchema;\n  collaboration?: {\n    fragment: Y.XmlFragment;\n    user: {\n      name: string;\n      color: string;\n    };\n    provider: any;\n    renderCursor?: (user: any) => HTMLElement;\n  };\n}) => {\n  const ret: Extensions = [\n    extensions.ClipboardTextSerializer,\n    extensions.Commands,\n    extensions.Editable,\n    extensions.FocusEvents,\n    extensions.Tabindex,\n\n    // DevTools,\n    Gapcursor,\n\n    // DropCursor,\n    Placeholder.configure({\n      emptyNodeClass: blockStyles.isEmpty,\n      hasAnchorClass: blockStyles.hasAnchor,\n      isFilterClass: blockStyles.isFilter,\n      includeChildren: true,\n      showOnlyCurrent: false,\n    }),\n    UniqueID.configure({\n      types: [\"blockContainer\"],\n    }),\n    HardBreak,\n    // Comments,\n\n    // basics:\n    Text,\n\n    // marks:\n    Bold,\n    Code,\n    Italic,\n    Strike,\n    Underline,\n    TextColorMark,\n    TextColorExtension,\n    BackgroundColorMark,\n    BackgroundColorExtension,\n    TextAlignmentExtension,\n\n    // custom blocks:\n    ...blocks,\n    ...Object.values(opts.blockSchema).map((blockSpec) =>\n      blockSpec.node.configure({ editor: opts.editor })\n    ),\n    CustomBlockSerializerExtension,\n\n    Dropcursor.configure({ width: 5, color: \"#ddeeff\" }),\n    // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),\n    // should be handled before Enter handlers in other components like splitListItem\n    TrailingNode,\n  ];\n\n  if (opts.collaboration) {\n    ret.push(\n      Collaboration.configure({\n        fragment: opts.collaboration.fragment,\n      })\n    );\n    const defaultRender = (user: { color: string; name: string }) => {\n      const cursor = document.createElement(\"span\");\n\n      cursor.classList.add(styles[\"collaboration-cursor__caret\"]);\n      cursor.setAttribute(\"style\", `border-color: ${user.color}`);\n\n      const label = document.createElement(\"span\");\n\n      label.classList.add(styles[\"collaboration-cursor__label\"]);\n      label.setAttribute(\"style\", `background-color: ${user.color}`);\n      label.insertBefore(document.createTextNode(user.name), null);\n\n      const nonbreakingSpace1 = document.createTextNode(\"\\u2060\");\n      const nonbreakingSpace2 = document.createTextNode(\"\\u2060\");\n      cursor.insertBefore(nonbreakingSpace1, null);\n      cursor.insertBefore(label, null);\n      cursor.insertBefore(nonbreakingSpace2, null);\n      return cursor;\n    };\n    ret.push(\n      CollaborationCursor.configure({\n        user: opts.collaboration.user,\n        render: opts.collaboration.renderCursor || defaultRender,\n        provider: opts.collaboration.provider,\n      })\n    );\n  } else {\n    // disable history extension when collaboration is enabled as Yjs takes care of undo / redo\n    ret.push(History);\n  }\n\n  if (opts.uiFactories.blockSideMenuFactory) {\n    ret.push(\n      createDraggableBlocksExtension<BSchema>().configure({\n        editor: opts.editor,\n        blockSideMenuFactory: opts.uiFactories.blockSideMenuFactory,\n      })\n    );\n  }\n\n  if (opts.uiFactories.formattingToolbarFactory) {\n    ret.push(\n      createFormattingToolbarExtension<BSchema>().configure({\n        editor: opts.editor,\n        formattingToolbarFactory: opts.uiFactories.formattingToolbarFactory,\n      })\n    );\n  }\n\n  if (opts.uiFactories.hyperlinkToolbarFactory) {\n    ret.push(\n      HyperlinkMark.configure({\n        hyperlinkToolbarFactory: opts.uiFactories.hyperlinkToolbarFactory,\n      })\n    );\n  } else {\n    ret.push(Link);\n  }\n\n  if (opts.uiFactories.slashMenuFactory) {\n    ret.push(\n      createSlashMenuExtension<BSchema>().configure({\n        editor: opts.editor,\n        commands: opts.slashCommands,\n        slashMenuFactory: opts.uiFactories.slashMenuFactory,\n      })\n    );\n  }\n\n  return ret;\n};\n","import { Editor, EditorOptions } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\n// import \"./blocknote.css\";\nimport { Editor as TiptapEditor } from \"@tiptap/core/dist/packages/core/src/Editor\";\nimport * as Y from \"yjs\";\nimport {\n  insertBlocks,\n  removeBlocks,\n  replaceBlocks,\n  updateBlock,\n} from \"./api/blockManipulation/blockManipulation\";\nimport {\n  blocksToHTML,\n  blocksToMarkdown,\n  HTMLToBlocks,\n  markdownToBlocks,\n} from \"./api/formatConversions/formatConversions\";\nimport { nodeToBlock } from \"./api/nodeConversions/nodeConversions\";\nimport { getNodeById } from \"./api/util/nodeUtil\";\nimport { getBlockNoteExtensions, UiFactories } from \"./BlockNoteExtensions\";\nimport styles from \"./editor.module.css\";\nimport {\n  Block,\n  BlockIdentifier,\n  BlockSchema,\n  PartialBlock,\n} from \"./extensions/Blocks/api/blockTypes\";\nimport { TextCursorPosition } from \"./extensions/Blocks/api/cursorPositionTypes\";\nimport {\n  DefaultBlockSchema,\n  defaultBlockSchema,\n} from \"./extensions/Blocks/api/defaultBlocks\";\nimport {\n  ColorStyle,\n  Styles,\n  ToggledStyle,\n} from \"./extensions/Blocks/api/inlineContentTypes\";\nimport { Selection } from \"./extensions/Blocks/api/selectionTypes\";\nimport { getBlockInfoFromPos } from \"./extensions/Blocks/helpers/getBlockInfoFromPos\";\nimport {\n  BaseSlashMenuItem,\n  defaultSlashMenuItems,\n} from \"./extensions/SlashMenu\";\n\nexport type BlockNoteEditorOptions<BSchema extends BlockSchema> = {\n  // TODO: Figure out if enableBlockNoteExtensions/disableHistoryExtension are needed and document them.\n  enableBlockNoteExtensions: boolean;\n\n  /**\n   * UI element factories for creating a custom UI, including custom positioning\n   * & rendering.\n   */\n  uiFactories: UiFactories<BSchema>;\n  /**\n   * TODO: why is this called slashCommands and not slashMenuItems?\n   *\n   * (couldn't fix any type, see https://github.com/TypeCellOS/BlockNote/pull/191#discussion_r1210708771)\n   *\n   * @default defaultSlashMenuItems from `./extensions/SlashMenu`\n   */\n  slashCommands: BaseSlashMenuItem<any>[];\n\n  /**\n   * The HTML element that should be used as the parent element for the editor.\n   *\n   * @default: undefined, the editor is not attached to the DOM\n   */\n  parentElement: HTMLElement;\n  /**\n   * An object containing attributes that should be added to the editor's HTML element.\n   *\n   * @example { class: \"my-editor-class\" }\n   */\n  editorDOMAttributes: Record<string, string>;\n  /**\n   *  A callback function that runs when the editor is ready to be used.\n   */\n  onEditorReady: (editor: BlockNoteEditor<BSchema>) => void;\n  /**\n   * A callback function that runs whenever the editor's contents change.\n   */\n  onEditorContentChange: (editor: BlockNoteEditor<BSchema>) => void;\n  /**\n   * A callback function that runs whenever the text cursor position changes.\n   */\n  onTextCursorPositionChange: (editor: BlockNoteEditor<BSchema>) => void;\n  /**\n   * Locks the editor from being editable by the user if set to `false`.\n   */\n  editable: boolean;\n  /**\n   * The content that should be in the editor when it's created, represented as an array of partial block objects.\n   */\n  initialContent: PartialBlock<BSchema>[];\n  /**\n   * Use default BlockNote font and reset the styles of <p> <li> <h1> elements etc., that are used in BlockNote.\n   *\n   * @default true\n   */\n  defaultStyles: boolean;\n  /**\n   * Whether to use the light or dark theme.\n   *\n   * @default \"light\"\n   */\n  theme: \"light\" | \"dark\";\n\n  /**\n   * A list of block types that should be available in the editor.\n   */\n  blockSchema: BSchema;\n\n  /**\n   * When enabled, allows for collaboration between multiple users.\n   */\n  collaboration: {\n    /**\n     * The Yjs XML fragment that's used for collaboration.\n     */\n    fragment: Y.XmlFragment;\n    /**\n     * The user info for the current user that's shown to other collaborators.\n     */\n    user: {\n      name: string;\n      color: string;\n    };\n    /**\n     * A Yjs provider (used for awareness / cursor information)\n     */\n    provider: any;\n    /**\n     * Optional function to customize how cursors of users are rendered\n     */\n    renderCursor?: (user: any) => HTMLElement;\n  };\n\n  // tiptap options, undocumented\n  _tiptapOptions: any;\n};\n\nconst blockNoteTipTapOptions = {\n  enableInputRules: true,\n  enablePasteRules: true,\n  enableCoreExtensions: false,\n};\n\nexport class BlockNoteEditor<BSchema extends BlockSchema = DefaultBlockSchema> {\n  public readonly _tiptapEditor: TiptapEditor & { contentComponent: any };\n  public blockCache = new WeakMap<Node, Block<BSchema>>();\n  public readonly schema: BSchema;\n  private ready = false;\n\n  public get domElement() {\n    return this._tiptapEditor.view.dom as HTMLDivElement;\n  }\n\n  public isFocused() {\n    return this._tiptapEditor.view.hasFocus();\n  }\n\n  public focus() {\n    this._tiptapEditor.view.focus();\n  }\n\n  constructor(\n    private readonly options: Partial<BlockNoteEditorOptions<BSchema>> = {}\n  ) {\n    // apply defaults\n    const newOptions: Omit<typeof options, \"defaultStyles\" | \"blockSchema\"> & {\n      defaultStyles: boolean;\n      blockSchema: BSchema;\n    } = {\n      defaultStyles: true,\n      // TODO: There's a lot of annoying typing stuff to deal with here. If\n      //  BSchema is specified, then options.blockSchema should also be required.\n      //  If BSchema is not specified, then options.blockSchema should also not\n      //  be defined. Unfortunately, trying to implement these constraints seems\n      //  to be a huge pain, hence the `as any` casts.\n      blockSchema: options.blockSchema || (defaultBlockSchema as any),\n      ...options,\n    };\n\n    const extensions = getBlockNoteExtensions<BSchema>({\n      editor: this,\n      uiFactories: newOptions.uiFactories || {},\n      slashCommands: newOptions.slashCommands || defaultSlashMenuItems,\n      blockSchema: newOptions.blockSchema,\n      collaboration: newOptions.collaboration,\n    });\n\n    this.schema = newOptions.blockSchema;\n\n    const tiptapOptions: EditorOptions = {\n      // TODO: This approach to setting initial content is \"cleaner\" but requires the PM editor schema, which is only\n      //  created after initializing the TipTap editor. Not sure it's feasible.\n      // content:\n      //   options.initialContent &&\n      //   options.initialContent.map((block) =>\n      //     blockToNode(block, this._tiptapEditor.schema).toJSON()\n      //   ),\n      ...blockNoteTipTapOptions,\n      ...newOptions._tiptapOptions,\n      onCreate: () => {\n        newOptions.onEditorReady?.(this);\n        newOptions.initialContent &&\n          this.replaceBlocks(this.topLevelBlocks, newOptions.initialContent);\n        this.ready = true;\n      },\n      onUpdate: () => {\n        // This seems to be necessary due to a bug in TipTap:\n        // https://github.com/ueberdosis/tiptap/issues/2583\n        if (!this.ready) {\n          return;\n        }\n\n        newOptions.onEditorContentChange?.(this);\n      },\n      onSelectionUpdate: () => {\n        // This seems to be necessary due to a bug in TipTap:\n        // https://github.com/ueberdosis/tiptap/issues/2583\n        if (!this.ready) {\n          return;\n        }\n\n        newOptions.onTextCursorPositionChange?.(this);\n      },\n      editable: options.editable === undefined ? true : options.editable,\n      extensions:\n        newOptions.enableBlockNoteExtensions === false\n          ? newOptions._tiptapOptions?.extensions\n          : [...(newOptions._tiptapOptions?.extensions || []), ...extensions],\n      editorProps: {\n        attributes: {\n          \"data-theme\": options.theme || \"light\",\n          ...(newOptions.editorDOMAttributes || {}),\n          class: [\n            styles.bnEditor,\n            styles.bnRoot,\n            newOptions.defaultStyles ? styles.defaultStyles : \"\",\n            newOptions.editorDOMAttributes?.class || \"\",\n          ].join(\" \"),\n        },\n      },\n    };\n\n    if (newOptions.parentElement) {\n      tiptapOptions.element = newOptions.parentElement;\n    }\n\n    this._tiptapEditor = new Editor(tiptapOptions) as Editor & {\n      contentComponent: any;\n    };\n  }\n\n  /**\n   * Gets a snapshot of all top-level (non-nested) blocks in the editor.\n   * @returns A snapshot of all top-level (non-nested) blocks in the editor.\n   */\n  public get topLevelBlocks(): Block<BSchema>[] {\n    const blocks: Block<BSchema>[] = [];\n\n    this._tiptapEditor.state.doc.firstChild!.descendants((node) => {\n      blocks.push(nodeToBlock(node, this.schema, this.blockCache));\n\n      return false;\n    });\n\n    return blocks;\n  }\n\n  /**\n   * Gets a snapshot of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block that should be retrieved.\n   * @returns The block that matches the identifier, or `undefined` if no matching block was found.\n   */\n  public getBlock(\n    blockIdentifier: BlockIdentifier\n  ): Block<BSchema> | undefined {\n    const id =\n      typeof blockIdentifier === \"string\"\n        ? blockIdentifier\n        : blockIdentifier.id;\n    let newBlock: Block<BSchema> | undefined = undefined;\n\n    this._tiptapEditor.state.doc.firstChild!.descendants((node) => {\n      if (typeof newBlock !== \"undefined\") {\n        return false;\n      }\n\n      if (node.type.name !== \"blockContainer\" || node.attrs.id !== id) {\n        return true;\n      }\n\n      newBlock = nodeToBlock(node, this.schema, this.blockCache);\n\n      return false;\n    });\n\n    return newBlock;\n  }\n\n  /**\n   * Traverses all blocks in the editor depth-first, and executes a callback for each.\n   * @param callback The callback to execute for each block. Returning `false` stops the traversal.\n   * @param reverse Whether the blocks should be traversed in reverse order.\n   */\n  public forEachBlock(\n    callback: (block: Block<BSchema>) => boolean,\n    reverse: boolean = false\n  ): void {\n    const blocks = this.topLevelBlocks.slice();\n\n    if (reverse) {\n      blocks.reverse();\n    }\n\n    function traverseBlockArray(blockArray: Block<BSchema>[]): boolean {\n      for (const block of blockArray) {\n        if (!callback(block)) {\n          return false;\n        }\n\n        const children = reverse\n          ? block.children.slice().reverse()\n          : block.children;\n\n        if (!traverseBlockArray(children)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    traverseBlockArray(blocks);\n  }\n\n  /**\n   * Executes a callback whenever the editor's contents change.\n   * @param callback The callback to execute.\n   */\n  public onEditorContentChange(callback: () => void) {\n    this._tiptapEditor.on(\"update\", callback);\n  }\n\n  /**\n   * Gets a snapshot of the current text cursor position.\n   * @returns A snapshot of the current text cursor position.\n   */\n  public getTextCursorPosition(): TextCursorPosition<BSchema> {\n    const { node, depth, startPos, endPos } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    // Index of the current blockContainer node relative to its parent blockGroup.\n    const nodeIndex = this._tiptapEditor.state.doc\n      .resolve(endPos)\n      .index(depth - 1);\n    // Number of the parent blockGroup's child blockContainer nodes.\n    const numNodes = this._tiptapEditor.state.doc\n      .resolve(endPos + 1)\n      .node().childCount;\n\n    // Gets previous blockContainer node at the same nesting level, if the current node isn't the first child.\n    let prevNode: Node | undefined = undefined;\n    if (nodeIndex > 0) {\n      prevNode = this._tiptapEditor.state.doc.resolve(startPos - 2).node();\n    }\n\n    // Gets next blockContainer node at the same nesting level, if the current node isn't the last child.\n    let nextNode: Node | undefined = undefined;\n    if (nodeIndex < numNodes - 1) {\n      nextNode = this._tiptapEditor.state.doc.resolve(endPos + 2).node();\n    }\n\n    return {\n      block: nodeToBlock(node, this.schema, this.blockCache),\n      prevBlock:\n        prevNode === undefined\n          ? undefined\n          : nodeToBlock(prevNode, this.schema, this.blockCache),\n      nextBlock:\n        nextNode === undefined\n          ? undefined\n          : nodeToBlock(nextNode, this.schema, this.blockCache),\n    };\n  }\n\n  /**\n   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could\n   * not be found.\n   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.\n   * @param placement Whether the text cursor should be placed at the start or end of the block.\n   */\n  public setTextCursorPosition(\n    targetBlock: BlockIdentifier,\n    placement: \"start\" | \"end\" = \"start\"\n  ) {\n    const id = typeof targetBlock === \"string\" ? targetBlock : targetBlock.id;\n\n    const { posBeforeNode } = getNodeById(id, this._tiptapEditor.state.doc);\n    const { startPos, contentNode } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      posBeforeNode + 2\n    )!;\n\n    if (placement === \"start\") {\n      this._tiptapEditor.commands.setTextSelection(startPos + 1);\n    } else {\n      this._tiptapEditor.commands.setTextSelection(\n        startPos + contentNode.nodeSize - 1\n      );\n    }\n  }\n\n  /**\n   * Gets a snapshot of the current selection.\n   */\n  public getSelection(): Selection<BSchema> | undefined {\n    if (\n      this._tiptapEditor.state.selection.from ===\n      this._tiptapEditor.state.selection.to\n    ) {\n      return undefined;\n    }\n\n    const blocks: Block<BSchema>[] = [];\n\n    this._tiptapEditor.state.doc.descendants((node, pos) => {\n      if (node.type.spec.group !== \"blockContent\") {\n        return true;\n      }\n\n      if (\n        pos + node.nodeSize < this._tiptapEditor.state.selection.from ||\n        pos > this._tiptapEditor.state.selection.to\n      ) {\n        return true;\n      }\n\n      blocks.push(\n        nodeToBlock(\n          this._tiptapEditor.state.doc.resolve(pos).node(),\n          this.schema,\n          this.blockCache\n        )\n      );\n\n      return false;\n    });\n\n    return { blocks: blocks };\n  }\n\n  /**\n   * Checks if the editor is currently editable, or if it's locked.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  public get isEditable(): boolean {\n    return this._tiptapEditor.isEditable;\n  }\n\n  /**\n   * Makes the editor editable or locks it, depending on the argument passed.\n   * @param editable True to make the editor editable, or false to lock it.\n   */\n  public set isEditable(editable: boolean) {\n    this._tiptapEditor.setEditable(editable);\n  }\n\n  /**\n   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an\n   * error if the reference block could not be found.\n   * @param blocksToInsert An array of partial blocks that should be inserted.\n   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.\n   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the\n   * `referenceBlock`. Inserts the blocks at the start of the existing block's children if \"nested\" is used.\n   */\n  public insertBlocks(\n    blocksToInsert: PartialBlock<BSchema>[],\n    referenceBlock: BlockIdentifier,\n    placement: \"before\" | \"after\" | \"nested\" = \"before\"\n  ): void {\n    insertBlocks(blocksToInsert, referenceBlock, placement, this._tiptapEditor);\n  }\n\n  /**\n   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be\n   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could\n   * not be found.\n   * @param blockToUpdate The block that should be updated.\n   * @param update A partial block which defines how the existing block should be changed.\n   */\n  public updateBlock(\n    blockToUpdate: BlockIdentifier,\n    update: PartialBlock<BSchema>\n  ) {\n    updateBlock(blockToUpdate, update, this._tiptapEditor);\n  }\n\n  /**\n   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.\n   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.\n   */\n  public removeBlocks(blocksToRemove: BlockIdentifier[]) {\n    removeBlocks(blocksToRemove, this._tiptapEditor);\n  }\n\n  /**\n   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or\n   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in\n   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.\n   * @param blocksToRemove An array of blocks that should be replaced.\n   * @param blocksToInsert An array of partial blocks to replace the old ones with.\n   */\n  public replaceBlocks(\n    blocksToRemove: BlockIdentifier[],\n    blocksToInsert: PartialBlock<BSchema>[]\n  ) {\n    replaceBlocks(blocksToRemove, blocksToInsert, this._tiptapEditor);\n  }\n\n  /**\n   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.\n   */\n  public getActiveStyles() {\n    const styles: Styles = {};\n    const marks = this._tiptapEditor.state.selection.$to.marks();\n\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    for (const mark of marks) {\n      if (toggleStyles.has(mark.type.name as ToggledStyle)) {\n        styles[mark.type.name as ToggledStyle] = true;\n      } else if (colorStyles.has(mark.type.name as ColorStyle)) {\n        styles[mark.type.name as ColorStyle] = mark.attrs.color;\n      }\n    }\n\n    return styles;\n  }\n\n  /**\n   * Adds styles to the currently selected content.\n   * @param styles The styles to add.\n   */\n  public addStyles(styles: Styles) {\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    this._tiptapEditor.view.focus();\n\n    for (const [style, value] of Object.entries(styles)) {\n      if (toggleStyles.has(style as ToggledStyle)) {\n        this._tiptapEditor.commands.setMark(style);\n      } else if (colorStyles.has(style as ColorStyle)) {\n        this._tiptapEditor.commands.setMark(style, { color: value });\n      }\n    }\n  }\n\n  /**\n   * Removes styles from the currently selected content.\n   * @param styles The styles to remove.\n   */\n  public removeStyles(styles: Styles) {\n    this._tiptapEditor.view.focus();\n\n    for (const style of Object.keys(styles)) {\n      this._tiptapEditor.commands.unsetMark(style);\n    }\n  }\n\n  /**\n   * Toggles styles on the currently selected content.\n   * @param styles The styles to toggle.\n   */\n  public toggleStyles(styles: Styles) {\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    this._tiptapEditor.view.focus();\n\n    for (const [style, value] of Object.entries(styles)) {\n      if (toggleStyles.has(style as ToggledStyle)) {\n        this._tiptapEditor.commands.toggleMark(style);\n      } else if (colorStyles.has(style as ColorStyle)) {\n        this._tiptapEditor.commands.toggleMark(style, { color: value });\n      }\n    }\n  }\n\n  /**\n   * Gets the currently selected text.\n   */\n  public getSelectedText() {\n    return this._tiptapEditor.state.doc.textBetween(\n      this._tiptapEditor.state.selection.from,\n      this._tiptapEditor.state.selection.to\n    );\n  }\n\n  /**\n   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.\n   */\n  public getSelectedLinkUrl() {\n    return this._tiptapEditor.getAttributes(\"link\").href as string | undefined;\n  }\n\n  /**\n   * Creates a new link to replace the selected content.\n   * @param url The link URL.\n   * @param text The text to display the link with.\n   */\n  public createLink(url: string, text?: string) {\n    if (url === \"\") {\n      return;\n    }\n\n    let { from, to } = this._tiptapEditor.state.selection;\n\n    if (!text) {\n      text = this._tiptapEditor.state.doc.textBetween(from, to);\n    }\n\n    const mark = this._tiptapEditor.schema.mark(\"link\", { href: url });\n\n    this._tiptapEditor.view.dispatch(\n      this._tiptapEditor.view.state.tr\n        .insertText(text, from, to)\n        .addMark(from, from + text.length, mark)\n    );\n  }\n\n  /**\n   * Checks if the block containing the text cursor can be nested.\n   */\n  public canNestBlock() {\n    const { startPos, depth } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    return this._tiptapEditor.state.doc.resolve(startPos).index(depth - 1) > 0;\n  }\n\n  /**\n   * Nests the block containing the text cursor into the block above it.\n   */\n  public nestBlock() {\n    this._tiptapEditor.commands.sinkListItem(\"blockContainer\");\n  }\n\n  /**\n   * Checks if the block containing the text cursor is nested.\n   */\n  public canUnnestBlock() {\n    const { depth } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    return depth > 2;\n  }\n\n  /**\n   * Lifts the block containing the text cursor out of its parent.\n   */\n  public unnestBlock() {\n    this._tiptapEditor.commands.liftListItem(\"blockContainer\");\n  }\n\n  /**\n   * Serializes blocks into an HTML string. To better conform to HTML standards, children of blocks which aren't list\n   * items are un-nested in the output HTML.\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  public async blocksToHTML(blocks: Block<BSchema>[]): Promise<string> {\n    return blocksToHTML(blocks, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and\n   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote\n   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.\n   * @param html The HTML string to parse blocks from.\n   * @returns The blocks parsed from the HTML string.\n   */\n  public async HTMLToBlocks(html: string): Promise<Block<BSchema>[]> {\n    return HTMLToBlocks(html, this.schema, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of\n   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.\n   * @param blocks An array of blocks that should be serialized into Markdown.\n   * @returns The blocks, serialized as a Markdown string.\n   */\n  public async blocksToMarkdown(blocks: Block<BSchema>[]): Promise<string> {\n    return blocksToMarkdown(blocks, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on\n   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it\n   * as text.\n   * @param markdown The Markdown string to parse blocks from.\n   * @returns The blocks parsed from the Markdown string.\n   */\n  public async markdownToBlocks(markdown: string): Promise<Block<BSchema>[]> {\n    return markdownToBlocks(markdown, this.schema, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Updates the user info for the current user that's shown to other collaborators.\n   */\n  public updateCollaborationUserInfo(user: { name: string; color: string }) {\n    if (!this.options.collaboration) {\n      throw new Error(\n        \"Cannot update collaboration user info when collaboration is disabled.\"\n      );\n    }\n    this._tiptapEditor.commands.updateUser(user);\n  }\n}\n"],"names":["camelToDataKebab","str","propsToAttributes","blockConfig","tiptapAttributes","name","spec","element","attributes","parse","render","HTMLAttributes","blockContent","attribute","value","contentDOM","createBlockSpec","createTipTapBlock","getPos","styles","editor","pos","blockIdentifier","block","rendered","config","Node","HeadingBlockContent","level","InputRule","state","chain","range","node","mergeAttributes","getBlockInfoFromPos","doc","posInBlock","$pos","maxDepth","depth","id","contentNode","contentType","numChildBlocks","startPos","endPos","handleEnter","selectionEmpty","commands","BulletListItemBlockContent","parent","PLUGIN_KEY","PluginKey","NumberedListIndexingPlugin","Plugin","_transactions","_oldState","newState","tr","modified","newIndex","isFirstBlockInDoc","blockInfo","prevBlockInfo","prevBlockContentNode","prevBlockIndex","NumberedListItemBlockContent","ParagraphBlockContent","defaultProps","defaultBlockSchema","removeDuplicates","array","by","seen","item","key","findDuplicates","items","filtered","el","index","UniqueID","Extension","v4","extension","view","types","attributeName","generateID","findChildren","dragSourceElement","transformPasted","transactions","oldState","docChanges","transaction","filterTransactions","_a","_b","transform","combineTransactionSteps","mapping","getChangedRanges","newRange","newNodes","findChildrenInRange","newIds","duplicatedNewIds","deleted","handleDragstart","event","slice","removeId","fragment","list","nodeWithoutId","Fragment","Slice","UnreachableCaseError","val","toggleStyles","colorStyles","styledTextToNodes","styledText","schema","marks","style","text","linkToNodes","link","linkMark","styledTextArrayToNodes","content","nodes","inlineContentToNodes","blockToNode","type","children","child","groupNode","contentNodeToInlineContent","currentContent","commentMark","mark","nodeToBlock","blockSchema","blockCache","cachedBlock","props","attr","blockSpec","propSchema","i","getNodeById","targetNode","posBeforeNode","insertBlocks","blocksToInsert","referenceBlock","placement","nodesToInsert","insertionPos","blockGroupNode","updateBlock","blockToUpdate","update","removeBlocks","blocksToRemove","idsOfBlocksToRemove","removedSize","oldDocSize","newDocSize","notFoundIds","replaceBlocks","removeUnderlines","removeUnderlinesHelper","tree","numChildElements","numElementsAdded","simplifyBlocks","options","listItemBlockTypes","simplifyBlocksHelper","activeList","blockContainer","blockGroup","isListItemBlock","listItemBlockType","numElementsRemoved","fromDom","listItemElement","blocksToHTML","blocks","htmlParentElement","serializer","DOMSerializer","htmlNode","unified","rehypeParse","rehypeStringify","HTMLToBlocks","html","parentNode","DOMParser","blocksToMarkdown","rehypeRemark","remarkGfm","remarkStringify","markdownToBlocks","markdown","htmlString","remarkParse","remarkRehype","BackgroundColorExtension","color","BackgroundColorMark","Mark","nodeAttributes","PreviousBlockTypePlugin","timeout","_editorView","_prevState","prev","currentTransactionOriginalOldBlockAttrs","oldNodes","oldNodesById","oldNode","oldContentNode","newContentNode","newAttrs","oldAttrs","pluginState","decorations","prevAttrs","decorationAttrs","nodeAttr","decoration","Decoration","DecorationSet","BlockAttributes","BlockContainer","attrs","HTMLAttr","dispatch","newBlock","childNodes","posBetweenBlocks","nextNodeIsBlock","prevNodeIsBlock","nextBlockInfo","childBlocksStart","childBlocksEnd","childBlocksRange","prevBlockEndPos","TextSelection","keepType","originalBlockContent","newBlockContent","newBlockInsertionPos","newBlockContentPos","selectionAtBlockStart","isParagraph","blockAtDocStart","blockEmpty","blockIndented","BlockGroup","customBlockSerializer","defaultSerializer","CustomBlockSerializerExtension","findBlock","findParentNode","getDefaultPluginState","SuggestionPluginView","pluginKey","selectItemCallback","suggestionsMenuFactory","__publicField","prevState","next","started","stopped","changed","decorationNode","triggerCharacterBoundingBox","createSuggestionPlugin","defaultTriggerCharacter","deactivate","_c","_d","menuIsActive","triggerCharacter","queryStartPos","keyboardHoveredItemIndex","active","decorationId","blockNode","SlashMenuPluginKey","createSlashMenuExtension","query","cmd","MultipleNodeSelection","Selection","$anchor","$head","_pos","from","to","selection","fromResult","toResult","serializeForClipboard","pv","dragImageElement","getDraggableBlockFromCoords","coords","blockPositionFromCoords","docView","desc","blockPositionsFromSelection","beforeFirstBlockPos","afterLastBlockPos","selectionStartInBlockContent","selectionEndInBlockContent","minDepth","startFirstBlockPos","endLastBlockPos","setDragImage","parentClone","getElementIndex","parentElement","targetElement","firstSelectedBlockIndex","lastSelectedBlockIndex","unsetDragImage","inheritedClasses","className","dragStart","e","editorBoundingBox","draggedBlockInSelection","multipleBlocksSelected","NodeSelection","dom","BlockMenuView","tiptapEditor","blockMenuFactory","horizontalPosAnchoredAtRoot","evt","_event","editorOuterBoundingBox","blockContentBoundingBox","createDraggableBlocksPlugin","createDraggableBlocksExtension","FormattingToolbarView","formattingToolbarFactory","empty","isEmptyTextBlock","isTextSelection","composing","isSame","ranges","shouldShow","isNodeSelection","posToDOMRect","selectionBoundingBox","createFormattingToolbarPlugin","createFormattingToolbarExtension","HyperlinkToolbarView","hyperlinkToolbarFactory","hoveredHyperlinkElement","posInHoveredHyperlinkMark","resolvedPosInHoveredHyperlinkMark","marksAtPos","getMarkRange","prevHyperlinkMark","url","hyperlinkBoundingBox","createHyperlinkToolbarPlugin","Hyperlink","Link","Placeholder","menuState","anchor","hasAnchor","isEmpty","classes","SuggestionItem","match","BaseSlashMenuItem","execute","aliases","alias","insertOrUpdateBlock","currentBlock","defaultSlashMenuItems","TextAlignmentExtension","textAlignment","positionsBeforeSelectedContent","TextColorExtension","TextColorMark","TrailingNode","plugin","_","__","shouldInsertNodeAtEnd","endPosition","_state","lastNode","getBlockNoteExtensions","opts","ret","extensions","Gapcursor","blockStyles","HardBreak","Text","Bold","Code","Italic","Strike","Underline","Dropcursor","Collaboration","defaultRender","user","cursor","label","nonbreakingSpace1","nonbreakingSpace2","CollaborationCursor","History","HyperlinkMark","blockNoteTipTapOptions","BlockNoteEditor","newOptions","tiptapOptions","Editor","callback","reverse","traverseBlockArray","blockArray","nodeIndex","numNodes","prevNode","nextNode","targetBlock","editable"],"mappings":"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"}