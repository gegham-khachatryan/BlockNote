{"version":3,"file":"blocknote.umd.cjs","sources":["../src/extensions/Blocks/helpers/getBlockInfoFromPos.ts","../src/extensions/BackgroundColor/BackgroundColorExtension.ts","../src/extensions/BackgroundColor/BackgroundColorMark.ts","../src/shared/utils.ts","../src/extensions/Blocks/api/block.ts","../src/extensions/Blocks/nodes/BlockContent/HeadingBlockContent/HeadingBlockContent.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/ListItemKeyboardShortcuts.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/BulletListItemBlockContent/BulletListItemBlockContent.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListIndexingPlugin.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListItemBlockContent.ts","../src/extensions/Blocks/nodes/BlockContent/ParagraphBlockContent/ParagraphBlockContent.ts","../src/extensions/Blocks/api/defaultBlocks.ts","../src/extensions/UniqueID/UniqueID.ts","../src/api/nodeConversions/nodeConversions.ts","../src/extensions/Blocks/PreviousBlockTypePlugin.ts","../src/extensions/Blocks/nodes/BlockAttributes.ts","../src/extensions/Blocks/nodes/BlockContainer.ts","../src/extensions/Blocks/nodes/BlockGroup.ts","../src/extensions/Blocks/index.ts","../src/extensions/Blocks/api/serialization.ts","../src/shared/EventEmitter.ts","../src/extensions/Blocks/helpers/findBlock.ts","../src/shared/plugins/suggestion/SuggestionPlugin.ts","../src/extensions/SlashMenu/SlashMenuPlugin.ts","../src/extensions/Placeholder/PlaceholderExtension.ts","../src/extensions/TextAlignment/TextAlignmentExtension.ts","../src/extensions/TextColor/TextColorExtension.ts","../src/extensions/TextColor/TextColorMark.ts","../src/extensions/TrailingNode/TrailingNodeExtension.ts","../src/BlockNoteExtensions.ts","../src/api/util/nodeUtil.ts","../src/api/blockManipulation/blockManipulation.ts","../src/api/formatConversions/removeUnderlinesRehypePlugin.ts","../src/api/formatConversions/simplifyBlocksRehypePlugin.ts","../src/api/formatConversions/formatConversions.ts","../src/extensions/FormattingToolbar/FormattingToolbarPlugin.ts","../src/extensions/HyperlinkToolbar/HyperlinkToolbarPlugin.ts","../src/extensions/SideMenu/MultipleNodeSelection.ts","../src/extensions/SideMenu/SideMenuPlugin.ts","../src/extensions/SlashMenu/defaultSlashMenuItems.ts","../src/BlockNoteEditor.ts"],"sourcesContent":["import { Node, NodeType } from \"prosemirror-model\";\n\nexport type BlockInfoWithoutPositions = {\n  id: string;\n  node: Node;\n  contentNode: Node;\n  contentType: NodeType;\n  numChildBlocks: number;\n};\n\nexport type BlockInfo = BlockInfoWithoutPositions & {\n  startPos: number;\n  endPos: number;\n  depth: number;\n};\n\n/**\n * Helper function for `getBlockInfoFromPos`, returns information regarding\n * provided blockContainer node.\n * @param blockContainer The blockContainer node to retrieve info for.\n */\nexport function getBlockInfo(blockContainer: Node): BlockInfoWithoutPositions {\n  const id = blockContainer.attrs[\"id\"];\n  const contentNode = blockContainer.firstChild!;\n  const contentType = contentNode.type;\n  const numChildBlocks =\n    blockContainer.childCount === 2 ? blockContainer.lastChild!.childCount : 0;\n\n  return {\n    id,\n    node: blockContainer,\n    contentNode,\n    contentType,\n    numChildBlocks,\n  };\n}\n\n/**\n * Retrieves information regarding the nearest blockContainer node in a\n * ProseMirror doc, relative to a position.\n * @param doc The ProseMirror doc.\n * @param pos An integer position.\n * @returns A BlockInfo object for the nearest blockContainer node.\n */\nexport function getBlockInfoFromPos(doc: Node, pos: number): BlockInfo {\n  // If the position is outside the outer block group, we need to move it to the\n  // nearest block. This happens when the collaboration plugin is active, where\n  // the selection is placed at the very end of the doc.\n  const outerBlockGroupStartPos = 1;\n  const outerBlockGroupEndPos = doc.nodeSize - 2;\n  if (pos <= outerBlockGroupStartPos) {\n    pos = outerBlockGroupStartPos + 1;\n\n    while (\n      doc.resolve(pos).parent.type.name !== \"blockContainer\" &&\n      pos < outerBlockGroupEndPos\n    ) {\n      pos++;\n    }\n  } else if (pos >= outerBlockGroupEndPos) {\n    pos = outerBlockGroupEndPos - 1;\n\n    while (\n      doc.resolve(pos).parent.type.name !== \"blockContainer\" &&\n      pos > outerBlockGroupStartPos\n    ) {\n      pos--;\n    }\n  }\n\n  // This gets triggered when a node selection on a block is active, i.e. when\n  // you drag and drop a block.\n  if (doc.resolve(pos).parent.type.name === \"blockGroup\") {\n    pos++;\n  }\n\n  const $pos = doc.resolve(pos);\n\n  const maxDepth = $pos.depth;\n  let node = $pos.node(maxDepth);\n  let depth = maxDepth;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (depth < 0) {\n      throw new Error(\n        \"Could not find blockContainer node. This can only happen if the underlying BlockNote schema has been edited.\"\n      );\n    }\n\n    if (node.type.name === \"blockContainer\") {\n      break;\n    }\n\n    depth -= 1;\n    node = $pos.node(depth);\n  }\n\n  const { id, contentNode, contentType, numChildBlocks } = getBlockInfo(node);\n\n  const startPos = $pos.start(depth);\n  const endPos = $pos.end(depth);\n\n  return {\n    id,\n    node,\n    contentNode,\n    contentType,\n    numChildBlocks,\n    startPos,\n    endPos,\n    depth,\n  };\n}\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    blockBackgroundColor: {\n      setBlockBackgroundColor: (\n        posInBlock: number,\n        color: string\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const BackgroundColorExtension = Extension.create({\n  name: \"blockBackgroundColor\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          backgroundColor: {\n            default: \"default\",\n            parseHTML: (element) =>\n              element.hasAttribute(\"data-background-color\")\n                ? element.getAttribute(\"data-background-color\")\n                : \"default\",\n            renderHTML: (attributes) =>\n              attributes.backgroundColor !== \"default\" && {\n                \"data-background-color\": attributes.backgroundColor,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setBlockBackgroundColor:\n        (posInBlock, color) =>\n        ({ state, view }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          state.tr.setNodeAttribute(\n            blockInfo.startPos - 1,\n            \"backgroundColor\",\n            color\n          );\n\n          view.focus();\n\n          return true;\n        },\n    };\n  },\n});\n","import { Mark } from \"@tiptap/core\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    backgroundColor: {\n      setBackgroundColor: (color: string) => ReturnType;\n    };\n  }\n}\n\nexport const BackgroundColorMark = Mark.create({\n  name: \"backgroundColor\",\n\n  addAttributes() {\n    return {\n      color: {\n        default: undefined,\n        parseHTML: (element) => element.getAttribute(\"data-background-color\"),\n        renderHTML: (attributes) => ({\n          \"data-background-color\": attributes.color,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.hasAttribute(\"data-background-color\")) {\n            return { color: element.getAttribute(\"data-background-color\") };\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"span\", HTMLAttributes, 0];\n  },\n\n  addCommands() {\n    return {\n      setBackgroundColor:\n        (color) =>\n        ({ commands }) => {\n          if (color !== \"default\") {\n            return commands.setMark(this.name, { color: color });\n          }\n\n          return commands.unsetMark(this.name);\n        },\n    };\n  },\n});\n","export const isAppleOS = () =>\n  /Mac/.test(navigator.platform) ||\n  (/AppleWebKit/.test(navigator.userAgent) &&\n    /Mobile\\/\\w+/.test(navigator.userAgent));\n\nexport function formatKeyboardShortcut(shortcut: string) {\n  if (isAppleOS()) {\n    return shortcut.replace(\"Mod\", \"âŒ˜\");\n  } else {\n    return shortcut.replace(\"Mod\", \"Ctrl\");\n  }\n}\n\nexport function mergeCSSClasses(...classes: string[]) {\n  return classes.filter((c) => c).join(\" \");\n}\n\nexport class UnreachableCaseError extends Error {\n  constructor(val: never) {\n    super(`Unreachable case: ${val}`);\n  }\n}\n","import { Attribute, Node } from \"@tiptap/core\";\nimport { BlockNoteDOMAttributes, BlockNoteEditor } from \"../../..\";\nimport styles from \"../nodes/Block.module.css\";\nimport {\n  BlockConfig,\n  BlockSchema,\n  BlockSpec,\n  PropSchema,\n  TipTapNode,\n  TipTapNodeConfig,\n} from \"./blockTypes\";\nimport { mergeCSSClasses } from \"../../../shared/utils\";\n\nexport function camelToDataKebab(str: string): string {\n  return \"data-\" + str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\n// Function that uses the 'propSchema' of a blockConfig to create a TipTap\n// node's `addAttributes` property.\nexport function propsToAttributes<\n  BType extends string,\n  PSchema extends PropSchema,\n  ContainsInlineContent extends boolean,\n  BSchema extends BlockSchema\n>(\n  blockConfig: Omit<\n    BlockConfig<BType, PSchema, ContainsInlineContent, BSchema>,\n    \"render\"\n  >\n) {\n  const tiptapAttributes: Record<string, Attribute> = {};\n\n  Object.entries(blockConfig.propSchema).forEach(([name, spec]) => {\n    tiptapAttributes[name] = {\n      default: spec.default,\n      keepOnSplit: true,\n      // Props are displayed in kebab-case as HTML attributes. If a prop's\n      // value is the same as its default, we don't display an HTML\n      // attribute for it.\n      parseHTML: (element) => element.getAttribute(camelToDataKebab(name)),\n      renderHTML: (attributes) =>\n        attributes[name] !== spec.default\n          ? {\n              [camelToDataKebab(name)]: attributes[name],\n            }\n          : {},\n    };\n  });\n\n  return tiptapAttributes;\n}\n\n// Function that uses the 'parse' function of a blockConfig to create a\n// TipTap node's `parseHTML` property. This is only used for parsing content\n// from the clipboard.\nexport function parse<\n  BType extends string,\n  PSchema extends PropSchema,\n  ContainsInlineContent extends boolean,\n  BSchema extends BlockSchema\n>(\n  blockConfig: Omit<\n    BlockConfig<BType, PSchema, ContainsInlineContent, BSchema>,\n    \"render\"\n  >\n) {\n  return [\n    {\n      tag: \"div[data-content-type=\" + blockConfig.type + \"]\",\n    },\n  ];\n}\n\n// Function that uses the 'render' function of a blockConfig to create a\n// TipTap node's `renderHTML` property. Since custom blocks use node views,\n// this is only used for serializing content to the clipboard.\nexport function render<\n  BType extends string,\n  PSchema extends PropSchema,\n  ContainsInlineContent extends boolean,\n  BSchema extends BlockSchema\n>(\n  blockConfig: Omit<\n    BlockConfig<BType, PSchema, ContainsInlineContent, BSchema>,\n    \"render\"\n  >,\n  HTMLAttributes: Record<string, any>\n) {\n  // Create blockContent element\n  const blockContent = document.createElement(\"div\");\n  // Add blockContent HTML attribute\n  blockContent.setAttribute(\"data-content-type\", blockConfig.type);\n  // Add props as HTML attributes in kebab-case with \"data-\" prefix\n  for (const [attribute, value] of Object.entries(HTMLAttributes)) {\n    blockContent.setAttribute(attribute, value);\n  }\n\n  // TODO: This only works for content copied within BlockNote.\n  // Creates contentDOM element to serialize inline content into.\n  let contentDOM: HTMLDivElement | undefined;\n  if (blockConfig.containsInlineContent) {\n    contentDOM = document.createElement(\"div\");\n    blockContent.appendChild(contentDOM);\n  } else {\n    contentDOM = undefined;\n  }\n\n  return contentDOM !== undefined\n    ? {\n        dom: blockContent,\n        contentDOM: contentDOM,\n      }\n    : {\n        dom: blockContent,\n      };\n}\n\n// A function to create custom block for API consumers\n// we want to hide the tiptap node from API consumers and provide a simpler API surface instead\nexport function createBlockSpec<\n  BType extends string,\n  PSchema extends PropSchema,\n  ContainsInlineContent extends boolean,\n  BSchema extends BlockSchema\n>(\n  blockConfig: BlockConfig<BType, PSchema, ContainsInlineContent, BSchema>\n): BlockSpec<BType, PSchema> {\n  const node = createTipTapBlock<\n    BType,\n    {\n      editor: BlockNoteEditor<BSchema>;\n      domAttributes?: BlockNoteDOMAttributes;\n    }\n  >({\n    name: blockConfig.type,\n    content: blockConfig.containsInlineContent ? \"inline*\" : \"\",\n    selectable: blockConfig.containsInlineContent,\n\n    addAttributes() {\n      return propsToAttributes(blockConfig);\n    },\n\n    parseHTML() {\n      return parse(blockConfig);\n    },\n\n    renderHTML({ HTMLAttributes }) {\n      return render(blockConfig, HTMLAttributes);\n    },\n\n    addNodeView() {\n      return ({ HTMLAttributes, getPos }) => {\n        // Create blockContent element\n        const blockContent = document.createElement(\"div\");\n        // Add custom HTML attributes\n        const blockContentDOMAttributes =\n          this.options.domAttributes?.blockContent || {};\n        for (const [attribute, value] of Object.entries(\n          blockContentDOMAttributes\n        )) {\n          if (attribute !== \"class\") {\n            blockContent.setAttribute(attribute, value);\n          }\n        }\n        // Set blockContent & custom classes\n        blockContent.className = mergeCSSClasses(\n          styles.blockContent,\n          blockContentDOMAttributes.class\n        );\n        // Add blockContent HTML attribute\n        blockContent.setAttribute(\"data-content-type\", blockConfig.type);\n        // Add props as HTML attributes in kebab-case with \"data-\" prefix\n        for (const [attribute, value] of Object.entries(HTMLAttributes)) {\n          blockContent.setAttribute(attribute, value);\n        }\n\n        // Gets BlockNote editor instance\n        const editor = this.options.editor! as BlockNoteEditor<\n          BSchema & { [k in BType]: BlockSpec<BType, PSchema> }\n        >;\n        // Gets position of the node\n        if (typeof getPos === \"boolean\") {\n          throw new Error(\n            \"Cannot find node position as getPos is a boolean, not a function.\"\n          );\n        }\n        const pos = getPos();\n        // Gets TipTap editor instance\n        const tipTapEditor = editor._tiptapEditor;\n        // Gets parent blockContainer node\n        const blockContainer = tipTapEditor.state.doc.resolve(pos!).node();\n        // Gets block identifier\n        const blockIdentifier = blockContainer.attrs.id;\n\n        // Get the block\n        const block = editor.getBlock(blockIdentifier)!;\n        if (block.type !== blockConfig.type) {\n          throw new Error(\"Block type does not match\");\n        }\n\n        // Render elements\n        const rendered = blockConfig.render(block as any, editor);\n        // Add HTML attributes to contentDOM\n        if (\"contentDOM\" in rendered) {\n          const inlineContentDOMAttributes =\n            this.options.domAttributes?.inlineContent || {};\n          // Add custom HTML attributes\n          for (const [attribute, value] of Object.entries(\n            inlineContentDOMAttributes\n          )) {\n            if (attribute !== \"class\") {\n              rendered.contentDOM.setAttribute(attribute, value);\n            }\n          }\n          // Merge existing classes with inlineContent & custom classes\n          rendered.contentDOM.className = mergeCSSClasses(\n            rendered.contentDOM.className,\n            styles.inlineContent,\n            inlineContentDOMAttributes.class\n          );\n        }\n        // Add elements to blockContent\n        blockContent.appendChild(rendered.dom);\n\n        return \"contentDOM\" in rendered\n          ? {\n              dom: blockContent,\n              contentDOM: rendered.contentDOM,\n            }\n          : {\n              dom: blockContent,\n            };\n      };\n    },\n  });\n\n  return {\n    node: node as TipTapNode<BType>,\n    propSchema: blockConfig.propSchema,\n  };\n}\n\nexport function createTipTapBlock<\n  Type extends string,\n  Options extends {\n    domAttributes?: BlockNoteDOMAttributes;\n  } = {\n    domAttributes?: BlockNoteDOMAttributes;\n  },\n  Storage = any\n>(\n  config: TipTapNodeConfig<Type, Options, Storage>\n): TipTapNode<Type, Options, Storage> {\n  // Type cast is needed as Node.name is mutable, though there is basically no\n  // reason to change it after creation. Alternative is to wrap Node in a new\n  // class, which I don't think is worth it since we'd only be changing 1\n  // attribute to be read only.\n  return Node.create<Options, Storage>({\n    ...config,\n    group: \"blockContent\",\n  }) as TipTapNode<Type, Options, Storage>;\n}\n","import { InputRule, mergeAttributes } from \"@tiptap/core\";\nimport { createTipTapBlock } from \"../../../api/block\";\nimport styles from \"../../Block.module.css\";\nimport { mergeCSSClasses } from \"../../../../../shared/utils\";\n\nexport const HeadingBlockContent = createTipTapBlock<\"heading\">({\n  name: \"heading\",\n  content: \"inline*\",\n\n  addAttributes() {\n    return {\n      level: {\n        default: \"1\",\n        // instead of \"level\" attributes, use \"data-level\"\n        parseHTML: (element) => element.getAttribute(\"data-level\"),\n        renderHTML: (attributes) => {\n          return {\n            \"data-level\": attributes.level,\n          };\n        },\n      },\n    };\n  },\n\n  addInputRules() {\n    return [\n      ...[\"1\", \"2\", \"3\"].map((level) => {\n        // Creates a heading of appropriate level when starting with \"#\", \"##\", or \"###\".\n        return new InputRule({\n          find: new RegExp(`^(#{${parseInt(level)}})\\\\s$`),\n          handler: ({ state, chain, range }) => {\n            chain()\n              .BNUpdateBlock(state.selection.from, {\n                type: \"heading\",\n                props: {\n                  level: level as \"1\" | \"2\" | \"3\",\n                },\n              })\n              // Removes the \"#\" character(s) used to set the heading.\n              .deleteRange({ from: range.from, to: range.to });\n          },\n        });\n      }),\n    ];\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"h1\",\n        attrs: { level: \"1\" },\n        node: \"heading\",\n      },\n      {\n        tag: \"h2\",\n        attrs: { level: \"2\" },\n        node: \"heading\",\n      },\n      {\n        tag: \"h3\",\n        attrs: { level: \"3\" },\n        node: \"heading\",\n      },\n    ];\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const blockContentDOMAttributes =\n      this.options.domAttributes?.blockContent || {};\n    const inlineContentDOMAttributes =\n      this.options.domAttributes?.inlineContent || {};\n\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: mergeCSSClasses(\n          styles.blockContent,\n          blockContentDOMAttributes.class\n        ),\n        \"data-content-type\": this.name,\n      }),\n      [\n        \"h\" + node.attrs.level,\n        {\n          class: mergeCSSClasses(\n            styles.inlineContent,\n            inlineContentDOMAttributes.class\n          ),\n        },\n        0,\n      ],\n    ];\n  },\n});\n","import { Editor } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../../../helpers/getBlockInfoFromPos\";\n\nexport const handleEnter = (editor: Editor) => {\n  const { node, contentType } = getBlockInfoFromPos(\n    editor.state.doc,\n    editor.state.selection.from\n  )!;\n\n  const selectionEmpty =\n    editor.state.selection.anchor === editor.state.selection.head;\n\n  if (!contentType.name.endsWith(\"ListItem\") || !selectionEmpty) {\n    return false;\n  }\n\n  return editor.commands.first(({ state, chain, commands }) => [\n    () =>\n      // Changes list item block to a text block if the content is empty.\n      commands.command(() => {\n        if (node.textContent.length === 0) {\n          return commands.BNUpdateBlock(state.selection.from, {\n            type: \"paragraph\",\n            props: {},\n          });\n        }\n\n        return false;\n      }),\n\n    () =>\n      // Splits the current block, moving content inside that's after the cursor to a new block of the same type\n      // below.\n      commands.command(() => {\n        if (node.textContent.length > 0) {\n          chain()\n            .deleteSelection()\n            .BNSplitBlock(state.selection.from, true)\n            .run();\n\n          return true;\n        }\n\n        return false;\n      }),\n  ]);\n};\n","import { InputRule, mergeAttributes } from \"@tiptap/core\";\nimport { createTipTapBlock } from \"../../../../api/block\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts\";\nimport styles from \"../../../Block.module.css\";\nimport { mergeCSSClasses } from \"../../../../../../shared/utils\";\n\nexport const BulletListItemBlockContent = createTipTapBlock<\"bulletListItem\">({\n  name: \"bulletListItem\",\n  content: \"inline*\",\n\n  addInputRules() {\n    return [\n      // Creates an unordered list when starting with \"-\", \"+\", or \"*\".\n      new InputRule({\n        find: new RegExp(`^[-+*]\\\\s$`),\n        handler: ({ state, chain, range }) => {\n          chain()\n            .BNUpdateBlock(state.selection.from, {\n              type: \"bulletListItem\",\n              props: {},\n            })\n            // Removes the \"-\", \"+\", or \"*\" character used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => handleEnter(this.editor),\n    };\n  },\n\n  parseHTML() {\n    return [\n      // Case for regular HTML list structure.\n      {\n        tag: \"li\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.tagName === \"UL\") {\n            return {};\n          }\n\n          return false;\n        },\n        node: \"bulletListItem\",\n      },\n      // Case for BlockNote list structure.\n      {\n        tag: \"p\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.getAttribute(\"data-content-type\") === \"bulletListItem\") {\n            return {};\n          }\n\n          return false;\n        },\n        priority: 300,\n        node: \"bulletListItem\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const blockContentDOMAttributes =\n      this.options.domAttributes?.blockContent || {};\n    const inlineContentDOMAttributes =\n      this.options.domAttributes?.inlineContent || {};\n\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: mergeCSSClasses(\n          styles.blockContent,\n          blockContentDOMAttributes.class\n        ),\n        \"data-content-type\": this.name,\n      }),\n      [\n        \"p\",\n        {\n          class: mergeCSSClasses(\n            styles.inlineContent,\n            inlineContentDOMAttributes.class\n          ),\n        },\n        0,\n      ],\n    ];\n  },\n});\n","import { Plugin, PluginKey } from \"prosemirror-state\";\nimport { getBlockInfoFromPos } from \"../../../../helpers/getBlockInfoFromPos\";\n\n// ProseMirror Plugin which automatically assigns indices to ordered list items per nesting level.\nconst PLUGIN_KEY = new PluginKey(`numbered-list-indexing`);\nexport const NumberedListIndexingPlugin = () => {\n  return new Plugin({\n    key: PLUGIN_KEY,\n    appendTransaction: (_transactions, _oldState, newState) => {\n      const tr = newState.tr;\n      tr.setMeta(\"numberedListIndexing\", true);\n\n      let modified = false;\n\n      // Traverses each node the doc using DFS, so blocks which are on the same nesting level will be traversed in the\n      // same order they appear. This means the index of each list item block can be calculated by incrementing the\n      // index of the previous list item block.\n      newState.doc.descendants((node, pos) => {\n        if (\n          node.type.name === \"blockContainer\" &&\n          node.firstChild!.type.name === \"numberedListItem\"\n        ) {\n          let newIndex = \"1\";\n          const isFirstBlockInDoc = pos === 1;\n\n          const blockInfo = getBlockInfoFromPos(tr.doc, pos + 1)!;\n          if (blockInfo === undefined) {\n            return;\n          }\n\n          // Checks if this block is the start of a new ordered list, i.e. if it's the first block in the document, the\n          // first block in its nesting level, or the previous block is not an ordered list item.\n          if (!isFirstBlockInDoc) {\n            const prevBlockInfo = getBlockInfoFromPos(tr.doc, pos - 2)!;\n            if (prevBlockInfo === undefined) {\n              return;\n            }\n\n            const isFirstBlockInNestingLevel =\n              blockInfo.depth !== prevBlockInfo.depth;\n\n            if (!isFirstBlockInNestingLevel) {\n              const prevBlockContentNode = prevBlockInfo.contentNode;\n              const prevBlockContentType = prevBlockInfo.contentType;\n\n              const isPrevBlockOrderedListItem =\n                prevBlockContentType.name === \"numberedListItem\";\n\n              if (isPrevBlockOrderedListItem) {\n                const prevBlockIndex = prevBlockContentNode.attrs[\"index\"];\n\n                newIndex = (parseInt(prevBlockIndex) + 1).toString();\n              }\n            }\n          }\n\n          const contentNode = blockInfo.contentNode;\n          const index = contentNode.attrs[\"index\"];\n\n          if (index !== newIndex) {\n            modified = true;\n\n            tr.setNodeMarkup(pos + 1, undefined, {\n              index: newIndex,\n            });\n          }\n        }\n      });\n\n      return modified ? tr : null;\n    },\n  });\n};\n","import { InputRule, mergeAttributes } from \"@tiptap/core\";\nimport { createTipTapBlock } from \"../../../../api/block\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts\";\nimport { NumberedListIndexingPlugin } from \"./NumberedListIndexingPlugin\";\nimport styles from \"../../../Block.module.css\";\nimport { mergeCSSClasses } from \"../../../../../../shared/utils\";\n\nexport const NumberedListItemBlockContent =\n  createTipTapBlock<\"numberedListItem\">({\n    name: \"numberedListItem\",\n    content: \"inline*\",\n\n    addAttributes() {\n      return {\n        index: {\n          default: null,\n          parseHTML: (element) => element.getAttribute(\"data-index\"),\n          renderHTML: (attributes) => {\n            return {\n              \"data-index\": attributes.index,\n            };\n          },\n        },\n      };\n    },\n\n    addInputRules() {\n      return [\n        // Creates an ordered list when starting with \"1.\".\n        new InputRule({\n          find: new RegExp(`^1\\\\.\\\\s$`),\n          handler: ({ state, chain, range }) => {\n            chain()\n              .BNUpdateBlock(state.selection.from, {\n                type: \"numberedListItem\",\n                props: {},\n              })\n              // Removes the \"1.\" characters used to set the list.\n              .deleteRange({ from: range.from, to: range.to });\n          },\n        }),\n      ];\n    },\n\n    addKeyboardShortcuts() {\n      return {\n        Enter: () => handleEnter(this.editor),\n      };\n    },\n\n    addProseMirrorPlugins() {\n      return [NumberedListIndexingPlugin()];\n    },\n\n    parseHTML() {\n      return [\n        // Case for regular HTML list structure.\n        // (e.g.: when pasting from other apps)\n        {\n          tag: \"li\",\n          getAttrs: (element) => {\n            if (typeof element === \"string\") {\n              return false;\n            }\n\n            const parent = element.parentElement;\n\n            if (parent === null) {\n              return false;\n            }\n\n            if (parent.tagName === \"OL\") {\n              return {};\n            }\n\n            return false;\n          },\n          node: \"numberedListItem\",\n        },\n        // Case for BlockNote list structure.\n        // (e.g.: when pasting from blocknote)\n        {\n          tag: \"p\",\n          getAttrs: (element) => {\n            if (typeof element === \"string\") {\n              return false;\n            }\n\n            const parent = element.parentElement;\n\n            if (parent === null) {\n              return false;\n            }\n\n            if (\n              parent.getAttribute(\"data-content-type\") === \"numberedListItem\"\n            ) {\n              return {};\n            }\n\n            return false;\n          },\n          priority: 300,\n          node: \"numberedListItem\",\n        },\n      ];\n    },\n\n    renderHTML({ HTMLAttributes }) {\n      const blockContentDOMAttributes =\n        this.options.domAttributes?.blockContent || {};\n      const inlineContentDOMAttributes =\n        this.options.domAttributes?.inlineContent || {};\n\n      return [\n        \"div\",\n        mergeAttributes(HTMLAttributes, {\n          class: mergeCSSClasses(\n            styles.blockContent,\n            blockContentDOMAttributes.class\n          ),\n          \"data-content-type\": this.name,\n        }),\n        // we use a <p> tag, because for <li> tags we'd need to add a <ul> parent for around siblings to be semantically correct,\n        // which would be quite cumbersome\n        [\n          \"p\",\n          {\n            class: mergeCSSClasses(\n              styles.inlineContent,\n              inlineContentDOMAttributes.class\n            ),\n          },\n          0,\n        ],\n      ];\n    },\n  });\n","import { mergeAttributes } from \"@tiptap/core\";\nimport { createTipTapBlock } from \"../../../api/block\";\nimport styles from \"../../Block.module.css\";\nimport { mergeCSSClasses } from \"../../../../../shared/utils\";\n\nexport const ParagraphBlockContent = createTipTapBlock({\n  name: \"paragraph\",\n  content: \"inline*\",\n\n  parseHTML() {\n    return [\n      {\n        tag: \"p\",\n        priority: 200,\n        node: \"paragraph\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const blockContentDOMAttributes =\n      this.options.domAttributes?.blockContent || {};\n    const inlineContentDOMAttributes =\n      this.options.domAttributes?.inlineContent || {};\n\n    return [\n      \"div\",\n      mergeAttributes(\n        {\n          ...blockContentDOMAttributes,\n          class: mergeCSSClasses(\n            styles.blockContent,\n            blockContentDOMAttributes.class\n          ),\n          \"data-content-type\": this.name,\n        },\n        HTMLAttributes\n      ),\n      [\n        \"p\",\n        {\n          ...inlineContentDOMAttributes,\n          class: mergeCSSClasses(\n            styles.inlineContent,\n            inlineContentDOMAttributes.class\n          ),\n        },\n        0,\n      ],\n    ];\n  },\n});\n","import { HeadingBlockContent } from \"../nodes/BlockContent/HeadingBlockContent/HeadingBlockContent\";\nimport { BulletListItemBlockContent } from \"../nodes/BlockContent/ListItemBlockContent/BulletListItemBlockContent/BulletListItemBlockContent\";\nimport { NumberedListItemBlockContent } from \"../nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListItemBlockContent\";\nimport { ParagraphBlockContent } from \"../nodes/BlockContent/ParagraphBlockContent/ParagraphBlockContent\";\nimport { PropSchema, TypesMatch } from \"./blockTypes\";\n\nexport const defaultProps = {\n  backgroundColor: {\n    default: \"transparent\" as const,\n  },\n  textColor: {\n    default: \"black\" as const, // TODO\n  },\n  textAlignment: {\n    default: \"left\" as const,\n    values: [\"left\", \"center\", \"right\", \"justify\"] as const,\n  },\n} satisfies PropSchema;\n\nexport type DefaultProps = typeof defaultProps;\n\nexport const defaultBlockSchema = {\n  paragraph: {\n    propSchema: defaultProps,\n    node: ParagraphBlockContent,\n  },\n  heading: {\n    propSchema: {\n      ...defaultProps,\n      level: { default: \"1\", values: [\"1\", \"2\", \"3\"] as const },\n    },\n    node: HeadingBlockContent,\n  },\n  bulletListItem: {\n    propSchema: defaultProps,\n    node: BulletListItemBlockContent,\n  },\n  numberedListItem: {\n    propSchema: defaultProps,\n    node: NumberedListItemBlockContent,\n  },\n} as const;\n\nexport type DefaultBlockSchema = TypesMatch<typeof defaultBlockSchema>;\n","import {\n  combineTransactionSteps,\n  Extension,\n  findChildrenInRange,\n  getChangedRanges,\n} from \"@tiptap/core\";\nimport { Fragment, Slice } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { v4 } from \"uuid\";\n\n/**\n * Code from Tiptap UniqueID extension (https://tiptap.dev/api/extensions/unique-id)\n * This extension is licensed under MIT (even though it's part of Tiptap pro).\n *\n * If you're a user of BlockNote, we still recommend to support their awesome work and become a sponsor!\n * https://tiptap.dev/pro\n */\n\n/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nfunction removeDuplicates(array: any, by = JSON.stringify) {\n  const seen: any = {};\n  return array.filter((item: any) => {\n    const key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true);\n  });\n}\n\n/**\n * Returns a list of duplicated items within an array.\n */\nfunction findDuplicates(items: any) {\n  const filtered = items.filter(\n    (el: any, index: number) => items.indexOf(el) !== index\n  );\n  const duplicates = removeDuplicates(filtered);\n  return duplicates;\n}\n\nconst UniqueID = Extension.create({\n  name: \"uniqueID\",\n  // weâ€™ll set a very high priority to make sure this runs first\n  // and is compatible with `appendTransaction` hooks of other extensions\n  priority: 10000,\n  addOptions() {\n    return {\n      attributeName: \"id\",\n      types: [],\n      generateID: () => {\n        // Use mock ID if tests are running.\n        if (typeof window !== \"undefined\" && (window as any).__TEST_OPTIONS) {\n          const testOptions = (window as any).__TEST_OPTIONS;\n          if (testOptions.mockID === undefined) {\n            testOptions.mockID = 0;\n          } else {\n            testOptions.mockID++;\n          }\n\n          return testOptions.mockID.toString() as string;\n        }\n\n        return v4();\n      },\n      filterTransaction: null,\n    };\n  },\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          [this.options.attributeName]: {\n            default: null,\n            parseHTML: (element) =>\n              element.getAttribute(`data-${this.options.attributeName}`),\n            renderHTML: (attributes) => ({\n              [`data-${this.options.attributeName}`]:\n                attributes[this.options.attributeName],\n            }),\n          },\n        },\n      },\n    ];\n  },\n  // check initial content for missing ids\n  // onCreate() {\n  //   // Donâ€™t do this when the collaboration extension is active\n  //   // because this may update the content, so Y.js tries to merge these changes.\n  //   // This leads to empty block nodes.\n  //   // See: https://github.com/ueberdosis/tiptap/issues/2400\n  //   if (\n  //     this.editor.extensionManager.extensions.find(\n  //       (extension) => extension.name === \"collaboration\"\n  //     )\n  //   ) {\n  //     return;\n  //   }\n  //   const { view, state } = this.editor;\n  //   const { tr, doc } = state;\n  //   const { types, attributeName, generateID } = this.options;\n  //   const nodesWithoutId = findChildren(doc, (node) => {\n  //     return (\n  //       types.includes(node.type.name) && node.attrs[attributeName] === null\n  //     );\n  //   });\n  //   nodesWithoutId.forEach(({ node, pos }) => {\n  //     tr.setNodeMarkup(pos, undefined, {\n  //       ...node.attrs,\n  //       [attributeName]: generateID(),\n  //     });\n  //   });\n  //   tr.setMeta(\"addToHistory\", false);\n  //   view.dispatch(tr);\n  // },\n  addProseMirrorPlugins() {\n    let dragSourceElement: any = null;\n    let transformPasted = false;\n    return [\n      new Plugin({\n        key: new PluginKey(\"uniqueID\"),\n        appendTransaction: (transactions, oldState, newState) => {\n          // console.log(\"appendTransaction\");\n          const docChanges =\n            transactions.some((transaction) => transaction.docChanged) &&\n            !oldState.doc.eq(newState.doc);\n          const filterTransactions =\n            this.options.filterTransaction &&\n            transactions.some((tr) => {\n              let _a, _b;\n              return !((_b = (_a = this.options).filterTransaction) === null ||\n              _b === void 0\n                ? void 0\n                : _b.call(_a, tr));\n            });\n          if (!docChanges || filterTransactions) {\n            return;\n          }\n          const { tr } = newState;\n          const { types, attributeName, generateID } = this.options;\n          const transform = combineTransactionSteps(\n            oldState.doc,\n            transactions as any\n          );\n          const { mapping } = transform;\n          // get changed ranges based on the old state\n          const changes = getChangedRanges(transform);\n\n          changes.forEach(({ newRange }) => {\n            const newNodes = findChildrenInRange(\n              newState.doc,\n              newRange,\n              (node) => {\n                return types.includes(node.type.name);\n              }\n            );\n            const newIds = newNodes\n              .map(({ node }) => node.attrs[attributeName])\n              .filter((id) => id !== null);\n            const duplicatedNewIds = findDuplicates(newIds);\n            newNodes.forEach(({ node, pos }) => {\n              let _a;\n              // instead of checking `node.attrs[attributeName]` directly\n              // we look at the current state of the node within `tr.doc`.\n              // this helps to prevent adding new ids to the same node\n              // if the node changed multiple times within one transaction\n              const id =\n                (_a = tr.doc.nodeAt(pos)) === null || _a === void 0\n                  ? void 0\n                  : _a.attrs[attributeName];\n              if (id === null) {\n                tr.setNodeMarkup(pos, undefined, {\n                  ...node.attrs,\n                  [attributeName]: generateID(),\n                });\n                return;\n              }\n              // check if the node doesnâ€™t exist in the old state\n              const { deleted } = mapping.invert().mapResult(pos);\n              const newNode = deleted && duplicatedNewIds.includes(id);\n              if (newNode) {\n                tr.setNodeMarkup(pos, undefined, {\n                  ...node.attrs,\n                  [attributeName]: generateID(),\n                });\n              }\n            });\n          });\n          if (!tr.steps.length) {\n            return;\n          }\n          return tr;\n        },\n        // we register a global drag handler to track the current drag source element\n        view(view) {\n          const handleDragstart = (event: any) => {\n            let _a;\n            dragSourceElement = (\n              (_a = view.dom.parentElement) === null || _a === void 0\n                ? void 0\n                : _a.contains(event.target)\n            )\n              ? view.dom.parentElement\n              : null;\n          };\n          window.addEventListener(\"dragstart\", handleDragstart);\n          return {\n            destroy() {\n              window.removeEventListener(\"dragstart\", handleDragstart);\n            },\n          };\n        },\n        props: {\n          // `handleDOMEvents` is called before `transformPasted`\n          // so we can do some checks before\n          handleDOMEvents: {\n            // only create new ids for dropped content while holding `alt`\n            // or content is dragged from another editor\n            drop: (view, event: any) => {\n              let _a;\n              if (\n                dragSourceElement !== view.dom.parentElement ||\n                ((_a = event.dataTransfer) === null || _a === void 0\n                  ? void 0\n                  : _a.effectAllowed) === \"copy\"\n              ) {\n                dragSourceElement = null;\n                transformPasted = true;\n              }\n              return false;\n            },\n            // always create new ids on pasted content\n            paste: () => {\n              transformPasted = true;\n              return false;\n            },\n          },\n          // weâ€™ll remove ids for every pasted node\n          // so we can create a new one within `appendTransaction`\n          transformPasted: (slice) => {\n            if (!transformPasted) {\n              return slice;\n            }\n            const { types, attributeName } = this.options;\n            const removeId = (fragment: any) => {\n              const list: any[] = [];\n              fragment.forEach((node: any) => {\n                // donâ€™t touch text nodes\n                if (node.isText) {\n                  list.push(node);\n                  return;\n                }\n                // check for any other child nodes\n                if (!types.includes(node.type.name)) {\n                  list.push(node.copy(removeId(node.content)));\n                  return;\n                }\n                // remove id\n                const nodeWithoutId = node.type.create(\n                  {\n                    ...node.attrs,\n                    [attributeName]: null,\n                  },\n                  removeId(node.content),\n                  node.marks\n                );\n                list.push(nodeWithoutId);\n              });\n              return Fragment.from(list);\n            };\n            // reset check\n            transformPasted = false;\n            return new Slice(\n              removeId(slice.content),\n              slice.openStart,\n              slice.openEnd\n            );\n          },\n        },\n      }),\n    ];\n  },\n});\n\nexport { UniqueID, UniqueID as default };\n//# sourceMappingURL=tiptap-extension-unique-id.esm.js.map\n","import { Mark } from \"@tiptap/pm/model\";\nimport { Node, Schema } from \"prosemirror-model\";\nimport {\n  Block,\n  BlockSchema,\n  PartialBlock,\n} from \"../../extensions/Blocks/api/blockTypes\";\n\nimport { defaultProps } from \"../../extensions/Blocks/api/defaultBlocks\";\nimport {\n  ColorStyle,\n  InlineContent,\n  PartialInlineContent,\n  PartialLink,\n  StyledText,\n  Styles,\n  ToggledStyle,\n} from \"../../extensions/Blocks/api/inlineContentTypes\";\nimport UniqueID from \"../../extensions/UniqueID/UniqueID\";\nimport { UnreachableCaseError } from \"../../shared/utils\";\nimport { getBlockInfo } from \"../../extensions/Blocks/helpers/getBlockInfoFromPos\";\n\nconst toggleStyles = new Set<ToggledStyle>([\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"strike\",\n  \"code\",\n]);\nconst colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n/**\n * Convert a StyledText inline element to a\n * prosemirror text node with the appropriate marks\n */\nfunction styledTextToNodes(styledText: StyledText, schema: Schema): Node[] {\n  const marks: Mark[] = [];\n\n  for (const [style, value] of Object.entries(styledText.styles)) {\n    if (toggleStyles.has(style as ToggledStyle)) {\n      marks.push(schema.mark(style));\n    } else if (colorStyles.has(style as ColorStyle)) {\n      marks.push(schema.mark(style, { color: value }));\n    }\n  }\n\n  return (\n    styledText.text\n      // Splits text & line breaks.\n      .split(/(\\n)/g)\n      // If the content ends with a line break, an empty string is added to the\n      // end, which this removes.\n      .filter((text) => text.length > 0)\n      // Converts text & line breaks to nodes.\n      .map((text) => {\n        if (text === \"\\n\") {\n          return schema.nodes[\"hardBreak\"].create();\n        } else {\n          return schema.text(text, marks);\n        }\n      })\n  );\n}\n\n/**\n * Converts a Link inline content element to\n * prosemirror text nodes with the appropriate marks\n */\nfunction linkToNodes(link: PartialLink, schema: Schema): Node[] {\n  const linkMark = schema.marks.link.create({\n    href: link.href,\n  });\n\n  return styledTextArrayToNodes(link.content, schema).map((node) => {\n    if (node.type.name === \"text\") {\n      return node.mark([...node.marks, linkMark]);\n    }\n\n    if (node.type.name === \"hardBreak\") {\n      return node;\n    }\n    throw new Error(\"unexpected node type\");\n  });\n}\n\n/**\n * Converts an array of StyledText inline content elements to\n * prosemirror text nodes with the appropriate marks\n */\nfunction styledTextArrayToNodes(\n  content: string | StyledText[],\n  schema: Schema\n): Node[] {\n  const nodes: Node[] = [];\n\n  if (typeof content === \"string\") {\n    nodes.push(\n      ...styledTextToNodes({ type: \"text\", text: content, styles: {} }, schema)\n    );\n    return nodes;\n  }\n\n  for (const styledText of content) {\n    nodes.push(...styledTextToNodes(styledText, schema));\n  }\n  return nodes;\n}\n\n/**\n * converts an array of inline content elements to prosemirror nodes\n */\nexport function inlineContentToNodes(\n  blockContent: PartialInlineContent[],\n  schema: Schema\n): Node[] {\n  const nodes: Node[] = [];\n\n  for (const content of blockContent) {\n    if (content.type === \"link\") {\n      nodes.push(...linkToNodes(content, schema));\n    } else if (content.type === \"text\") {\n      nodes.push(...styledTextArrayToNodes([content], schema));\n    } else {\n      throw new UnreachableCaseError(content);\n    }\n  }\n  return nodes;\n}\n\n/**\n * Converts a BlockNote block to a TipTap node.\n */\nexport function blockToNode<BSchema extends BlockSchema>(\n  block: PartialBlock<BSchema>,\n  schema: Schema\n) {\n  let id = block.id;\n\n  if (id === undefined) {\n    id = UniqueID.options.generateID();\n  }\n\n  let type = block.type;\n\n  if (type === undefined) {\n    type = \"paragraph\";\n  }\n\n  let contentNode: Node;\n\n  if (!block.content) {\n    contentNode = schema.nodes[type].create(block.props);\n  } else if (typeof block.content === \"string\") {\n    contentNode = schema.nodes[type].create(\n      block.props,\n      schema.text(block.content)\n    );\n  } else {\n    const nodes = inlineContentToNodes(block.content, schema);\n    contentNode = schema.nodes[type].create(block.props, nodes);\n  }\n\n  const children: Node[] = [];\n\n  if (block.children) {\n    for (const child of block.children) {\n      children.push(blockToNode(child, schema));\n    }\n  }\n\n  const groupNode = schema.nodes[\"blockGroup\"].create({}, children);\n\n  return schema.nodes[\"blockContainer\"].create(\n    {\n      id: id,\n      ...block.props,\n    },\n    children.length > 0 ? [contentNode, groupNode] : contentNode\n  );\n}\n\n/**\n * Converts an internal (prosemirror) content node to a BlockNote InlineContent array.\n */\nfunction contentNodeToInlineContent(contentNode: Node) {\n  const content: InlineContent[] = [];\n  let currentContent: InlineContent | undefined = undefined;\n\n  // Most of the logic below is for handling links because in ProseMirror links are marks\n  // while in BlockNote links are a type of inline content\n  contentNode.content.forEach((node) => {\n    // hardBreak nodes do not have an InlineContent equivalent, instead we\n    // add a newline to the previous node.\n    if (node.type.name === \"hardBreak\") {\n      if (currentContent) {\n        // Current content exists.\n        if (currentContent.type === \"text\") {\n          // Current content is text.\n          currentContent.text += \"\\n\";\n        } else if (currentContent.type === \"link\") {\n          // Current content is a link.\n          currentContent.content[currentContent.content.length - 1].text +=\n            \"\\n\";\n        }\n      } else {\n        // Current content does not exist.\n        currentContent = {\n          type: \"text\",\n          text: \"\\n\",\n          styles: {},\n        };\n      }\n\n      return;\n    }\n\n    const styles: Styles = {};\n    let linkMark: Mark | undefined;\n    let commentMark: Mark | undefined;\n\n    for (const mark of node.marks) {\n      if (mark.type.name === \"link\") {\n        linkMark = mark;\n      } else if (mark.type.name === \"comment\") {\n        commentMark = mark;\n      } else if (toggleStyles.has(mark.type.name as ToggledStyle)) {\n        styles[mark.type.name as ToggledStyle] = true;\n      } else if (colorStyles.has(mark.type.name as ColorStyle)) {\n        styles[mark.type.name as ColorStyle] = mark.attrs.color;\n      } else {\n        throw Error(\"Mark is of an unrecognized type: \" + mark.type.name);\n      }\n    }\n\n    // Parsing links and text.\n    // Current content exists.\n    if (currentContent) {\n      // Current content is text.\n      if (currentContent.type === \"text\") {\n        if (linkMark) {\n          // Node is a link (different type to current content).\n          content.push(currentContent);\n          currentContent = {\n            type: \"link\",\n            href: linkMark.attrs.href,\n            content: [\n              {\n                type: \"text\",\n                text: node.textContent,\n                styles,\n              },\n            ],\n          };\n        } else if (commentMark) {\n          content.push(currentContent);\n        } else {\n          // Node is text (same type as current content).\n          if (\n            JSON.stringify(currentContent.styles) === JSON.stringify(styles)\n          ) {\n            // Styles are the same.\n            currentContent.text += node.textContent;\n          } else {\n            // Styles are different.\n            content.push(currentContent);\n            currentContent = {\n              type: \"text\",\n              text: node.textContent,\n              styles,\n            };\n          }\n        }\n      } else if (currentContent.type === \"link\") {\n        // Current content is a link.\n        if (linkMark) {\n          // Node is a link (same type as current content).\n          // Link URLs are the same.\n          if (currentContent.href === linkMark.attrs.href) {\n            // Styles are the same.\n            if (\n              JSON.stringify(\n                currentContent.content[currentContent.content.length - 1].styles\n              ) === JSON.stringify(styles)\n            ) {\n              currentContent.content[currentContent.content.length - 1].text +=\n                node.textContent;\n            } else {\n              // Styles are different.\n              currentContent.content.push({\n                type: \"text\",\n                text: node.textContent,\n                styles,\n              });\n            }\n          } else {\n            // Link URLs are different.\n            content.push(currentContent);\n            currentContent = {\n              type: \"link\",\n              href: linkMark.attrs.href,\n              content: [\n                {\n                  type: \"text\",\n                  text: node.textContent,\n                  styles,\n                },\n              ],\n            };\n          }\n        } else {\n          // Node is text (different type to current content).\n          content.push(currentContent);\n          currentContent = {\n            type: \"text\",\n            text: node.textContent,\n            styles,\n          };\n        }\n      }\n    }\n    // Current content does not exist.\n    else {\n      // Node is text.\n      if (!linkMark) {\n        currentContent = {\n          type: \"text\",\n          text: node.textContent,\n          styles,\n        };\n      }\n      // Node is a link.\n      else {\n        currentContent = {\n          type: \"link\",\n          href: linkMark.attrs.href,\n          content: [\n            {\n              type: \"text\",\n              text: node.textContent,\n              styles,\n            },\n          ],\n        };\n      }\n    }\n  });\n\n  if (currentContent) {\n    content.push(currentContent);\n  }\n\n  return content;\n}\n\n/**\n * Convert a TipTap node to a BlockNote block.\n */\nexport function nodeToBlock<BSchema extends BlockSchema>(\n  node: Node,\n  blockSchema: BSchema,\n  blockCache?: WeakMap<Node, Block<BSchema>>\n): Block<BSchema> {\n  if (node.type.name !== \"blockContainer\") {\n    throw Error(\n      \"Node must be of type blockContainer, but is of type\" +\n        node.type.name +\n        \".\"\n    );\n  }\n\n  const cachedBlock = blockCache?.get(node);\n\n  if (cachedBlock) {\n    return cachedBlock;\n  }\n\n  const blockInfo = getBlockInfo(node);\n\n  let id = blockInfo.id;\n\n  // Only used for blocks converted from other formats.\n  if (id === null) {\n    id = UniqueID.options.generateID();\n  }\n\n  const props: any = {};\n  for (const [attr, value] of Object.entries({\n    ...node.attrs,\n    ...blockInfo.contentNode.attrs,\n  })) {\n    const blockSpec = blockSchema[blockInfo.contentType.name];\n    if (!blockSpec) {\n      throw Error(\n        \"Block is of an unrecognized type: \" + blockInfo.contentType.name\n      );\n    }\n\n    const propSchema = blockSpec.propSchema;\n\n    if (attr in propSchema) {\n      props[attr] = value;\n    }\n    // Block ids are stored as node attributes the same way props are, so we\n    // need to ensure we don't attempt to read block ids as props.\n\n    // the second check is for the backgroundColor & textColor props.\n    // Since we want them to be inherited by child blocks, we can't put them on the blockContent node,\n    // and instead have to put them on the blockContainer node.\n    // The blockContainer node is the same for all block types, but some custom blocks might not use backgroundColor & textColor,\n    // so these 2 props are technically unexpected but we shouldn't log a warning.\n    // (this is a bit hacky)\n    else if (attr !== \"id\" && !(attr in defaultProps)) {\n      console.warn(\"Block has an unrecognized attribute: \" + attr);\n    }\n  }\n\n  const content = contentNodeToInlineContent(blockInfo.contentNode);\n\n  const children: Block<BSchema>[] = [];\n  for (let i = 0; i < blockInfo.numChildBlocks; i++) {\n    children.push(\n      nodeToBlock(node.lastChild!.child(i), blockSchema, blockCache)\n    );\n  }\n\n  const block: Block<BSchema> = {\n    id,\n    type: blockInfo.contentType.name,\n    props,\n    content,\n    children,\n  };\n\n  blockCache?.set(node, block);\n\n  return block;\n}\n","import { findChildren } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\n\nconst PLUGIN_KEY = new PluginKey(`previous-blocks`);\n\nconst nodeAttributes: Record<string, string> = {\n  // Numbered List Items\n  index: \"index\",\n  // Headings\n  level: \"level\",\n  // All Blocks\n  type: \"type\",\n  depth: \"depth\",\n  \"depth-change\": \"depth-change\",\n};\n\n/**\n * This plugin tracks transformation of Block node attributes, so we can support CSS transitions.\n *\n * Problem it solves: ProseMirror recreates the DOM when transactions happen. So when a transaction changes a Node attribute,\n * it results in a completely new DOM element. This means CSS transitions don't work.\n *\n * Solution: When attributes change on a node, this plugin sets a data-* attribute with the \"previous\" value. This way we can still use CSS transitions. (See block.module.css)\n */\nexport const PreviousBlockTypePlugin = () => {\n  let timeout: any;\n  return new Plugin({\n    key: PLUGIN_KEY,\n    view(_editorView) {\n      return {\n        update: async (view, _prevState) => {\n          if (this.key?.getState(view.state).updatedBlocks.size > 0) {\n            // use setTimeout 0 to clear the decorations so that at least\n            // for one DOM-render the decorations have been applied\n            timeout = setTimeout(() => {\n              view.dispatch(\n                view.state.tr.setMeta(PLUGIN_KEY, { clearUpdate: true })\n              );\n            }, 0);\n          }\n        },\n        destroy: () => {\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n        },\n      };\n    },\n    state: {\n      init() {\n        return {\n          // Block attributes, by block ID, from just before the previous transaction.\n          prevTransactionOldBlockAttrs: {} as any,\n          // Block attributes, by block ID, from just before the current transaction.\n          currentTransactionOldBlockAttrs: {} as any,\n          // Set of IDs of blocks whose attributes changed from the current transaction.\n          updatedBlocks: new Set<string>(),\n        };\n      },\n\n      apply(transaction, prev, oldState, newState) {\n        prev.currentTransactionOldBlockAttrs = {};\n        prev.updatedBlocks.clear();\n\n        if (!transaction.docChanged || oldState.doc.eq(newState.doc)) {\n          return prev;\n        }\n\n        // TODO: Instead of iterating through the entire document, only check nodes affected by the transactions. Will\n        //  also probably require checking nodes affected by the previous transaction too.\n        // We didn't get this to work yet:\n        // const transform = combineTransactionSteps(oldState.doc, [transaction]);\n        // // const { mapping } = transform;\n        // const changes = getChangedRanges(transform);\n        //\n        // changes.forEach(({ oldRange, newRange }) => {\n        // const oldNodes = findChildrenInRange(\n        //   oldState.doc,\n        //   oldRange,\n        //   (node) => node.attrs.id\n        // );\n        //\n        // const newNodes = findChildrenInRange(\n        //   newState.doc,\n        //   newRange,\n        //   (node) => node.attrs.id\n        // );\n\n        const currentTransactionOriginalOldBlockAttrs = {} as any;\n\n        const oldNodes = findChildren(oldState.doc, (node) => node.attrs.id);\n        const oldNodesById = new Map(\n          oldNodes.map((node) => [node.node.attrs.id, node])\n        );\n        const newNodes = findChildren(newState.doc, (node) => node.attrs.id);\n\n        // Traverses all block containers in the new editor state.\n        for (const node of newNodes) {\n          const oldNode = oldNodesById.get(node.node.attrs.id);\n\n          const oldContentNode = oldNode?.node.firstChild;\n          const newContentNode = node.node.firstChild;\n\n          if (oldNode && oldContentNode && newContentNode) {\n            const newAttrs = {\n              index: newContentNode.attrs.index,\n              level: newContentNode.attrs.level,\n              type: newContentNode.type.name,\n              depth: newState.doc.resolve(node.pos).depth,\n            };\n\n            let oldAttrs = {\n              index: oldContentNode.attrs.index,\n              level: oldContentNode.attrs.level,\n              type: oldContentNode.type.name,\n              depth: oldState.doc.resolve(oldNode.pos).depth,\n            };\n\n            currentTransactionOriginalOldBlockAttrs[node.node.attrs.id] =\n              oldAttrs;\n\n            // Whenever a transaction is appended by the OrderedListItemIndexPlugin, it's given the metadata:\n            // { \"orderedListIndexing\": true }\n            // These appended transactions happen immediately after any transaction which causes ordered list item\n            // indices to require updating, including those which trigger animations. Therefore, these animations are\n            // immediately overridden when the PreviousBlockTypePlugin processes the appended transaction, despite only\n            // the listItemIndex attribute changing. To solve this, oldAttrs must be edited for transactions with the\n            // \"orderedListIndexing\" metadata, so the correct animation can be re-triggered.\n            if (transaction.getMeta(\"numberedListIndexing\")) {\n              // If the block existed before the transaction, gets the attributes from before the previous transaction\n              // (i.e. the transaction that caused list item indices to need updating).\n              if (node.node.attrs.id in prev.prevTransactionOldBlockAttrs) {\n                oldAttrs =\n                  prev.prevTransactionOldBlockAttrs[node.node.attrs.id];\n              }\n\n              // Stops list item indices themselves being animated (looks smoother), unless the block's content type is\n              // changing from a numbered list item to something else.\n              if (newAttrs.type === \"numberedListItem\") {\n                oldAttrs.index = newAttrs.index;\n              }\n            }\n\n            prev.currentTransactionOldBlockAttrs[node.node.attrs.id] = oldAttrs;\n\n            // TODO: faster deep equal?\n            if (JSON.stringify(oldAttrs) !== JSON.stringify(newAttrs)) {\n              (oldAttrs as any)[\"depth-change\"] =\n                oldAttrs.depth - newAttrs.depth;\n\n              // for debugging:\n              // console.log(\n              //   \"id:\",\n              //   node.node.attrs.id,\n              //   \"previousBlockTypePlugin changes detected, oldAttrs\",\n              //   oldAttrs,\n              //   \"new\",\n              //   newAttrs\n              // );\n\n              prev.updatedBlocks.add(node.node.attrs.id);\n            }\n          }\n        }\n\n        prev.prevTransactionOldBlockAttrs =\n          currentTransactionOriginalOldBlockAttrs;\n\n        return prev;\n      },\n    },\n    props: {\n      decorations(state) {\n        const pluginState = (this as Plugin).getState(state);\n        if (pluginState.updatedBlocks.size === 0) {\n          return undefined;\n        }\n\n        const decorations: Decoration[] = [];\n\n        state.doc.descendants((node, pos) => {\n          if (!node.attrs.id) {\n            return;\n          }\n\n          if (!pluginState.updatedBlocks.has(node.attrs.id)) {\n            return;\n          }\n\n          const prevAttrs =\n            pluginState.currentTransactionOldBlockAttrs[node.attrs.id];\n          const decorationAttrs: any = {};\n\n          for (const [nodeAttr, val] of Object.entries(prevAttrs)) {\n            decorationAttrs[\"data-prev-\" + nodeAttributes[nodeAttr]] =\n              val || \"none\";\n          }\n\n          // for debugging:\n          // console.log(\n          //   \"previousBlockTypePlugin committing decorations\",\n          //   decorationAttrs\n          // );\n\n          const decoration = Decoration.node(pos, pos + node.nodeSize, {\n            ...decorationAttrs,\n          });\n\n          decorations.push(decoration);\n        });\n\n        return DecorationSet.create(state.doc, decorations);\n      },\n    },\n  });\n};\n","// Object containing all possible block attributes.\nconst BlockAttributes: Record<string, string> = {\n  blockColor: \"data-block-color\",\n  blockStyle: \"data-block-style\",\n  id: \"data-id\",\n  depth: \"data-depth\",\n  depthChange: \"data-depth-change\",\n};\n\nexport default BlockAttributes;\n","import { mergeAttributes, Node } from \"@tiptap/core\";\nimport { Fragment, Node as PMNode, Slice } from \"prosemirror-model\";\nimport { TextSelection } from \"prosemirror-state\";\nimport {\n  blockToNode,\n  inlineContentToNodes,\n} from \"../../../api/nodeConversions/nodeConversions\";\n\nimport {\n  BlockNoteDOMAttributes,\n  BlockSchema,\n  PartialBlock,\n} from \"../api/blockTypes\";\nimport { getBlockInfoFromPos } from \"../helpers/getBlockInfoFromPos\";\nimport { PreviousBlockTypePlugin } from \"../PreviousBlockTypePlugin\";\nimport styles from \"./Block.module.css\";\nimport BlockAttributes from \"./BlockAttributes\";\nimport { mergeCSSClasses } from \"../../../shared/utils\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    block: {\n      BNCreateBlock: (pos: number) => ReturnType;\n      BNDeleteBlock: (posInBlock: number) => ReturnType;\n      BNMergeBlocks: (posBetweenBlocks: number) => ReturnType;\n      BNSplitBlock: (posInBlock: number, keepType: boolean) => ReturnType;\n      BNUpdateBlock: <BSchema extends BlockSchema>(\n        posInBlock: number,\n        block: PartialBlock<BSchema>\n      ) => ReturnType;\n      BNCreateOrUpdateBlock: <BSchema extends BlockSchema>(\n        posInBlock: number,\n        block: PartialBlock<BSchema>\n      ) => ReturnType;\n    };\n  }\n}\n\n/**\n * The main \"Block node\" documents consist of\n */\nexport const BlockContainer = Node.create<{\n  domAttributes?: BlockNoteDOMAttributes;\n}>({\n  name: \"blockContainer\",\n  group: \"blockContainer\",\n  // A block always contains content, and optionally a blockGroup which contains nested blocks\n  content: \"blockContent blockGroup?\",\n  // Ensures content-specific keyboard handlers trigger first.\n  priority: 50,\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const attrs: Record<string, string> = {};\n          for (const [nodeAttr, HTMLAttr] of Object.entries(BlockAttributes)) {\n            if (element.getAttribute(HTMLAttr)) {\n              attrs[nodeAttr] = element.getAttribute(HTMLAttr)!;\n            }\n          }\n\n          if (element.getAttribute(\"data-node-type\") === \"blockContainer\") {\n            return attrs;\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const domAttributes = this.options.domAttributes?.blockContainer || {};\n\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockOuter,\n        \"data-node-type\": \"block-outer\",\n      }),\n      [\n        \"div\",\n        mergeAttributes(\n          {\n            ...domAttributes,\n            class: mergeCSSClasses(styles.block, domAttributes.class),\n            \"data-node-type\": this.name,\n          },\n          HTMLAttributes\n        ),\n        0,\n      ],\n    ];\n  },\n\n  addCommands() {\n    return {\n      // Creates a new text block at a given position.\n      BNCreateBlock:\n        (pos) =>\n        ({ state, dispatch }) => {\n          const newBlock =\n            state.schema.nodes[\"blockContainer\"].createAndFill()!;\n\n          if (dispatch) {\n            state.tr.insert(pos, newBlock);\n          }\n\n          return true;\n        },\n      // Deletes a block at a given position.\n      BNDeleteBlock:\n        (posInBlock) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { startPos, endPos } = blockInfo;\n\n          if (dispatch) {\n            state.tr.deleteRange(startPos, endPos);\n          }\n\n          return true;\n        },\n      // Updates a block at a given position.\n      BNUpdateBlock:\n        (posInBlock, block) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { startPos, endPos, node, contentNode } = blockInfo;\n\n          if (dispatch) {\n            // Adds blockGroup node with child blocks if necessary.\n            if (block.children !== undefined) {\n              const childNodes = [];\n\n              // Creates ProseMirror nodes for each child block, including their descendants.\n              for (const child of block.children) {\n                childNodes.push(blockToNode(child, state.schema));\n              }\n\n              // Checks if a blockGroup node already exists.\n              if (node.childCount === 2) {\n                // Replaces all child nodes in the existing blockGroup with the ones created earlier.\n                state.tr.replace(\n                  startPos + contentNode.nodeSize + 1,\n                  endPos - 1,\n                  new Slice(Fragment.from(childNodes), 0, 0)\n                );\n              } else {\n                // Inserts a new blockGroup containing the child nodes created earlier.\n                state.tr.insert(\n                  startPos + contentNode.nodeSize,\n                  state.schema.nodes[\"blockGroup\"].create({}, childNodes)\n                );\n              }\n            }\n\n            // Replaces the blockContent node's content if necessary.\n            if (block.content !== undefined) {\n              let content: PMNode[] = [];\n\n              // Checks if the provided content is a string or InlineContent[] type.\n              if (typeof block.content === \"string\") {\n                // Adds a single text node with no marks to the content.\n                content.push(state.schema.text(block.content));\n              } else {\n                // Adds a text node with the provided styles converted into marks to the content, for each InlineContent\n                // object.\n                content = inlineContentToNodes(block.content, state.schema);\n              }\n\n              // Replaces the contents of the blockContent node with the previously created text node(s).\n              state.tr.replace(\n                startPos + 1,\n                startPos + contentNode.nodeSize - 1,\n                new Slice(Fragment.from(content), 0, 0)\n              );\n            }\n\n            // Changes the blockContent node type and adds the provided props as attributes. Also preserves all existing\n            // attributes that are compatible with the new type.\n            state.tr.setNodeMarkup(\n              startPos,\n              block.type === undefined\n                ? undefined\n                : state.schema.nodes[block.type],\n              {\n                ...contentNode.attrs,\n                ...block.props,\n              }\n            );\n\n            // Adds all provided props as attributes to the parent blockContainer node too, and also preserves existing\n            // attributes.\n            state.tr.setNodeMarkup(startPos - 1, undefined, {\n              ...node.attrs,\n              ...block.props,\n            });\n          }\n\n          return true;\n        },\n      // Appends the text contents of a block to the nearest previous block, given a position between them. Children of\n      // the merged block are moved out of it first, rather than also being merged.\n      //\n      // In the example below, the position passed into the function is between Block1 and Block2.\n      //\n      // Block1\n      //    Block2\n      // Block3\n      //    Block4\n      //        Block5\n      //\n      // Becomes:\n      //\n      // Block1\n      //    Block2Block3\n      // Block4\n      //     Block5\n      BNMergeBlocks:\n        (posBetweenBlocks) =>\n        ({ state, dispatch }) => {\n          const nextNodeIsBlock =\n            state.doc.resolve(posBetweenBlocks + 1).node().type.name ===\n            \"blockContainer\";\n          const prevNodeIsBlock =\n            state.doc.resolve(posBetweenBlocks - 1).node().type.name ===\n            \"blockContainer\";\n\n          if (!nextNodeIsBlock || !prevNodeIsBlock) {\n            return false;\n          }\n\n          const nextBlockInfo = getBlockInfoFromPos(\n            state.doc,\n            posBetweenBlocks + 1\n          );\n\n          const { node, contentNode, startPos, endPos, depth } = nextBlockInfo!;\n\n          // Removes a level of nesting all children of the next block by 1 level, if it contains both content and block\n          // group nodes.\n          if (node.childCount === 2) {\n            const childBlocksStart = state.doc.resolve(\n              startPos + contentNode.nodeSize + 1\n            );\n            const childBlocksEnd = state.doc.resolve(endPos - 1);\n            const childBlocksRange =\n              childBlocksStart.blockRange(childBlocksEnd);\n\n            // Moves the block group node inside the block into the block group node that the current block is in.\n            if (dispatch) {\n              state.tr.lift(childBlocksRange!, depth - 1);\n            }\n          }\n\n          let prevBlockEndPos = posBetweenBlocks - 1;\n          let prevBlockInfo = getBlockInfoFromPos(state.doc, prevBlockEndPos);\n\n          // Finds the nearest previous block, regardless of nesting level.\n          while (prevBlockInfo!.numChildBlocks > 0) {\n            prevBlockEndPos--;\n            prevBlockInfo = getBlockInfoFromPos(state.doc, prevBlockEndPos);\n            if (prevBlockInfo === undefined) {\n              return false;\n            }\n          }\n\n          // Deletes next block and adds its text content to the nearest previous block.\n\n          if (dispatch) {\n            dispatch(\n              state.tr\n                .deleteRange(startPos, startPos + contentNode.nodeSize)\n                .replace(\n                  prevBlockEndPos - 1,\n                  startPos,\n                  new Slice(contentNode.content, 0, 0)\n                )\n                .scrollIntoView()\n            );\n\n            state.tr.setSelection(\n              new TextSelection(state.doc.resolve(prevBlockEndPos - 1))\n            );\n          }\n\n          return true;\n        },\n      // Splits a block at a given position. Content after the position is moved to a new block below, at the same\n      // nesting level.\n      BNSplitBlock:\n        (posInBlock, keepType) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { contentNode, contentType, startPos, endPos, depth } =\n            blockInfo;\n\n          const originalBlockContent = state.doc.cut(startPos + 1, posInBlock);\n          const newBlockContent = state.doc.cut(posInBlock, endPos - 1);\n\n          const newBlock =\n            state.schema.nodes[\"blockContainer\"].createAndFill()!;\n\n          const newBlockInsertionPos = endPos + 1;\n          const newBlockContentPos = newBlockInsertionPos + 2;\n\n          if (dispatch) {\n            // Creates a new block. Since the schema requires it to have a content node, a paragraph node is created\n            // automatically, spanning newBlockContentPos to newBlockContentPos + 1.\n            state.tr.insert(newBlockInsertionPos, newBlock);\n\n            // Replaces the content of the newly created block's content node. Doesn't replace the whole content node so\n            // its type doesn't change.\n            state.tr.replace(\n              newBlockContentPos,\n              newBlockContentPos + 1,\n              newBlockContent.content.size > 0\n                ? new Slice(\n                    Fragment.from(newBlockContent),\n                    depth + 2,\n                    depth + 2\n                  )\n                : undefined\n            );\n\n            // Changes the type of the content node. The range doesn't matter as long as both from and to positions are\n            // within the content node.\n            if (keepType) {\n              state.tr.setBlockType(\n                newBlockContentPos,\n                newBlockContentPos,\n                state.schema.node(contentType).type,\n                contentNode.attrs\n              );\n            }\n\n            // Sets the selection to the start of the new block's content node.\n            state.tr.setSelection(\n              new TextSelection(state.doc.resolve(newBlockContentPos))\n            );\n\n            // Replaces the content of the original block's content node. Doesn't replace the whole content node so its\n            // type doesn't change.\n            state.tr.replace(\n              startPos + 1,\n              endPos - 1,\n              originalBlockContent.content.size > 0\n                ? new Slice(\n                    Fragment.from(originalBlockContent),\n                    depth + 2,\n                    depth + 2\n                  )\n                : undefined\n            );\n          }\n\n          return true;\n        },\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [PreviousBlockTypePlugin()];\n  },\n\n  addKeyboardShortcuts() {\n    // handleBackspace is partially adapted from https://github.com/ueberdosis/tiptap/blob/ed56337470efb4fd277128ab7ef792b37cfae992/packages/core/src/extensions/keymap.ts\n    const handleBackspace = () =>\n      this.editor.commands.first(({ commands }) => [\n        // Deletes the selection if it's not empty.\n        () => commands.deleteSelection(),\n        // Undoes an input rule if one was triggered in the last editor state change.\n        () => commands.undoInputRule(),\n        // Reverts block content type to a paragraph if the selection is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { contentType } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const isParagraph = contentType.name === \"paragraph\";\n\n            if (selectionAtBlockStart && !isParagraph) {\n              return commands.BNUpdateBlock(state.selection.from, {\n                type: \"paragraph\",\n                props: {},\n              });\n            }\n\n            return false;\n          }),\n        // Removes a level of nesting if the block is indented if the selection is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n\n            if (selectionAtBlockStart) {\n              return commands.liftListItem(\"blockContainer\");\n            }\n\n            return false;\n          }),\n        // Merges block with the previous one if it isn't indented, isn't the first block in the doc, and the selection\n        // is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { depth, startPos } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockAtDocStart = startPos === 2;\n\n            const posBetweenBlocks = startPos - 1;\n\n            if (\n              !blockAtDocStart &&\n              selectionAtBlockStart &&\n              selectionEmpty &&\n              depth === 2\n            ) {\n              return commands.BNMergeBlocks(posBetweenBlocks);\n            }\n\n            return false;\n          }),\n      ]);\n\n    const handleEnter = () =>\n      this.editor.commands.first(({ commands }) => [\n        // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start\n        // of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { node, depth } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockEmpty = node.textContent.length === 0;\n            const blockIndented = depth > 2;\n\n            if (\n              selectionAtBlockStart &&\n              selectionEmpty &&\n              blockEmpty &&\n              blockIndented\n            ) {\n              return commands.liftListItem(\"blockContainer\");\n            }\n\n            return false;\n          }),\n        // Creates a new block and moves the selection to it if the current one is empty, while the selection is also\n        // empty & at the start of the block.\n        () =>\n          commands.command(({ state, chain }) => {\n            const { node, endPos } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockEmpty = node.textContent.length === 0;\n\n            if (selectionAtBlockStart && selectionEmpty && blockEmpty) {\n              const newBlockInsertionPos = endPos + 1;\n              const newBlockContentPos = newBlockInsertionPos + 2;\n\n              chain()\n                .BNCreateBlock(newBlockInsertionPos)\n                .setTextSelection(newBlockContentPos)\n                .run();\n\n              return true;\n            }\n\n            return false;\n          }),\n        // Splits the current block, moving content inside that's after the cursor to a new text block below. Also\n        // deletes the selection beforehand, if it's not empty.\n        () =>\n          commands.command(({ state, chain }) => {\n            const { node } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const blockEmpty = node.textContent.length === 0;\n\n            if (!blockEmpty) {\n              chain()\n                .deleteSelection()\n                .BNSplitBlock(state.selection.from, false)\n                .run();\n\n              return true;\n            }\n\n            return false;\n          }),\n      ]);\n\n    return {\n      Backspace: handleBackspace,\n      Enter: handleEnter,\n      // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the\n      // editor since the browser will try to use tab for keyboard navigation.\n      Tab: () => {\n        this.editor.commands.sinkListItem(\"blockContainer\");\n        return true;\n      },\n      \"Shift-Tab\": () => {\n        this.editor.commands.liftListItem(\"blockContainer\");\n        return true;\n      },\n      \"Mod-Alt-0\": () =>\n        this.editor.commands.BNCreateBlock(\n          this.editor.state.selection.anchor + 2\n        ),\n      \"Mod-Alt-1\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"1\",\n          },\n        }),\n      \"Mod-Alt-2\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"2\",\n          },\n        }),\n      \"Mod-Alt-3\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"3\",\n          },\n        }),\n      \"Mod-Shift-7\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"bulletListItem\",\n          props: {},\n        }),\n      \"Mod-Shift-8\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"numberedListItem\",\n          props: {},\n        }),\n    };\n  },\n});\n","import { mergeAttributes, Node } from \"@tiptap/core\";\nimport styles from \"./Block.module.css\";\nimport { BlockNoteDOMAttributes } from \"../api/blockTypes\";\nimport { mergeCSSClasses } from \"../../../shared/utils\";\n\nexport const BlockGroup = Node.create<{\n  domAttributes?: BlockNoteDOMAttributes;\n}>({\n  name: \"blockGroup\",\n  group: \"blockGroup\",\n  content: \"blockContainer+\",\n\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.getAttribute(\"data-node-type\") === \"blockGroup\") {\n            // Null means the element matches, but we don't want to add any attributes to the node.\n            return null;\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const blockGroupDOMAttributes =\n      this.options.domAttributes?.blockGroup || {};\n\n    return [\n      \"div\",\n      mergeAttributes(\n        {\n          ...blockGroupDOMAttributes,\n          class: mergeCSSClasses(\n            styles.blockGroup,\n            blockGroupDOMAttributes.class\n          ),\n          \"data-node-type\": \"blockGroup\",\n        },\n        HTMLAttributes\n      ),\n      0,\n    ];\n  },\n});\n","import { Node } from \"@tiptap/core\";\nexport { BlockContainer } from \"./nodes/BlockContainer\";\nexport { BlockGroup } from \"./nodes/BlockGroup\";\nexport const Doc = Node.create({\n  name: \"doc\",\n  topNode: true,\n  content: \"blockGroup\",\n});\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\nimport { DOMSerializer, Schema } from \"prosemirror-model\";\n\nconst customBlockSerializer = (schema: Schema) => {\n  const defaultSerializer = DOMSerializer.fromSchema(schema);\n\n  return new DOMSerializer(\n    {\n      ...defaultSerializer.nodes,\n      // TODO: If a serializer is defined in the config for a custom block, it\n      //  should be added here. We still need to figure out how the serializer\n      //  should be defined in the custom blocks API though, and implement that,\n      //  before we can do this.\n    },\n    defaultSerializer.marks\n  );\n};\nexport const CustomBlockSerializerExtension = Extension.create({\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        props: {\n          clipboardSerializer: customBlockSerializer(this.editor.schema),\n        },\n      }),\n    ];\n  },\n});","// from https://raw.githubusercontent.com/ueberdosis/tiptap/develop/packages/core/src/EventEmitter.ts (MIT)\n\ntype StringKeyOf<T> = Extract<keyof T, string>;\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]];\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>\n> = (...props: CallbackType<T, EventName>) => any;\n\nexport class EventEmitter<T extends Record<string, any>> {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private callbacks: { [key: string]: Function[] } = {};\n\n  public on<EventName extends StringKeyOf<T>>(\n    event: EventName,\n    fn: CallbackFunction<T, EventName>\n  ) {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n\n    this.callbacks[event].push(fn);\n\n    return () => this.off(event, fn);\n  }\n\n  protected emit<EventName extends StringKeyOf<T>>(\n    event: EventName,\n    ...args: CallbackType<T, EventName>\n  ) {\n    const callbacks = this.callbacks[event];\n\n    if (callbacks) {\n      callbacks.forEach((callback) => callback.apply(this, args));\n    }\n  }\n\n  public off<EventName extends StringKeyOf<T>>(\n    event: EventName,\n    fn?: CallbackFunction<T, EventName>\n  ) {\n    const callbacks = this.callbacks[event];\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter((callback) => callback !== fn);\n      } else {\n        delete this.callbacks[event];\n      }\n    }\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {};\n  }\n}\n","import { findParentNode } from \"@tiptap/core\";\n\nexport const findBlock = findParentNode(\n  (node) => node.type.name === \"blockContainer\"\n);\n","import { EditorState, Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet, EditorView } from \"prosemirror-view\";\nimport { BlockNoteEditor } from \"../../../BlockNoteEditor\";\nimport { BlockSchema } from \"../../../extensions/Blocks/api/blockTypes\";\nimport { findBlock } from \"../../../extensions/Blocks/helpers/findBlock\";\nimport { BaseUiElementState } from \"../../BaseUiElementTypes\";\nimport { SuggestionItem } from \"./SuggestionItem\";\n\nexport type SuggestionsMenuState<T extends SuggestionItem> =\n  BaseUiElementState & {\n    // The suggested items to display.\n    filteredItems: T[];\n    // The index of the suggested item that's currently hovered by the keyboard.\n    keyboardHoveredItemIndex: number;\n  };\n\nclass SuggestionsMenuView<\n  T extends SuggestionItem,\n  BSchema extends BlockSchema\n> {\n  private suggestionsMenuState?: SuggestionsMenuState<T>;\n  public updateSuggestionsMenu: () => void;\n\n  pluginState: SuggestionPluginState<T>;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<BSchema>,\n    private readonly pluginKey: PluginKey,\n    updateSuggestionsMenu: (\n      suggestionsMenuState: SuggestionsMenuState<T>\n    ) => void = () => {\n      // noop\n    }\n  ) {\n    this.pluginState = getDefaultPluginState<T>();\n\n    this.updateSuggestionsMenu = () => {\n      if (!this.suggestionsMenuState) {\n        throw new Error(\"Attempting to update uninitialized suggestions menu\");\n      }\n\n      updateSuggestionsMenu(this.suggestionsMenuState);\n    };\n\n    document.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleScroll = () => {\n    if (this.suggestionsMenuState?.show) {\n      const decorationNode = document.querySelector(\n        `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n      );\n      this.suggestionsMenuState.referencePos =\n        decorationNode!.getBoundingClientRect();\n      this.updateSuggestionsMenu();\n    }\n  };\n\n  update(view: EditorView, prevState: EditorState) {\n    const prev = this.pluginKey.getState(prevState);\n    const next = this.pluginKey.getState(view.state);\n\n    // See how the state changed\n    const started = !prev.active && next.active;\n    const stopped = prev.active && !next.active;\n    // TODO: Currently also true for cases in which an update isn't needed so selected list item index updates still\n    //  cause the view to update. May need to be more strict.\n    const changed = prev.active && next.active;\n\n    // Cancel when suggestion isn't active\n    if (!started && !changed && !stopped) {\n      return;\n    }\n\n    this.pluginState = stopped ? prev : next;\n\n    if (stopped || !this.editor.isEditable) {\n      this.suggestionsMenuState!.show = false;\n      this.updateSuggestionsMenu();\n\n      return;\n    }\n\n    const decorationNode = document.querySelector(\n      `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n    );\n\n    if (this.editor.isEditable) {\n      this.suggestionsMenuState = {\n        show: true,\n        referencePos: decorationNode!.getBoundingClientRect(),\n        filteredItems: this.pluginState.items,\n        keyboardHoveredItemIndex: this.pluginState.keyboardHoveredItemIndex!,\n      };\n\n      this.updateSuggestionsMenu();\n    }\n  }\n\n  destroy() {\n    document.removeEventListener(\"scroll\", this.handleScroll);\n  }\n}\n\ntype SuggestionPluginState<T extends SuggestionItem> = {\n  // True when the menu is shown, false when hidden.\n  active: boolean;\n  // The character that triggered the menu being shown. Allowing the trigger to be different to the default\n  // trigger allows other extensions to open it programmatically.\n  triggerCharacter: string | undefined;\n  // The editor position just after the trigger character, i.e. where the user query begins. Used to figure out\n  // which menu items to show and can also be used to delete the trigger character.\n  queryStartPos: number | undefined;\n  // The items that should be shown in the menu.\n  items: T[];\n  // The index of the item in the menu that's currently hovered using the keyboard.\n  keyboardHoveredItemIndex: number | undefined;\n  // The number of characters typed after the last query that matched with at least 1 item. Used to close the\n  // menu if the user keeps entering queries that don't return any results.\n  notFoundCount: number | undefined;\n  decorationId: string | undefined;\n};\n\nfunction getDefaultPluginState<\n  T extends SuggestionItem\n>(): SuggestionPluginState<T> {\n  return {\n    active: false,\n    triggerCharacter: undefined,\n    queryStartPos: undefined,\n    items: [] as T[],\n    keyboardHoveredItemIndex: undefined,\n    notFoundCount: 0,\n    decorationId: undefined,\n  };\n}\n\n/**\n * A ProseMirror plugin for suggestions, designed to make '/'-commands possible as well as mentions.\n *\n * This is basically a simplified version of TipTap's [Suggestions](https://github.com/ueberdosis/tiptap/tree/db92a9b313c5993b723c85cd30256f1d4a0b65e1/packages/suggestion) plugin.\n *\n * This version is adapted from the aforementioned version in the following ways:\n * - This version supports generic items instead of only strings (to allow for more advanced filtering for example)\n * - This version hides some unnecessary complexity from the user of the plugin.\n * - This version handles key events differently\n */\nexport const setupSuggestionsMenu = <\n  T extends SuggestionItem,\n  BSchema extends BlockSchema\n>(\n  editor: BlockNoteEditor<BSchema>,\n  updateSuggestionsMenu: (\n    suggestionsMenuState: SuggestionsMenuState<T>\n  ) => void,\n\n  pluginKey: PluginKey,\n  defaultTriggerCharacter: string,\n  items: (query: string) => T[] = () => [],\n  onSelectItem: (props: {\n    item: T;\n    editor: BlockNoteEditor<BSchema>;\n  }) => void = () => {\n    // noop\n  }\n) => {\n  // Assertions\n  if (defaultTriggerCharacter.length !== 1) {\n    throw new Error(\"'char' should be a single character\");\n  }\n\n  let suggestionsPluginView: SuggestionsMenuView<T, BSchema>;\n\n  const deactivate = (view: EditorView) => {\n    view.dispatch(view.state.tr.setMeta(pluginKey, { deactivate: true }));\n  };\n\n  return {\n    plugin: new Plugin({\n      key: pluginKey,\n\n      view: () => {\n        suggestionsPluginView = new SuggestionsMenuView<T, BSchema>(\n          editor,\n          pluginKey,\n\n          updateSuggestionsMenu\n        );\n        return suggestionsPluginView;\n      },\n\n      state: {\n        // Initialize the plugin's internal state.\n        init(): SuggestionPluginState<T> {\n          return getDefaultPluginState<T>();\n        },\n\n        // Apply changes to the plugin state from an editor transaction.\n        apply(transaction, prev, oldState, newState): SuggestionPluginState<T> {\n          // TODO: More clearly define which transactions should be ignored.\n          if (transaction.getMeta(\"orderedListIndexing\") !== undefined) {\n            return prev;\n          }\n\n          // Checks if the menu should be shown.\n          if (transaction.getMeta(pluginKey)?.activate) {\n            return {\n              active: true,\n              triggerCharacter:\n                transaction.getMeta(pluginKey)?.triggerCharacter || \"\",\n              queryStartPos: newState.selection.from,\n              items: items(\"\"),\n              keyboardHoveredItemIndex: 0,\n              // TODO: Maybe should be 1 if the menu has no possible items? Probably redundant since a menu with no items\n              //  is useless in practice.\n              notFoundCount: 0,\n              decorationId: `id_${Math.floor(Math.random() * 0xffffffff)}`,\n            };\n          }\n\n          // Checks if the menu is hidden, in which case it doesn't need to be hidden or updated.\n          if (!prev.active) {\n            return prev;\n          }\n\n          const next = { ...prev };\n\n          // Updates which menu items to show by checking which items the current query (the text between the trigger\n          // character and caret) matches with.\n          next.items = items(\n            newState.doc.textBetween(\n              prev.queryStartPos!,\n              newState.selection.from\n            )\n          );\n\n          // Updates notFoundCount if the query doesn't match any items.\n          next.notFoundCount = 0;\n          if (next.items.length === 0) {\n            // Checks how many characters were typed or deleted since the last transaction, and updates the notFoundCount\n            // accordingly. Also ensures the notFoundCount does not become negative.\n            next.notFoundCount = Math.max(\n              0,\n              prev.notFoundCount! +\n                (newState.selection.from - oldState.selection.from)\n            );\n          }\n\n          // Hides the menu. This is done after items and notFoundCount are already updated as notFoundCount is needed to\n          // check if the menu should be hidden.\n          if (\n            // Highlighting text should hide the menu.\n            newState.selection.from !== newState.selection.to ||\n            // Transactions with plugin metadata {deactivate: true} should hide the menu.\n            transaction.getMeta(pluginKey)?.deactivate ||\n            // Certain mouse events should hide the menu.\n            // TODO: Change to global mousedown listener.\n            transaction.getMeta(\"focus\") ||\n            transaction.getMeta(\"blur\") ||\n            transaction.getMeta(\"pointer\") ||\n            // Moving the caret before the character which triggered the menu should hide it.\n            (prev.active && newState.selection.from < prev.queryStartPos!) ||\n            // Entering more than 3 characters, after the last query that matched with at least 1 menu item, should hide\n            // the menu.\n            next.notFoundCount > 3\n          ) {\n            return getDefaultPluginState<T>();\n          }\n\n          // Updates keyboardHoveredItemIndex if the up or down arrow key was\n          // pressed, or resets it if the keyboard cursor moved.\n          if (\n            transaction.getMeta(pluginKey)?.selectedItemIndexChanged !==\n            undefined\n          ) {\n            let newIndex =\n              transaction.getMeta(pluginKey).selectedItemIndexChanged;\n\n            // Allows selection to jump between first and last items.\n            if (newIndex < 0) {\n              newIndex = prev.items.length - 1;\n            } else if (newIndex >= prev.items.length) {\n              newIndex = 0;\n            }\n\n            next.keyboardHoveredItemIndex = newIndex;\n          } else if (oldState.selection.from !== newState.selection.from) {\n            next.keyboardHoveredItemIndex = 0;\n          }\n\n          return next;\n        },\n      },\n\n      props: {\n        handleKeyDown(view, event) {\n          const menuIsActive = (this as Plugin).getState(view.state).active;\n\n          // Shows the menu if the default trigger character was pressed and the menu isn't active.\n          if (event.key === defaultTriggerCharacter && !menuIsActive) {\n            view.dispatch(\n              view.state.tr\n                .insertText(defaultTriggerCharacter)\n                .scrollIntoView()\n                .setMeta(pluginKey, {\n                  activate: true,\n                  triggerCharacter: defaultTriggerCharacter,\n                })\n            );\n\n            return true;\n          }\n\n          // Doesn't handle other keystrokes if the menu isn't active.\n          if (!menuIsActive) {\n            return false;\n          }\n\n          // Handles keystrokes for navigating the menu.\n          const {\n            triggerCharacter,\n            queryStartPos,\n            items,\n            keyboardHoveredItemIndex,\n          } = pluginKey.getState(view.state);\n\n          // Moves the keyboard selection to the previous item.\n          if (event.key === \"ArrowUp\") {\n            view.dispatch(\n              view.state.tr.setMeta(pluginKey, {\n                selectedItemIndexChanged: keyboardHoveredItemIndex - 1,\n              })\n            );\n            return true;\n          }\n\n          // Moves the keyboard selection to the next item.\n          if (event.key === \"ArrowDown\") {\n            view.dispatch(\n              view.state.tr.setMeta(pluginKey, {\n                selectedItemIndexChanged: keyboardHoveredItemIndex + 1,\n              })\n            );\n            return true;\n          }\n\n          // Selects an item and closes the menu.\n          if (event.key === \"Enter\") {\n            deactivate(view);\n            editor._tiptapEditor\n              .chain()\n              .focus()\n              .deleteRange({\n                from: queryStartPos! - triggerCharacter!.length,\n                to: editor._tiptapEditor.state.selection.from,\n              })\n              .run();\n\n            onSelectItem({\n              item: items[keyboardHoveredItemIndex],\n              editor: editor,\n            });\n\n            return true;\n          }\n\n          // Closes the menu.\n          if (event.key === \"Escape\") {\n            deactivate(view);\n            return true;\n          }\n\n          return false;\n        },\n\n        // Setup decorator on the currently active suggestion.\n        decorations(state) {\n          const { active, decorationId, queryStartPos, triggerCharacter } = (\n            this as Plugin\n          ).getState(state);\n\n          if (!active) {\n            return null;\n          }\n\n          // If the menu was opened programmatically by another extension, it may not use a trigger character. In this\n          // case, the decoration is set on the whole block instead, as the decoration range would otherwise be empty.\n          if (triggerCharacter === \"\") {\n            const blockNode = findBlock(state.selection);\n            if (blockNode) {\n              return DecorationSet.create(state.doc, [\n                Decoration.node(\n                  blockNode.pos,\n                  blockNode.pos + blockNode.node.nodeSize,\n                  {\n                    nodeName: \"span\",\n                    class: \"suggestion-decorator\",\n                    \"data-decoration-id\": decorationId,\n                  }\n                ),\n              ]);\n            }\n          }\n          // Creates an inline decoration around the trigger character.\n          return DecorationSet.create(state.doc, [\n            Decoration.inline(\n              queryStartPos - triggerCharacter.length,\n              queryStartPos,\n              {\n                nodeName: \"span\",\n                class: \"suggestion-decorator\",\n                \"data-decoration-id\": decorationId,\n              }\n            ),\n          ]);\n        },\n      },\n    }),\n    itemCallback: (item: T) => {\n      deactivate(editor._tiptapEditor.view);\n      editor._tiptapEditor\n        .chain()\n        .focus()\n        .deleteRange({\n          from:\n            suggestionsPluginView.pluginState.queryStartPos! -\n            suggestionsPluginView.pluginState.triggerCharacter!.length,\n          to: editor._tiptapEditor.state.selection.from,\n        })\n        .run();\n\n      onSelectItem({\n        item: item,\n        editor: editor,\n      });\n    },\n  };\n};\n","import { Plugin, PluginKey } from \"prosemirror-state\";\n\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport { EventEmitter } from \"../../shared/EventEmitter\";\nimport {\n  SuggestionsMenuState,\n  setupSuggestionsMenu,\n} from \"../../shared/plugins/suggestion/SuggestionPlugin\";\nimport { BlockSchema } from \"../Blocks/api/blockTypes\";\nimport { BaseSlashMenuItem } from \"./BaseSlashMenuItem\";\n\nexport const slashMenuPluginKey = new PluginKey(\"SlashMenuPlugin\");\n\nexport class SlashMenuProsemirrorPlugin<\n  BSchema extends BlockSchema,\n  SlashMenuItem extends BaseSlashMenuItem<BSchema>\n> extends EventEmitter<any> {\n  public readonly plugin: Plugin;\n  public readonly itemCallback: (item: SlashMenuItem) => void;\n\n  constructor(editor: BlockNoteEditor<BSchema>, items: SlashMenuItem[]) {\n    super();\n    const suggestions = setupSuggestionsMenu<SlashMenuItem, BSchema>(\n      editor,\n      (state) => {\n        this.emit(\"update\", state);\n      },\n      slashMenuPluginKey,\n      \"/\",\n      (query) =>\n        items.filter(\n          ({ name, aliases }: SlashMenuItem) =>\n            name.toLowerCase().startsWith(query.toLowerCase()) ||\n            (aliases &&\n              aliases.filter((alias) =>\n                alias.toLowerCase().startsWith(query.toLowerCase())\n              ).length !== 0)\n        ),\n      ({ item, editor }) => item.execute(editor)\n    );\n\n    this.plugin = suggestions.plugin;\n    this.itemCallback = suggestions.itemCallback;\n  }\n\n  public onUpdate(\n    callback: (state: SuggestionsMenuState<SlashMenuItem>) => void\n  ) {\n    return this.on(\"update\", callback);\n  }\n}\n","import { Editor, Extension } from \"@tiptap/core\";\nimport { Node as ProsemirrorNode } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\nimport { slashMenuPluginKey } from \"../SlashMenu/SlashMenuPlugin\";\n\nconst PLUGIN_KEY = new PluginKey(`blocknote-placeholder`);\n\n/**\n * This is a modified version of the tiptap\n * placeholder plugin, that also sets hasAnchorClass\n *\n * It does not set a data-placeholder (text is currently done in css)\n *\n */\nexport interface PlaceholderOptions {\n  emptyEditorClass: string;\n  emptyNodeClass: string;\n  isFilterClass: string;\n  hasAnchorClass: string;\n  placeholder:\n    | ((PlaceholderProps: {\n        editor: Editor;\n        node: ProsemirrorNode;\n        pos: number;\n        hasAnchor: boolean;\n      }) => string)\n    | string;\n  showOnlyWhenEditable: boolean;\n  showOnlyCurrent: boolean;\n  includeChildren: boolean;\n}\n\nexport const Placeholder = Extension.create<PlaceholderOptions>({\n  name: \"placeholder\",\n\n  addOptions() {\n    return {\n      emptyEditorClass: \"is-editor-empty\",\n      emptyNodeClass: \"is-empty\",\n      isFilterClass: \"is-filter\",\n      hasAnchorClass: \"has-anchor\",\n      placeholder: \"Write something â€¦\",\n      showOnlyWhenEditable: true,\n      showOnlyCurrent: true,\n      includeChildren: false,\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: PLUGIN_KEY,\n        props: {\n          decorations: (state) => {\n            const { doc, selection } = state;\n            // Get state of slash menu\n            const menuState = slashMenuPluginKey.getState(state);\n            const active =\n              this.editor.isEditable || !this.options.showOnlyWhenEditable;\n            const { anchor } = selection;\n            const decorations: Decoration[] = [];\n\n            if (!active) {\n              return;\n            }\n\n            doc.descendants((node, pos) => {\n              const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;\n              const isEmpty = !node.isLeaf && !node.childCount;\n\n              if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\n                const classes = [this.options.emptyNodeClass];\n\n                // TODO: Doesn't work?\n                if (this.editor.isEmpty) {\n                  classes.push(this.options.emptyEditorClass);\n                }\n\n                if (hasAnchor) {\n                  classes.push(this.options.hasAnchorClass);\n                }\n\n                // If slash menu is of drag type and active, show the filter placeholder\n                if (menuState?.triggerCharacter === \"\" && menuState?.active) {\n                  classes.push(this.options.isFilterClass);\n                }\n                // using widget, didn't work (caret position bug)\n                // const decoration = Decoration.widget(\n                //   pos + 1,\n                //   () => {\n                //     const el = document.createElement(\"span\");\n                //     el.innerText = \"hello\";\n                //     return el;\n                //   },\n                //   { side: 0 }\n\n                // Code that sets variables / classes\n                // const ph =\n                //   typeof this.options.placeholder === \"function\"\n                //     ? this.options.placeholder({\n                //         editor: this.editor,\n                //         node,\n                //         pos,\n                //         hasAnchor,\n                //       })\n                //     : this.options.placeholder;\n                // const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                //   class: classes.join(\" \"),\n                //   style: `--placeholder:'${ph.replaceAll(\"'\", \"\\\\'\")}';`,\n                //   \"data-placeholder\": ph,\n                // });\n\n                // Latest version, only set isEmpty and hasAnchor, rest is done via CSS\n\n                const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                  class: classes.join(\" \"),\n                });\n                decorations.push(decoration);\n              }\n\n              return this.options.includeChildren;\n            });\n\n            return DecorationSet.create(doc, decorations);\n          },\n        },\n      }),\n    ];\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    textAlignment: {\n      setTextAlignment: (\n        textAlignment: \"left\" | \"center\" | \"right\" | \"justify\"\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const TextAlignmentExtension = Extension.create({\n  name: \"textAlignment\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        // Attribute is applied to block content instead of container so that child blocks don't inherit the text\n        // alignment styling.\n        types: [\"paragraph\", \"heading\", \"bulletListItem\", \"numberedListItem\"],\n        attributes: {\n          textAlignment: {\n            default: \"left\",\n            parseHTML: (element) => element.getAttribute(\"data-text-alignment\"),\n            renderHTML: (attributes) =>\n              attributes.textAlignment !== \"left\" && {\n                \"data-text-alignment\": attributes.textAlignment,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setTextAlignment:\n        (textAlignment) =>\n        ({ state }) => {\n          const positionsBeforeSelectedContent = [];\n\n          const blockInfo = getBlockInfoFromPos(\n            state.doc,\n            state.selection.from\n          );\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          // Finds all blockContent nodes that the current selection is in.\n          let pos = blockInfo.startPos;\n          while (pos < state.selection.to) {\n            if (\n              state.doc.resolve(pos).node().type.spec.group === \"blockContent\"\n            ) {\n              positionsBeforeSelectedContent.push(pos - 1);\n\n              pos += state.doc.resolve(pos).node().nodeSize - 1;\n            } else {\n              pos += 1;\n            }\n          }\n\n          // Sets text alignment for all blockContent nodes that the current selection is in.\n          for (const pos of positionsBeforeSelectedContent) {\n            state.tr.setNodeAttribute(pos, \"textAlignment\", textAlignment);\n          }\n\n          return true;\n        },\n    };\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    blockTextColor: {\n      setBlockTextColor: (posInBlock: number, color: string) => ReturnType;\n    };\n  }\n}\n\nexport const TextColorExtension = Extension.create({\n  name: \"blockTextColor\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          textColor: {\n            default: \"default\",\n            parseHTML: (element) =>\n              element.hasAttribute(\"data-text-color\")\n                ? element.getAttribute(\"data-text-color\")\n                : \"default\",\n            renderHTML: (attributes) =>\n              attributes.textColor !== \"default\" && {\n                \"data-text-color\": attributes.textColor,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setBlockTextColor:\n        (posInBlock, color) =>\n        ({ state, view }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          state.tr.setNodeAttribute(blockInfo.startPos - 1, \"textColor\", color);\n\n          view.focus();\n\n          return true;\n        },\n    };\n  },\n});\n","import { Mark } from \"@tiptap/core\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    textColor: {\n      setTextColor: (color: string) => ReturnType;\n    };\n  }\n}\n\nexport const TextColorMark = Mark.create({\n  name: \"textColor\",\n\n  addAttributes() {\n    return {\n      color: {\n        default: undefined,\n        parseHTML: (element) => element.getAttribute(\"data-text-color\"),\n        renderHTML: (attributes) => ({\n          \"data-text-color\": attributes.color,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.hasAttribute(\"data-text-color\")) {\n            return { color: element.getAttribute(\"data-text-color\") };\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"span\", HTMLAttributes, 0];\n  },\n\n  addCommands() {\n    return {\n      setTextColor:\n        (color) =>\n        ({ commands }) => {\n          if (color !== \"default\") {\n            return commands.setMark(this.name, { color: color });\n          }\n\n          return commands.unsetMark(this.name);\n        },\n    };\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\n\n// based on https://github.com/ueberdosis/tiptap/blob/40a9404c94c7fef7900610c195536384781ae101/demos/src/Experiments/TrailingNode/Vue/trailing-node.ts\n\n/**\n * Extension based on:\n * - https://github.com/ueberdosis/tiptap/blob/v1/packages/tiptap-extensions/src/extensions/TrailingNode.js\n * - https://github.com/remirror/remirror/blob/e0f1bec4a1e8073ce8f5500d62193e52321155b9/packages/prosemirror-trailing-node/src/trailing-node-plugin.ts\n */\n\nexport interface TrailingNodeOptions {\n  node: string;\n}\n\n/**\n * Add a trailing node to the document so the user can always click at the bottom of the document and start typing\n */\nexport const TrailingNode = Extension.create<TrailingNodeOptions>({\n  name: \"trailingNode\",\n\n  addProseMirrorPlugins() {\n    const plugin = new PluginKey(this.name);\n    // const disabledNodes = Object.entries(this.editor.schema.nodes)\n    //   .map(([, value]) => value)\n    //   .filter((node) => this.options.notAfter.includes(node.name));\n\n    return [\n      new Plugin({\n        key: plugin,\n        appendTransaction: (_, __, state) => {\n          const { doc, tr, schema } = state;\n          const shouldInsertNodeAtEnd = plugin.getState(state);\n          const endPosition = doc.content.size - 2;\n          const type = schema.nodes[\"blockContainer\"];\n          const contentType = schema.nodes[\"paragraph\"];\n          if (!shouldInsertNodeAtEnd) {\n            return;\n          }\n\n          return tr.insert(\n            endPosition,\n            type.create(undefined, contentType.create())\n          );\n        },\n        state: {\n          init: (_, _state) => {\n            // (maybe fix): use same logic as apply() here\n            // so it works when initializing\n          },\n          apply: (tr, value) => {\n            if (!tr.docChanged) {\n              return value;\n            }\n\n            let lastNode = tr.doc.lastChild;\n\n            if (!lastNode || lastNode.type.name !== \"blockGroup\") {\n              throw new Error(\"Expected blockGroup\");\n            }\n\n            lastNode = lastNode.lastChild;\n\n            if (!lastNode || lastNode.type.name !== \"blockContainer\") {\n              throw new Error(\"Expected blockContainer\");\n            }\n            return lastNode.nodeSize > 4; // empty <block><content/></block> is length 4\n          },\n        },\n      }),\n    ];\n  },\n});\n","import { Extensions, extensions } from \"@tiptap/core\";\n\nimport { BlockNoteEditor } from \"./BlockNoteEditor\";\n\nimport { Bold } from \"@tiptap/extension-bold\";\nimport { Code } from \"@tiptap/extension-code\";\nimport Collaboration from \"@tiptap/extension-collaboration\";\nimport CollaborationCursor from \"@tiptap/extension-collaboration-cursor\";\nimport { Dropcursor } from \"@tiptap/extension-dropcursor\";\nimport { Gapcursor } from \"@tiptap/extension-gapcursor\";\nimport { HardBreak } from \"@tiptap/extension-hard-break\";\nimport { History } from \"@tiptap/extension-history\";\nimport { Italic } from \"@tiptap/extension-italic\";\nimport { Link } from \"@tiptap/extension-link\";\nimport { Strike } from \"@tiptap/extension-strike\";\nimport { Text } from \"@tiptap/extension-text\";\nimport { Underline } from \"@tiptap/extension-underline\";\nimport * as Y from \"yjs\";\nimport styles from \"./editor.module.css\";\nimport { BackgroundColorExtension } from \"./extensions/BackgroundColor/BackgroundColorExtension\";\nimport { BackgroundColorMark } from \"./extensions/BackgroundColor/BackgroundColorMark\";\nimport { BlockContainer, BlockGroup, Doc } from \"./extensions/Blocks\";\nimport {\n  BlockNoteDOMAttributes,\n  BlockSchema,\n} from \"./extensions/Blocks/api/blockTypes\";\nimport { CustomBlockSerializerExtension } from \"./extensions/Blocks/api/serialization\";\nimport blockStyles from \"./extensions/Blocks/nodes/Block.module.css\";\nimport { Placeholder } from \"./extensions/Placeholder/PlaceholderExtension\";\nimport { TextAlignmentExtension } from \"./extensions/TextAlignment/TextAlignmentExtension\";\nimport { TextColorExtension } from \"./extensions/TextColor/TextColorExtension\";\nimport { TextColorMark } from \"./extensions/TextColor/TextColorMark\";\nimport { TrailingNode } from \"./extensions/TrailingNode/TrailingNodeExtension\";\nimport UniqueID from \"./extensions/UniqueID/UniqueID\";\n\n/**\n * Get all the Tiptap extensions BlockNote is configured with by default\n */\nexport const getBlockNoteExtensions = <BSchema extends BlockSchema>(opts: {\n  editor: BlockNoteEditor<BSchema>;\n  domAttributes: Partial<BlockNoteDOMAttributes>;\n  blockSchema: BSchema;\n  collaboration?: {\n    fragment: Y.XmlFragment;\n    user: {\n      name: string;\n      color: string;\n    };\n    provider: any;\n    renderCursor?: (user: any) => HTMLElement;\n  };\n}) => {\n  const ret: Extensions = [\n    extensions.ClipboardTextSerializer,\n    extensions.Commands,\n    extensions.Editable,\n    extensions.FocusEvents,\n    extensions.Tabindex,\n\n    // DevTools,\n    Gapcursor,\n\n    // DropCursor,\n    Placeholder.configure({\n      emptyNodeClass: blockStyles.isEmpty,\n      hasAnchorClass: blockStyles.hasAnchor,\n      isFilterClass: blockStyles.isFilter,\n      includeChildren: true,\n      showOnlyCurrent: false,\n    }),\n    UniqueID.configure({\n      types: [\"blockContainer\"],\n    }),\n    HardBreak,\n    // Comments,\n\n    // basics:\n    Text,\n\n    // marks:\n    Bold,\n    Code,\n    Italic,\n    Strike,\n    Underline,\n    Link,\n    TextColorMark,\n    TextColorExtension,\n    BackgroundColorMark,\n    BackgroundColorExtension,\n    TextAlignmentExtension,\n\n    // nodes\n    Doc,\n    BlockContainer.configure({\n      domAttributes: opts.domAttributes,\n    }),\n    BlockGroup.configure({\n      domAttributes: opts.domAttributes,\n    }),\n    ...Object.values(opts.blockSchema).map((blockSpec) =>\n      blockSpec.node.configure({\n        editor: opts.editor,\n        domAttributes: opts.domAttributes,\n      })\n    ),\n    CustomBlockSerializerExtension,\n\n    Dropcursor.configure({ width: 5, color: \"#ddeeff\" }),\n    // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),\n    // should be handled before Enter handlers in other components like splitListItem\n    TrailingNode,\n  ];\n\n  if (opts.collaboration) {\n    ret.push(\n      Collaboration.configure({\n        fragment: opts.collaboration.fragment,\n      })\n    );\n    if (opts.collaboration.provider?.awareness) {\n      const defaultRender = (user: { color: string; name: string }) => {\n        const cursor = document.createElement(\"span\");\n\n        cursor.classList.add(styles[\"collaboration-cursor__caret\"]);\n        cursor.setAttribute(\"style\", `border-color: ${user.color}`);\n\n        const label = document.createElement(\"span\");\n\n        label.classList.add(styles[\"collaboration-cursor__label\"]);\n        label.setAttribute(\"style\", `background-color: ${user.color}`);\n        label.insertBefore(document.createTextNode(user.name), null);\n\n        const nonbreakingSpace1 = document.createTextNode(\"\\u2060\");\n        const nonbreakingSpace2 = document.createTextNode(\"\\u2060\");\n        cursor.insertBefore(nonbreakingSpace1, null);\n        cursor.insertBefore(label, null);\n        cursor.insertBefore(nonbreakingSpace2, null);\n        return cursor;\n      };\n      ret.push(\n        CollaborationCursor.configure({\n          user: opts.collaboration.user,\n          render: opts.collaboration.renderCursor || defaultRender,\n          provider: opts.collaboration.provider,\n        })\n      );\n    }\n  } else {\n    // disable history extension when collaboration is enabled as Yjs takes care of undo / redo\n    ret.push(History);\n  }\n\n  return ret;\n};\n","import { Node } from \"prosemirror-model\";\n\n/**\n * Get a TipTap node by id\n */\nexport function getNodeById(\n  id: string,\n  doc: Node\n): { node: Node; posBeforeNode: number } {\n  let targetNode: Node | undefined = undefined;\n  let posBeforeNode: number | undefined = undefined;\n\n  doc.firstChild!.descendants((node, pos) => {\n    // Skips traversing nodes after node with target ID has been found.\n    if (targetNode) {\n      return false;\n    }\n\n    // Keeps traversing nodes if block with target ID has not been found.\n    if (node.type.name !== \"blockContainer\" || node.attrs.id !== id) {\n      return true;\n    }\n\n    targetNode = node;\n    posBeforeNode = pos + 1;\n\n    return false;\n  });\n\n  if (targetNode === undefined || posBeforeNode === undefined) {\n    throw Error(\"Could not find block in the editor with matching ID.\");\n  }\n\n  return {\n    node: targetNode,\n    posBeforeNode: posBeforeNode,\n  };\n}\n","import { Editor } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\nimport {\n  BlockIdentifier,\n  BlockSchema,\n  PartialBlock,\n} from \"../../extensions/Blocks/api/blockTypes\";\nimport { blockToNode } from \"../nodeConversions/nodeConversions\";\nimport { getNodeById } from \"../util/nodeUtil\";\n\nexport function insertBlocks<BSchema extends BlockSchema>(\n  blocksToInsert: PartialBlock<BSchema>[],\n  referenceBlock: BlockIdentifier,\n  placement: \"before\" | \"after\" | \"nested\" = \"before\",\n  editor: Editor\n): void {\n  const id =\n    typeof referenceBlock === \"string\" ? referenceBlock : referenceBlock.id;\n\n  const nodesToInsert: Node[] = [];\n  for (const blockSpec of blocksToInsert) {\n    nodesToInsert.push(blockToNode(blockSpec, editor.schema));\n  }\n\n  let insertionPos = -1;\n\n  const { node, posBeforeNode } = getNodeById(id, editor.state.doc);\n\n  if (placement === \"before\") {\n    insertionPos = posBeforeNode;\n  }\n\n  if (placement === \"after\") {\n    insertionPos = posBeforeNode + node.nodeSize;\n  }\n\n  if (placement === \"nested\") {\n    // Case if block doesn't already have children.\n    if (node.childCount < 2) {\n      insertionPos = posBeforeNode + node.firstChild!.nodeSize + 1;\n\n      const blockGroupNode = editor.state.schema.nodes[\"blockGroup\"].create(\n        {},\n        nodesToInsert\n      );\n\n      editor.view.dispatch(\n        editor.state.tr.insert(insertionPos, blockGroupNode)\n      );\n\n      return;\n    }\n\n    insertionPos = posBeforeNode + node.firstChild!.nodeSize + 2;\n  }\n\n  editor.view.dispatch(editor.state.tr.insert(insertionPos, nodesToInsert));\n}\n\nexport function updateBlock<BSchema extends BlockSchema>(\n  blockToUpdate: BlockIdentifier,\n  update: PartialBlock<BSchema>,\n  editor: Editor\n) {\n  const id =\n    typeof blockToUpdate === \"string\" ? blockToUpdate : blockToUpdate.id;\n  const { posBeforeNode } = getNodeById(id, editor.state.doc);\n\n  editor.commands.BNUpdateBlock(posBeforeNode + 1, update);\n}\n\nexport function removeBlocks(\n  blocksToRemove: BlockIdentifier[],\n  editor: Editor\n) {\n  const idsOfBlocksToRemove = new Set<string>(\n    blocksToRemove.map((block) =>\n      typeof block === \"string\" ? block : block.id\n    )\n  );\n\n  let removedSize = 0;\n\n  editor.state.doc.descendants((node, pos) => {\n    // Skips traversing nodes after all target blocks have been removed.\n    if (idsOfBlocksToRemove.size === 0) {\n      return false;\n    }\n\n    // Keeps traversing nodes if block with target ID has not been found.\n    if (\n      node.type.name !== \"blockContainer\" ||\n      !idsOfBlocksToRemove.has(node.attrs.id)\n    ) {\n      return true;\n    }\n\n    idsOfBlocksToRemove.delete(node.attrs.id);\n    const oldDocSize = editor.state.doc.nodeSize;\n\n    editor.commands.BNDeleteBlock(pos - removedSize + 1);\n\n    const newDocSize = editor.state.doc.nodeSize;\n    removedSize += oldDocSize - newDocSize;\n\n    return false;\n  });\n\n  if (idsOfBlocksToRemove.size > 0) {\n    const notFoundIds = [...idsOfBlocksToRemove].join(\"\\n\");\n\n    throw Error(\n      \"Blocks with the following IDs could not be found in the editor: \" +\n        notFoundIds\n    );\n  }\n}\n\nexport function replaceBlocks<BSchema extends BlockSchema>(\n  blocksToRemove: BlockIdentifier[],\n  blocksToInsert: PartialBlock<BSchema>[],\n  editor: Editor\n) {\n  insertBlocks(blocksToInsert, blocksToRemove[0], \"before\", editor);\n  removeBlocks(blocksToRemove, editor);\n}\n","import { Element as HASTElement, Parent as HASTParent } from \"hast\";\n\n/**\n * Rehype plugin which removes <u> tags. Used to remove underlines before converting HTML to markdown, as Markdown\n * doesn't support underlines.\n */\nexport function removeUnderlines() {\n  const removeUnderlinesHelper = (tree: HASTParent) => {\n    let numChildElements = tree.children.length;\n\n    for (let i = 0; i < numChildElements; i++) {\n      const node = tree.children[i];\n\n      if (node.type === \"element\") {\n        // Recursively removes underlines from child elements.\n        removeUnderlinesHelper(node);\n\n        if ((node as HASTElement).tagName === \"u\") {\n          // Lifts child nodes outside underline element, deletes the underline element, and updates current index &\n          // the number of child elements.\n          if (node.children.length > 0) {\n            tree.children.splice(i, 1, ...node.children);\n\n            const numElementsAdded = node.children.length - 1;\n            numChildElements += numElementsAdded;\n            i += numElementsAdded;\n          } else {\n            tree.children.splice(i, 1);\n\n            numChildElements--;\n            i--;\n          }\n        }\n      }\n    }\n  };\n\n  return removeUnderlinesHelper;\n}\n","import { Element as HASTElement, Parent as HASTParent } from \"hast\";\nimport { fromDom } from \"hast-util-from-dom\";\n\ntype SimplifyBlocksOptions = {\n  orderedListItemBlockTypes: Set<string>;\n  unorderedListItemBlockTypes: Set<string>;\n};\n\n/**\n * Rehype plugin which converts the HTML output string rendered by BlockNote into a simplified structure which better\n * follows HTML standards. It does several things:\n * - Removes all block related div elements, leaving only the actual content inside the block.\n * - Lifts nested blocks to a higher level for all block types that don't represent list items.\n * - Wraps blocks which represent list items in corresponding ul/ol HTML elements and restructures them to comply\n * with HTML list structure.\n * @param options Options for specifying which block types represent ordered and unordered list items.\n */\nexport function simplifyBlocks(options: SimplifyBlocksOptions) {\n  const listItemBlockTypes = new Set<string>([\n    ...options.orderedListItemBlockTypes,\n    ...options.unorderedListItemBlockTypes,\n  ]);\n\n  const simplifyBlocksHelper = (tree: HASTParent) => {\n    let numChildElements = tree.children.length;\n    let activeList: HASTElement | undefined;\n\n    for (let i = 0; i < numChildElements; i++) {\n      const blockOuter = tree.children[i] as HASTElement;\n      const blockContainer = blockOuter.children[0] as HASTElement;\n      const blockContent = blockContainer.children[0] as HASTElement;\n      const blockGroup =\n        blockContainer.children.length === 2\n          ? (blockContainer.children[1] as HASTElement)\n          : null;\n\n      const isListItemBlock = listItemBlockTypes.has(\n        blockContent.properties![\"dataContentType\"] as string\n      );\n\n      const listItemBlockType = isListItemBlock\n        ? options.orderedListItemBlockTypes.has(\n            blockContent.properties![\"dataContentType\"] as string\n          )\n          ? \"ol\"\n          : \"ul\"\n        : null;\n\n      // Plugin runs recursively to process nested blocks.\n      if (blockGroup !== null) {\n        simplifyBlocksHelper(blockGroup);\n      }\n\n      // Checks that there is an active list, but the block can't be added to it as it's of a different type.\n      if (activeList && activeList.tagName !== listItemBlockType) {\n        // Blocks that were copied into the list are removed and the list is inserted in their place.\n        tree.children.splice(\n          i - activeList.children.length,\n          activeList.children.length,\n          activeList\n        );\n\n        // Updates the current index and number of child elements.\n        const numElementsRemoved = activeList.children.length - 1;\n        i -= numElementsRemoved;\n        numChildElements -= numElementsRemoved;\n\n        activeList = undefined;\n      }\n\n      // Checks if the block represents a list item.\n      if (isListItemBlock) {\n        // Checks if a list isn't already active. We don't have to check if the block and the list are of the same\n        // type as this was already done earlier.\n        if (!activeList) {\n          // Creates a new list element to represent an active list.\n          activeList = fromDom(\n            document.createElement(listItemBlockType!)\n          ) as HASTElement;\n        }\n\n        // Creates a new list item element to represent the block.\n        const listItemElement = fromDom(\n          document.createElement(\"li\")\n        ) as HASTElement;\n\n        // Adds only the content inside the block to the active list.\n        listItemElement.children.push(blockContent.children[0]);\n        // Nested blocks have already been processed in the recursive function call, so the resulting elements are\n        // also added to the active list.\n        if (blockGroup !== null) {\n          listItemElement.children.push(...blockGroup.children);\n        }\n\n        // Adds the list item representing the block to the active list.\n        activeList.children.push(listItemElement);\n      } else if (blockGroup !== null) {\n        // Lifts all children out of the current block, as only list items should allow nesting.\n        tree.children.splice(i + 1, 0, ...blockGroup.children);\n        // Replaces the block with only the content inside it.\n        tree.children[i] = blockContent.children[0];\n\n        // Updates the current index and number of child elements.\n        const numElementsAdded = blockGroup.children.length;\n        i += numElementsAdded;\n        numChildElements += numElementsAdded;\n      } else {\n        // Replaces the block with only the content inside it.\n        tree.children[i] = blockContent.children[0];\n      }\n    }\n\n    // Since the active list is only inserted after encountering a block which can't be added to it, there are cases\n    // where it remains un-inserted after processing all blocks, which are handled here.\n    if (activeList) {\n      tree.children.splice(\n        numChildElements - activeList.children.length,\n        activeList.children.length,\n        activeList\n      );\n    }\n  };\n\n  return simplifyBlocksHelper;\n}\n","import { DOMParser, DOMSerializer, Schema } from \"prosemirror-model\";\nimport rehypeParse from \"rehype-parse\";\nimport rehypeRemark from \"rehype-remark\";\nimport rehypeStringify from \"rehype-stringify\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkParse from \"remark-parse\";\nimport remarkRehype, { defaultHandlers } from \"remark-rehype\";\nimport remarkStringify from \"remark-stringify\";\nimport { unified } from \"unified\";\nimport { Block, BlockSchema } from \"../../extensions/Blocks/api/blockTypes\";\n\nimport { blockToNode, nodeToBlock } from \"../nodeConversions/nodeConversions\";\nimport { removeUnderlines } from \"./removeUnderlinesRehypePlugin\";\nimport { simplifyBlocks } from \"./simplifyBlocksRehypePlugin\";\n\nexport async function blocksToHTML<BSchema extends BlockSchema>(\n  blocks: Block<BSchema>[],\n  schema: Schema\n): Promise<string> {\n  const htmlParentElement = document.createElement(\"div\");\n  const serializer = DOMSerializer.fromSchema(schema);\n\n  for (const block of blocks) {\n    const node = blockToNode(block, schema);\n    const htmlNode = serializer.serializeNode(node);\n    htmlParentElement.appendChild(htmlNode);\n  }\n\n  const htmlString = await unified()\n    .use(rehypeParse, { fragment: true })\n    .use(simplifyBlocks, {\n      orderedListItemBlockTypes: new Set<string>([\"numberedListItem\"]),\n      unorderedListItemBlockTypes: new Set<string>([\"bulletListItem\"]),\n    })\n    .use(rehypeStringify)\n    .process(htmlParentElement.innerHTML);\n\n  return htmlString.value as string;\n}\n\nexport async function HTMLToBlocks<BSchema extends BlockSchema>(\n  html: string,\n  blockSchema: BSchema,\n  schema: Schema\n): Promise<Block<BSchema>[]> {\n  const htmlNode = document.createElement(\"div\");\n  htmlNode.innerHTML = html.trim();\n\n  const parser = DOMParser.fromSchema(schema);\n  const parentNode = parser.parse(htmlNode); //, { preserveWhitespace: \"full\" });\n\n  const blocks: Block<BSchema>[] = [];\n\n  for (let i = 0; i < parentNode.firstChild!.childCount; i++) {\n    blocks.push(nodeToBlock(parentNode.firstChild!.child(i), blockSchema));\n  }\n\n  return blocks;\n}\n\nexport async function blocksToMarkdown<BSchema extends BlockSchema>(\n  blocks: Block<BSchema>[],\n  schema: Schema\n): Promise<string> {\n  const markdownString = await unified()\n    .use(rehypeParse, { fragment: true })\n    .use(removeUnderlines)\n    .use(rehypeRemark)\n    .use(remarkGfm)\n    .use(remarkStringify)\n    .process(await blocksToHTML(blocks, schema));\n\n  return markdownString.value as string;\n}\n\n// modefied version of https://github.com/syntax-tree/mdast-util-to-hast/blob/main/lib/handlers/code.js\n// that outputs a data-language attribute instead of a CSS class (e.g.: language-typescript)\nfunction code(state: any, node: any) {\n  const value = node.value ? node.value + \"\\n\" : \"\";\n  /** @type {Properties} */\n  const properties: any = {};\n\n  if (node.lang) {\n    // changed line\n    properties[\"data-language\"] = node.lang;\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result: any = {\n    type: \"element\",\n    tagName: \"code\",\n    properties,\n    children: [{ type: \"text\", value }],\n  };\n\n  if (node.meta) {\n    result.data = { meta: node.meta };\n  }\n\n  state.patch(node, result);\n  result = state.applyData(node, result);\n\n  // Create `<pre>`.\n  result = {\n    type: \"element\",\n    tagName: \"pre\",\n    properties: {},\n    children: [result],\n  };\n  state.patch(node, result);\n  return result;\n}\n\nexport async function markdownToBlocks<BSchema extends BlockSchema>(\n  markdown: string,\n  blockSchema: BSchema,\n  schema: Schema\n): Promise<Block<BSchema>[]> {\n  const htmlString = await unified()\n    .use(remarkParse)\n    .use(remarkGfm)\n    .use(remarkRehype, {\n      handlers: {\n        ...(defaultHandlers as any),\n        code,\n      },\n    })\n    .use(rehypeStringify)\n    .process(markdown);\n\n  return HTMLToBlocks(htmlString.value as string, blockSchema, schema);\n}\n","import { isNodeSelection, isTextSelection, posToDOMRect } from \"@tiptap/core\";\nimport { EditorState, Plugin, PluginKey } from \"prosemirror-state\";\nimport { EditorView } from \"prosemirror-view\";\nimport {\n  BaseUiElementCallbacks,\n  BaseUiElementState,\n  BlockNoteEditor,\n  BlockSchema,\n} from \"../..\";\nimport { EventEmitter } from \"../../shared/EventEmitter\";\n\nexport type FormattingToolbarCallbacks = BaseUiElementCallbacks;\n\nexport type FormattingToolbarState = BaseUiElementState;\n\nexport class FormattingToolbarView<BSchema extends BlockSchema> {\n  private formattingToolbarState?: FormattingToolbarState;\n  public updateFormattingToolbar: () => void;\n\n  public preventHide = false;\n  public preventShow = false;\n  public prevWasEditable: boolean | null = null;\n\n  public shouldShow: (props: {\n    view: EditorView;\n    state: EditorState;\n    from: number;\n    to: number;\n  }) => boolean = ({ view, state, from, to }) => {\n    const { doc, selection } = state;\n    const { empty } = selection;\n\n    // Sometime check for `empty` is not enough.\n    // Doubleclick an empty paragraph returns a node size of 2.\n    // So we check also for an empty text size.\n    const isEmptyTextBlock =\n      !doc.textBetween(from, to).length && isTextSelection(state.selection);\n\n    return !(!view.hasFocus() || empty || isEmptyTextBlock);\n  };\n\n  constructor(\n    private readonly editor: BlockNoteEditor<BSchema>,\n    private readonly pmView: EditorView,\n    updateFormattingToolbar: (\n      formattingToolbarState: FormattingToolbarState\n    ) => void\n  ) {\n    this.updateFormattingToolbar = () => {\n      if (!this.formattingToolbarState) {\n        throw new Error(\n          \"Attempting to update uninitialized formatting toolbar\"\n        );\n      }\n\n      updateFormattingToolbar(this.formattingToolbarState);\n    };\n\n    pmView.dom.addEventListener(\"mousedown\", this.viewMousedownHandler);\n    pmView.dom.addEventListener(\"mouseup\", this.viewMouseupHandler);\n    pmView.dom.addEventListener(\"dragstart\", this.dragstartHandler);\n\n    pmView.dom.addEventListener(\"focus\", this.focusHandler);\n    pmView.dom.addEventListener(\"blur\", this.blurHandler);\n\n    document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n\n  viewMousedownHandler = () => {\n    this.preventShow = true;\n  };\n\n  viewMouseupHandler = () => {\n    this.preventShow = false;\n    setTimeout(() => this.update(this.pmView));\n  };\n\n  // For dragging the whole editor.\n  dragstartHandler = () => {\n    if (this.formattingToolbarState?.show) {\n      this.formattingToolbarState.show = false;\n      this.updateFormattingToolbar();\n    }\n  };\n\n  focusHandler = () => {\n    // we use `setTimeout` to make sure `selection` is already updated\n    setTimeout(() => this.update(this.pmView));\n  };\n\n  blurHandler = (event: FocusEvent) => {\n    if (this.preventHide) {\n      this.preventHide = false;\n\n      return;\n    }\n\n    const editorWrapper = this.pmView.dom.parentElement!;\n\n    // Checks if the focus is moving to an element outside the editor. If it is,\n    // the toolbar is hidden.\n    if (\n      // An element is clicked.\n      event &&\n      event.relatedTarget &&\n      // Element is inside the editor.\n      (editorWrapper === (event.relatedTarget as Node) ||\n        editorWrapper.contains(event.relatedTarget as Node))\n    ) {\n      return;\n    }\n\n    if (this.formattingToolbarState?.show) {\n      this.formattingToolbarState.show = false;\n      this.updateFormattingToolbar();\n    }\n  };\n\n  scrollHandler = () => {\n    if (this.formattingToolbarState?.show) {\n      this.formattingToolbarState.referencePos = this.getSelectionBoundingBox();\n      this.updateFormattingToolbar();\n    }\n  };\n\n  update(view: EditorView, oldState?: EditorState) {\n    const { state, composing } = view;\n    const { doc, selection } = state;\n    const isSame =\n      oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n\n    if (\n      (this.prevWasEditable === null ||\n        this.prevWasEditable === this.editor.isEditable) &&\n      (composing || isSame)\n    ) {\n      return;\n    }\n\n    this.prevWasEditable = this.editor.isEditable;\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    const shouldShow = this.shouldShow?.({\n      view,\n      state,\n      from,\n      to,\n    });\n\n    // Checks if menu should be shown/updated.\n    if (\n      this.editor.isEditable &&\n      !this.preventShow &&\n      (shouldShow || this.preventHide)\n    ) {\n      this.formattingToolbarState = {\n        show: true,\n        referencePos: this.getSelectionBoundingBox(),\n      };\n\n      this.updateFormattingToolbar();\n\n      return;\n    }\n\n    // Checks if menu should be hidden.\n    if (\n      this.formattingToolbarState?.show &&\n      !this.preventHide &&\n      (!shouldShow || this.preventShow || !this.editor.isEditable)\n    ) {\n      this.formattingToolbarState.show = false;\n      this.updateFormattingToolbar();\n\n      return;\n    }\n  }\n\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler);\n    this.pmView.dom.removeEventListener(\"mouseup\", this.viewMouseupHandler);\n    this.pmView.dom.removeEventListener(\"dragstart\", this.dragstartHandler);\n\n    this.pmView.dom.removeEventListener(\"focus\", this.focusHandler);\n    this.pmView.dom.removeEventListener(\"blur\", this.blurHandler);\n\n    document.removeEventListener(\"scroll\", this.scrollHandler);\n  }\n\n  getSelectionBoundingBox() {\n    const { state } = this.pmView;\n    const { selection } = state;\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    if (isNodeSelection(selection)) {\n      const node = this.pmView.nodeDOM(from) as HTMLElement;\n\n      if (node) {\n        return node.getBoundingClientRect();\n      }\n    }\n\n    return posToDOMRect(this.pmView, from, to);\n  }\n}\n\nexport const formattingToolbarPluginKey = new PluginKey(\n  \"FormattingToolbarPlugin\"\n);\n\nexport class FormattingToolbarProsemirrorPlugin<\n  BSchema extends BlockSchema\n> extends EventEmitter<any> {\n  private view: FormattingToolbarView<BSchema> | undefined;\n  public readonly plugin: Plugin;\n\n  constructor(editor: BlockNoteEditor<BSchema>) {\n    super();\n    this.plugin = new Plugin({\n      key: formattingToolbarPluginKey,\n      view: (editorView) => {\n        this.view = new FormattingToolbarView(editor, editorView, (state) => {\n          this.emit(\"update\", state);\n        });\n        return this.view;\n      },\n    });\n  }\n\n  public onUpdate(callback: (state: FormattingToolbarState) => void) {\n    return this.on(\"update\", callback);\n  }\n}\n","import { getMarkRange, posToDOMRect, Range } from \"@tiptap/core\";\nimport { EditorView } from \"@tiptap/pm/view\";\nimport { Mark } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport { BaseUiElementState } from \"../../shared/BaseUiElementTypes\";\nimport { EventEmitter } from \"../../shared/EventEmitter\";\nimport { BlockSchema } from \"../Blocks/api/blockTypes\";\n\nexport type HyperlinkToolbarState = BaseUiElementState & {\n  // The hovered hyperlink's URL, and the text it's displayed with in the\n  // editor.\n  url: string;\n  text: string;\n};\n\nclass HyperlinkToolbarView<BSchema extends BlockSchema> {\n  private hyperlinkToolbarState?: HyperlinkToolbarState;\n  public updateHyperlinkToolbar: () => void;\n\n  menuUpdateTimer: NodeJS.Timeout | undefined;\n  startMenuUpdateTimer: () => void;\n  stopMenuUpdateTimer: () => void;\n\n  mouseHoveredHyperlinkMark: Mark | undefined;\n  mouseHoveredHyperlinkMarkRange: Range | undefined;\n\n  keyboardHoveredHyperlinkMark: Mark | undefined;\n  keyboardHoveredHyperlinkMarkRange: Range | undefined;\n\n  hyperlinkMark: Mark | undefined;\n  hyperlinkMarkRange: Range | undefined;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<BSchema>,\n    private readonly pmView: EditorView,\n    updateHyperlinkToolbar: (\n      hyperlinkToolbarState: HyperlinkToolbarState\n    ) => void\n  ) {\n    this.updateHyperlinkToolbar = () => {\n      if (!this.hyperlinkToolbarState) {\n        throw new Error(\"Attempting to update uninitialized hyperlink toolbar\");\n      }\n\n      updateHyperlinkToolbar(this.hyperlinkToolbarState);\n    };\n\n    this.startMenuUpdateTimer = () => {\n      this.menuUpdateTimer = setTimeout(() => {\n        this.update();\n      }, 250);\n    };\n\n    this.stopMenuUpdateTimer = () => {\n      if (this.menuUpdateTimer) {\n        clearTimeout(this.menuUpdateTimer);\n        this.menuUpdateTimer = undefined;\n      }\n\n      return false;\n    };\n\n    this.pmView.dom.addEventListener(\"mouseover\", this.mouseOverHandler);\n    document.addEventListener(\"click\", this.clickHandler, true);\n    document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n\n  mouseOverHandler = (event: MouseEvent) => {\n    // Resets the hyperlink mark currently hovered by the mouse cursor.\n    this.mouseHoveredHyperlinkMark = undefined;\n    this.mouseHoveredHyperlinkMarkRange = undefined;\n\n    this.stopMenuUpdateTimer();\n\n    if (\n      event.target instanceof HTMLAnchorElement &&\n      event.target.nodeName === \"A\"\n    ) {\n      // Finds link mark at the hovered element's position to update mouseHoveredHyperlinkMark and\n      // mouseHoveredHyperlinkMarkRange.\n      const hoveredHyperlinkElement = event.target;\n      const posInHoveredHyperlinkMark =\n        this.pmView.posAtDOM(hoveredHyperlinkElement, 0) + 1;\n      const resolvedPosInHoveredHyperlinkMark = this.pmView.state.doc.resolve(\n        posInHoveredHyperlinkMark\n      );\n      const marksAtPos = resolvedPosInHoveredHyperlinkMark.marks();\n\n      for (const mark of marksAtPos) {\n        if (\n          mark.type.name === this.pmView.state.schema.mark(\"link\").type.name\n        ) {\n          this.mouseHoveredHyperlinkMark = mark;\n          this.mouseHoveredHyperlinkMarkRange =\n            getMarkRange(\n              resolvedPosInHoveredHyperlinkMark,\n              mark.type,\n              mark.attrs\n            ) || undefined;\n\n          break;\n        }\n      }\n    }\n\n    this.startMenuUpdateTimer();\n\n    return false;\n  };\n\n  clickHandler = (event: MouseEvent) => {\n    const editorWrapper = this.pmView.dom.parentElement!;\n\n    if (\n      // Toolbar is open.\n      this.hyperlinkMark &&\n      // An element is clicked.\n      event &&\n      event.target &&\n      // The clicked element is not the editor.\n      !(\n        editorWrapper === (event.target as Node) ||\n        editorWrapper.contains(event.target as Node)\n      )\n    ) {\n      if (this.hyperlinkToolbarState?.show) {\n        this.hyperlinkToolbarState.show = false;\n        this.updateHyperlinkToolbar();\n      }\n    }\n  };\n\n  scrollHandler = () => {\n    if (this.hyperlinkMark !== undefined) {\n      if (this.hyperlinkToolbarState?.show) {\n        this.hyperlinkToolbarState.referencePos = posToDOMRect(\n          this.pmView,\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.to\n        );\n        this.updateHyperlinkToolbar();\n      }\n    }\n  };\n\n  editHyperlink(url: string, text: string) {\n    const tr = this.pmView.state.tr.insertText(\n      text,\n      this.hyperlinkMarkRange!.from,\n      this.hyperlinkMarkRange!.to\n    );\n    tr.addMark(\n      this.hyperlinkMarkRange!.from,\n      this.hyperlinkMarkRange!.from + text.length,\n      this.pmView.state.schema.mark(\"link\", { href: url })\n    );\n    this.pmView.dispatch(tr);\n    this.pmView.focus();\n\n    if (this.hyperlinkToolbarState?.show) {\n      this.hyperlinkToolbarState.show = false;\n      this.updateHyperlinkToolbar();\n    }\n  }\n\n  deleteHyperlink() {\n    this.pmView.dispatch(\n      this.pmView.state.tr\n        .removeMark(\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.to,\n          this.hyperlinkMark!.type\n        )\n        .setMeta(\"preventAutolink\", true)\n    );\n    this.pmView.focus();\n\n    if (this.hyperlinkToolbarState?.show) {\n      this.hyperlinkToolbarState.show = false;\n      this.updateHyperlinkToolbar();\n    }\n  }\n\n  update() {\n    if (!this.pmView.hasFocus()) {\n      return;\n    }\n\n    // Saves the currently hovered hyperlink mark before it's updated.\n    const prevHyperlinkMark = this.hyperlinkMark;\n\n    // Resets the currently hovered hyperlink mark.\n    this.hyperlinkMark = undefined;\n    this.hyperlinkMarkRange = undefined;\n\n    // Resets the hyperlink mark currently hovered by the keyboard cursor.\n    this.keyboardHoveredHyperlinkMark = undefined;\n    this.keyboardHoveredHyperlinkMarkRange = undefined;\n\n    // Finds link mark at the editor selection's position to update keyboardHoveredHyperlinkMark and\n    // keyboardHoveredHyperlinkMarkRange.\n    if (this.pmView.state.selection.empty) {\n      const marksAtPos = this.pmView.state.selection.$from.marks();\n\n      for (const mark of marksAtPos) {\n        if (\n          mark.type.name === this.pmView.state.schema.mark(\"link\").type.name\n        ) {\n          this.keyboardHoveredHyperlinkMark = mark;\n          this.keyboardHoveredHyperlinkMarkRange =\n            getMarkRange(\n              this.pmView.state.selection.$from,\n              mark.type,\n              mark.attrs\n            ) || undefined;\n\n          break;\n        }\n      }\n    }\n\n    if (this.mouseHoveredHyperlinkMark) {\n      this.hyperlinkMark = this.mouseHoveredHyperlinkMark;\n      this.hyperlinkMarkRange = this.mouseHoveredHyperlinkMarkRange;\n    }\n\n    // Keyboard cursor position takes precedence over mouse hovered hyperlink.\n    if (this.keyboardHoveredHyperlinkMark) {\n      this.hyperlinkMark = this.keyboardHoveredHyperlinkMark;\n      this.hyperlinkMarkRange = this.keyboardHoveredHyperlinkMarkRange;\n    }\n\n    if (this.hyperlinkMark && this.editor.isEditable) {\n      this.hyperlinkToolbarState = {\n        show: true,\n        referencePos: posToDOMRect(\n          this.pmView,\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.to\n        ),\n        url: this.hyperlinkMark!.attrs.href,\n        text: this.pmView.state.doc.textBetween(\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.to\n        ),\n      };\n      this.updateHyperlinkToolbar();\n\n      return;\n    }\n\n    // Hides menu.\n    if (\n      this.hyperlinkToolbarState?.show &&\n      prevHyperlinkMark &&\n      (!this.hyperlinkMark || !this.editor.isEditable)\n    ) {\n      this.hyperlinkToolbarState.show = false;\n      this.updateHyperlinkToolbar();\n\n      return;\n    }\n  }\n\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mouseover\", this.mouseOverHandler);\n    document.removeEventListener(\"scroll\", this.scrollHandler);\n    document.removeEventListener(\"click\", this.clickHandler, true);\n  }\n}\n\nexport const hyperlinkToolbarPluginKey = new PluginKey(\n  \"HyperlinkToolbarPlugin\"\n);\n\nexport class HyperlinkToolbarProsemirrorPlugin<\n  BSchema extends BlockSchema\n> extends EventEmitter<any> {\n  private view: HyperlinkToolbarView<BSchema> | undefined;\n  public readonly plugin: Plugin;\n\n  constructor(editor: BlockNoteEditor<BSchema>) {\n    super();\n    this.plugin = new Plugin({\n      key: hyperlinkToolbarPluginKey,\n      view: (editorView) => {\n        this.view = new HyperlinkToolbarView(editor, editorView, (state) => {\n          this.emit(\"update\", state);\n        });\n        return this.view;\n      },\n    });\n  }\n\n  public onUpdate(callback: (state: HyperlinkToolbarState) => void) {\n    return this.on(\"update\", callback);\n  }\n\n  /**\n   * Edit the currently hovered hyperlink.\n   */\n  public editHyperlink = (url: string, text: string) => {\n    this.view!.editHyperlink(url, text);\n  };\n\n  /**\n   * Delete the currently hovered hyperlink.\n   */\n  public deleteHyperlink = () => {\n    this.view!.deleteHyperlink();\n  };\n\n  /**\n   * When hovering on/off hyperlinks using the mouse cursor, the hyperlink\n   * toolbar will open & close with a delay.\n   *\n   * This function starts the delay timer, and should be used for when the mouse cursor enters the hyperlink toolbar.\n   */\n  public startHideTimer = () => {\n    this.view!.startMenuUpdateTimer();\n  };\n\n  /**\n   * When hovering on/off hyperlinks using the mouse cursor, the hyperlink\n   * toolbar will open & close with a delay.\n   *\n   * This function stops the delay timer, and should be used for when the mouse cursor exits the hyperlink toolbar.\n   */\n  public stopHideTimer = () => {\n    this.view!.stopMenuUpdateTimer();\n  };\n}\n","import { Fragment, Node, ResolvedPos, Slice } from \"prosemirror-model\";\nimport { Selection } from \"prosemirror-state\";\nimport { Mappable } from \"prosemirror-transform\";\n\n/**\n * This class represents an editor selection which spans multiple nodes/blocks. It's currently only used to allow users\n * to drag multiple blocks at the same time. Expects the selection anchor and head to be between nodes, i.e. just before\n * the first target node and just after the last, and that anchor and head are at the same nesting level.\n *\n * Partially based on ProseMirror's NodeSelection implementation:\n * (https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.ts)\n * MultipleNodeSelection differs from NodeSelection in the following ways:\n * 1. Stores which nodes are included in the selection instead of just a single node.\n * 2. Already expects the selection to start just before the first target node and ends just after the last, while a\n * NodeSelection automatically sets both anchor and head to just before the single target node.\n */\nexport class MultipleNodeSelection extends Selection {\n  nodes: Array<Node>;\n\n  constructor($anchor: ResolvedPos, $head: ResolvedPos) {\n    super($anchor, $head);\n\n    // Parent is at the same nesting level as anchor/head since they are just before/ just after target nodes.\n    const parentNode = $anchor.node();\n\n    this.nodes = [];\n    $anchor.doc.nodesBetween($anchor.pos, $head.pos, (node, _pos, parent) => {\n      if (parent !== null && parent.eq(parentNode)) {\n        this.nodes.push(node);\n        return false;\n      }\n      return;\n    });\n  }\n\n  static create(doc: Node, from: number, to = from): MultipleNodeSelection {\n    return new MultipleNodeSelection(doc.resolve(from), doc.resolve(to));\n  }\n\n  content(): Slice {\n    return new Slice(Fragment.from(this.nodes), 0, 0);\n  }\n\n  eq(selection: Selection): boolean {\n    if (!(selection instanceof MultipleNodeSelection)) {\n      return false;\n    }\n\n    if (this.nodes.length !== selection.nodes.length) {\n      return false;\n    }\n\n    if (this.from !== selection.from || this.to !== selection.to) {\n      return false;\n    }\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      if (!this.nodes[i].eq(selection.nodes[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  map(doc: Node, mapping: Mappable): Selection {\n    const fromResult = mapping.mapResult(this.from);\n    const toResult = mapping.mapResult(this.to);\n\n    if (toResult.deleted) {\n      return Selection.near(doc.resolve(fromResult.pos));\n    }\n\n    if (fromResult.deleted) {\n      return Selection.near(doc.resolve(toResult.pos));\n    }\n\n    return new MultipleNodeSelection(\n      doc.resolve(fromResult.pos),\n      doc.resolve(toResult.pos)\n    );\n  }\n\n  toJSON(): any {\n    return { type: \"node\", anchor: this.anchor, head: this.head };\n  }\n}\n","import { PluginView } from \"@tiptap/pm/state\";\nimport { Node } from \"prosemirror-model\";\nimport { NodeSelection, Plugin, PluginKey, Selection } from \"prosemirror-state\";\nimport * as pv from \"prosemirror-view\";\nimport { EditorView } from \"prosemirror-view\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport styles from \"../../editor.module.css\";\nimport { BaseUiElementState } from \"../../shared/BaseUiElementTypes\";\nimport { EventEmitter } from \"../../shared/EventEmitter\";\nimport { Block, BlockSchema } from \"../Blocks/api/blockTypes\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\nimport { slashMenuPluginKey } from \"../SlashMenu/SlashMenuPlugin\";\nimport { MultipleNodeSelection } from \"./MultipleNodeSelection\";\n\nconst serializeForClipboard = (pv as any).__serializeForClipboard;\n// code based on https://github.com/ueberdosis/tiptap/issues/323#issuecomment-506637799\n\nlet dragImageElement: Element | undefined;\n\nexport type SideMenuState<BSchema extends BlockSchema> = BaseUiElementState & {\n  // The block that the side menu is attached to.\n  block: Block<BSchema>;\n};\n\nfunction getDraggableBlockFromCoords(\n  coords: { left: number; top: number },\n  view: EditorView\n) {\n  if (!view.dom.isConnected) {\n    // view is not connected to the DOM, this can cause posAtCoords to fail\n    // (Cannot read properties of null (reading 'nearestDesc'), https://github.com/TypeCellOS/BlockNote/issues/123)\n    return undefined;\n  }\n\n  const pos = view.posAtCoords(coords);\n  if (!pos) {\n    return undefined;\n  }\n  let node = view.domAtPos(pos.pos).node as HTMLElement;\n\n  if (node === view.dom) {\n    // mouse over root\n    return undefined;\n  }\n\n  while (\n    node &&\n    node.parentNode &&\n    node.parentNode !== view.dom &&\n    !node.hasAttribute?.(\"data-id\")\n  ) {\n    node = node.parentNode as HTMLElement;\n  }\n  if (!node) {\n    return undefined;\n  }\n  return { node, id: node.getAttribute(\"data-id\")! };\n}\n\nfunction blockPositionFromCoords(\n  coords: { left: number; top: number },\n  view: EditorView\n) {\n  const block = getDraggableBlockFromCoords(coords, view);\n\n  if (block && block.node.nodeType === 1) {\n    // TODO: this uses undocumented PM APIs? do we need this / let's add docs?\n    const docView = (view as any).docView;\n    const desc = docView.nearestDesc(block.node, true);\n    if (!desc || desc === docView) {\n      return null;\n    }\n    return desc.posBefore;\n  }\n  return null;\n}\n\nfunction blockPositionsFromSelection(selection: Selection, doc: Node) {\n  // Absolute positions just before the first block spanned by the selection, and just after the last block. Having the\n  // selection start and end just before and just after the target blocks ensures no whitespace/line breaks are left\n  // behind after dragging & dropping them.\n  let beforeFirstBlockPos: number;\n  let afterLastBlockPos: number;\n\n  // Even the user starts dragging blocks but drops them in the same place, the selection will still be moved just\n  // before & just after the blocks spanned by the selection, and therefore doesn't need to change if they try to drag\n  // the same blocks again. If this happens, the anchor & head move out of the block content node they were originally\n  // in. If the anchor should update but the head shouldn't and vice versa, it means the user selection is outside a\n  // block content node, which should never happen.\n  const selectionStartInBlockContent =\n    doc.resolve(selection.from).node().type.spec.group === \"blockContent\";\n  const selectionEndInBlockContent =\n    doc.resolve(selection.to).node().type.spec.group === \"blockContent\";\n\n  // Ensures that entire outermost nodes are selected if the selection spans multiple nesting levels.\n  const minDepth = Math.min(selection.$anchor.depth, selection.$head.depth);\n\n  if (selectionStartInBlockContent && selectionEndInBlockContent) {\n    // Absolute positions at the start of the first block in the selection and at the end of the last block. User\n    // selections will always start and end in block content nodes, but we want the start and end positions of their\n    // parent block nodes, which is why minDepth - 1 is used.\n    const startFirstBlockPos = selection.$from.start(minDepth - 1);\n    const endLastBlockPos = selection.$to.end(minDepth - 1);\n\n    // Shifting start and end positions by one moves them just outside the first and last selected blocks.\n    beforeFirstBlockPos = doc.resolve(startFirstBlockPos - 1).pos;\n    afterLastBlockPos = doc.resolve(endLastBlockPos + 1).pos;\n  } else {\n    beforeFirstBlockPos = selection.from;\n    afterLastBlockPos = selection.to;\n  }\n\n  return { from: beforeFirstBlockPos, to: afterLastBlockPos };\n}\n\nfunction setDragImage(view: EditorView, from: number, to = from) {\n  if (from === to) {\n    // Moves to position to be just after the first (and only) selected block.\n    to += view.state.doc.resolve(from + 1).node().nodeSize;\n  }\n\n  // Parent element is cloned to remove all unselected children without affecting the editor content.\n  const parentClone = view.domAtPos(from).node.cloneNode(true) as Element;\n  const parent = view.domAtPos(from).node as Element;\n\n  const getElementIndex = (parentElement: Element, targetElement: Element) =>\n    Array.prototype.indexOf.call(parentElement.children, targetElement);\n\n  const firstSelectedBlockIndex = getElementIndex(\n    parent,\n    // Expects from position to be just before the first selected block.\n    view.domAtPos(from + 1).node.parentElement!\n  );\n  const lastSelectedBlockIndex = getElementIndex(\n    parent,\n    // Expects to position to be just after the last selected block.\n    view.domAtPos(to - 1).node.parentElement!\n  );\n\n  for (let i = parent.childElementCount - 1; i >= 0; i--) {\n    if (i > lastSelectedBlockIndex || i < firstSelectedBlockIndex) {\n      parentClone.removeChild(parentClone.children[i]);\n    }\n  }\n\n  // dataTransfer.setDragImage(element) only works if element is attached to the DOM.\n  unsetDragImage();\n  dragImageElement = parentClone;\n\n  // TODO: This is hacky, need a better way of assigning classes to the editor so that they can also be applied to the\n  //  drag preview.\n  const classes = view.dom.className.split(\" \");\n  const inheritedClasses = classes\n    .filter(\n      (className) =>\n        !className.includes(\"bn\") &&\n        !className.includes(\"ProseMirror\") &&\n        !className.includes(\"editor\")\n    )\n    .join(\" \");\n\n  dragImageElement.className =\n    dragImageElement.className +\n    \" \" +\n    styles.dragPreview +\n    \" \" +\n    inheritedClasses;\n\n  document.body.appendChild(dragImageElement);\n}\n\nfunction unsetDragImage() {\n  if (dragImageElement !== undefined) {\n    document.body.removeChild(dragImageElement);\n    dragImageElement = undefined;\n  }\n}\n\nfunction dragStart(\n  e: { dataTransfer: DataTransfer | null; clientY: number },\n  view: EditorView\n) {\n  if (!e.dataTransfer) {\n    return;\n  }\n\n  const editorBoundingBox = view.dom.getBoundingClientRect();\n\n  const coords = {\n    left: editorBoundingBox.left + editorBoundingBox.width / 2, // take middle of editor\n    top: e.clientY,\n  };\n\n  const pos = blockPositionFromCoords(coords, view);\n  if (pos != null) {\n    const selection = view.state.selection;\n    const doc = view.state.doc;\n\n    const { from, to } = blockPositionsFromSelection(selection, doc);\n\n    const draggedBlockInSelection = from <= pos && pos < to;\n    const multipleBlocksSelected =\n      selection.$anchor.node() !== selection.$head.node() ||\n      selection instanceof MultipleNodeSelection;\n\n    if (draggedBlockInSelection && multipleBlocksSelected) {\n      view.dispatch(\n        view.state.tr.setSelection(MultipleNodeSelection.create(doc, from, to))\n      );\n      setDragImage(view, from, to);\n    } else {\n      view.dispatch(\n        view.state.tr.setSelection(NodeSelection.create(view.state.doc, pos))\n      );\n      setDragImage(view, pos);\n    }\n\n    const slice = view.state.selection.content();\n    const { dom, text } = serializeForClipboard(view, slice);\n\n    e.dataTransfer.clearData();\n    e.dataTransfer.setData(\"text/html\", dom.innerHTML);\n    e.dataTransfer.setData(\"text/plain\", text);\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setDragImage(dragImageElement!, 0, 0);\n    view.dragging = { slice, move: true };\n  }\n}\n\nexport class SideMenuView<BSchema extends BlockSchema> implements PluginView {\n  private sideMenuState?: SideMenuState<BSchema>;\n\n  // When true, the drag handle with be anchored at the same level as root elements\n  // When false, the drag handle with be just to the left of the element\n  // TODO: Is there any case where we want this to be false?\n  private horizontalPosAnchoredAtRoot: boolean;\n  private horizontalPosAnchor: number;\n\n  private hoveredBlock: HTMLElement | undefined;\n\n  // Used to check if currently dragged content comes from this editor instance.\n  public isDragging = false;\n\n  public menuFrozen = false;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<BSchema>,\n    private readonly pmView: EditorView,\n    private readonly updateSideMenu: (\n      sideMenuState: SideMenuState<BSchema>\n    ) => void\n  ) {\n    this.horizontalPosAnchoredAtRoot = true;\n    this.horizontalPosAnchor = (\n      this.pmView.dom.firstChild! as HTMLElement\n    ).getBoundingClientRect().x;\n\n    document.body.addEventListener(\"drop\", this.onDrop, true);\n    document.body.addEventListener(\"dragover\", this.onDragOver);\n    this.pmView.dom.addEventListener(\"dragstart\", this.onDragStart);\n\n    // Shows or updates menu position whenever the cursor moves, if the menu isn't frozen.\n    document.body.addEventListener(\"mousemove\", this.onMouseMove, true);\n\n    // Makes menu scroll with the page.\n    document.addEventListener(\"scroll\", this.onScroll);\n\n    // Hides and unfreezes the menu whenever the user presses a key.\n    document.body.addEventListener(\"keydown\", this.onKeyDown, true);\n  }\n\n  /**\n   * Sets isDragging when dragging text.\n   */\n  onDragStart = () => {\n    this.isDragging = true;\n  };\n\n  /**\n   * If the event is outside the editor contents,\n   * we dispatch a fake event, so that we can still drop the content\n   * when dragging / dropping to the side of the editor\n   */\n  onDrop = (event: DragEvent) => {\n    this.editor._tiptapEditor.commands.blur();\n\n    if ((event as any).synthetic || !this.isDragging) {\n      return;\n    }\n\n    const pos = this.pmView.posAtCoords({\n      left: event.clientX,\n      top: event.clientY,\n    });\n\n    this.isDragging = false;\n\n    if (!pos || pos.inside === -1) {\n      const evt = new Event(\"drop\", event) as any;\n      const editorBoundingBox = (\n        this.pmView.dom.firstChild! as HTMLElement\n      ).getBoundingClientRect();\n      evt.clientX = editorBoundingBox.left + editorBoundingBox.width / 2;\n      evt.clientY = event.clientY;\n      evt.dataTransfer = event.dataTransfer;\n      evt.preventDefault = () => event.preventDefault();\n      evt.synthetic = true; // prevent recursion\n      // console.log(\"dispatch fake drop\");\n      this.pmView.dom.dispatchEvent(evt);\n    }\n  };\n\n  /**\n   * If the event is outside the editor contents,\n   * we dispatch a fake event, so that we can still drop the content\n   * when dragging / dropping to the side of the editor\n   */\n  onDragOver = (event: DragEvent) => {\n    if ((event as any).synthetic || !this.isDragging) {\n      return;\n    }\n    const pos = this.pmView.posAtCoords({\n      left: event.clientX,\n      top: event.clientY,\n    });\n\n    if (!pos || pos.inside === -1) {\n      const evt = new Event(\"dragover\", event) as any;\n      const editorBoundingBox = (\n        this.pmView.dom.firstChild! as HTMLElement\n      ).getBoundingClientRect();\n      evt.clientX = editorBoundingBox.left + editorBoundingBox.width / 2;\n      evt.clientY = event.clientY;\n      evt.dataTransfer = event.dataTransfer;\n      evt.preventDefault = () => event.preventDefault();\n      evt.synthetic = true; // prevent recursion\n      // console.log(\"dispatch fake dragover\");\n      this.pmView.dom.dispatchEvent(evt);\n    }\n  };\n\n  onKeyDown = (_event: KeyboardEvent) => {\n    if (this.sideMenuState?.show) {\n      this.sideMenuState.show = false;\n      this.updateSideMenu(this.sideMenuState);\n    }\n    this.menuFrozen = false;\n  };\n\n  onMouseMove = (event: MouseEvent) => {\n    if (this.menuFrozen) {\n      return;\n    }\n\n    // Editor itself may have padding or other styling which affects\n    // size/position, so we get the boundingRect of the first child (i.e. the\n    // blockGroup that wraps all blocks in the editor) for more accurate side\n    // menu placement.\n    const editorBoundingBox = (\n      this.pmView.dom.firstChild! as HTMLElement\n    ).getBoundingClientRect();\n    // We want the full area of the editor to check if the cursor is hovering\n    // above it though.\n    const editorOuterBoundingBox = this.pmView.dom.getBoundingClientRect();\n    const cursorWithinEditor =\n      event.clientX >= editorOuterBoundingBox.left &&\n      event.clientX <= editorOuterBoundingBox.right &&\n      event.clientY >= editorOuterBoundingBox.top &&\n      event.clientY <= editorOuterBoundingBox.bottom;\n\n    const editorWrapper = this.pmView.dom.parentElement!;\n\n    // Doesn't update if the mouse hovers an element that's over the editor but\n    // isn't a part of it or the side menu.\n    if (\n      // Cursor is within the editor area\n      cursorWithinEditor &&\n      // An element is hovered\n      event &&\n      event.target &&\n      // Element is outside the editor\n      !(\n        editorWrapper === event.target ||\n        editorWrapper.contains(event.target as HTMLElement)\n      )\n    ) {\n      if (this.sideMenuState?.show) {\n        this.sideMenuState.show = false;\n        this.updateSideMenu(this.sideMenuState);\n      }\n\n      return;\n    }\n\n    this.horizontalPosAnchor = editorBoundingBox.x;\n\n    // Gets block at mouse cursor's vertical position.\n    const coords = {\n      left: editorBoundingBox.left + editorBoundingBox.width / 2, // take middle of editor\n      top: event.clientY,\n    };\n    const block = getDraggableBlockFromCoords(coords, this.pmView);\n\n    // Closes the menu if the mouse cursor is beyond the editor vertically.\n    if (!block || !this.editor.isEditable) {\n      if (this.sideMenuState?.show) {\n        this.sideMenuState.show = false;\n        this.updateSideMenu(this.sideMenuState);\n      }\n\n      return;\n    }\n\n    // Doesn't update if the menu is already open and the mouse cursor is still hovering the same block.\n    if (\n      this.sideMenuState?.show &&\n      this.hoveredBlock?.hasAttribute(\"data-id\") &&\n      this.hoveredBlock?.getAttribute(\"data-id\") === block.id\n    ) {\n      return;\n    }\n\n    this.hoveredBlock = block.node;\n\n    // Gets the block's content node, which lets to ignore child blocks when determining the block menu's position.\n    const blockContent = block.node.firstChild as HTMLElement;\n\n    if (!blockContent) {\n      return;\n    }\n\n    // Shows or updates elements.\n    if (this.editor.isEditable) {\n      const blockContentBoundingBox = blockContent.getBoundingClientRect();\n\n      this.sideMenuState = {\n        show: true,\n        referencePos: new DOMRect(\n          this.horizontalPosAnchoredAtRoot\n            ? this.horizontalPosAnchor\n            : blockContentBoundingBox.x,\n          blockContentBoundingBox.y,\n          blockContentBoundingBox.width,\n          blockContentBoundingBox.height\n        ),\n        block: this.editor.getBlock(\n          this.hoveredBlock!.getAttribute(\"data-id\")!\n        )!,\n      };\n\n      this.updateSideMenu(this.sideMenuState);\n    }\n  };\n\n  onScroll = () => {\n    if (this.sideMenuState?.show) {\n      const blockContent = this.hoveredBlock!.firstChild as HTMLElement;\n      const blockContentBoundingBox = blockContent.getBoundingClientRect();\n\n      this.sideMenuState.referencePos = new DOMRect(\n        this.horizontalPosAnchoredAtRoot\n          ? this.horizontalPosAnchor\n          : blockContentBoundingBox.x,\n        blockContentBoundingBox.y,\n        blockContentBoundingBox.width,\n        blockContentBoundingBox.height\n      );\n      this.updateSideMenu(this.sideMenuState);\n    }\n  };\n\n  destroy() {\n    if (this.sideMenuState?.show) {\n      this.sideMenuState.show = false;\n      this.updateSideMenu(this.sideMenuState);\n    }\n    document.body.removeEventListener(\"mousemove\", this.onMouseMove);\n    document.body.removeEventListener(\"dragover\", this.onDragOver);\n    this.pmView.dom.removeEventListener(\"dragstart\", this.onDragStart);\n    document.body.removeEventListener(\"drop\", this.onDrop, true);\n    document.removeEventListener(\"scroll\", this.onScroll);\n    document.body.removeEventListener(\"keydown\", this.onKeyDown, true);\n  }\n\n  addBlock() {\n    if (this.sideMenuState?.show) {\n      this.sideMenuState.show = false;\n      this.updateSideMenu(this.sideMenuState);\n    }\n\n    this.menuFrozen = true;\n\n    const blockContent = this.hoveredBlock!.firstChild! as HTMLElement;\n    const blockContentBoundingBox = blockContent.getBoundingClientRect();\n\n    const pos = this.pmView.posAtCoords({\n      left: blockContentBoundingBox.left + blockContentBoundingBox.width / 2,\n      top: blockContentBoundingBox.top + blockContentBoundingBox.height / 2,\n    });\n    if (!pos) {\n      return;\n    }\n\n    const blockInfo = getBlockInfoFromPos(\n      this.editor._tiptapEditor.state.doc,\n      pos.pos\n    );\n    if (blockInfo === undefined) {\n      return;\n    }\n\n    const { contentNode, endPos } = blockInfo;\n\n    // Creates a new block if current one is not empty for the suggestion menu to open in.\n    if (contentNode.textContent.length !== 0) {\n      const newBlockInsertionPos = endPos + 1;\n      const newBlockContentPos = newBlockInsertionPos + 2;\n\n      this.editor._tiptapEditor\n        .chain()\n        .BNCreateBlock(newBlockInsertionPos)\n        .BNUpdateBlock(newBlockContentPos, { type: \"paragraph\", props: {} })\n        .setTextSelection(newBlockContentPos)\n        .run();\n    } else {\n      this.editor._tiptapEditor.commands.setTextSelection(endPos);\n    }\n\n    // Focuses and activates the suggestion menu.\n    this.pmView.focus();\n    this.pmView.dispatch(\n      this.pmView.state.tr.scrollIntoView().setMeta(slashMenuPluginKey, {\n        // TODO import suggestion plugin key\n        activate: true,\n        type: \"drag\",\n      })\n    );\n  }\n}\n\nexport const sideMenuPluginKey = new PluginKey(\"SideMenuPlugin\");\n\nexport class SideMenuProsemirrorPlugin<\n  BSchema extends BlockSchema\n> extends EventEmitter<any> {\n  private sideMenuView: SideMenuView<BSchema> | undefined;\n  public readonly plugin: Plugin;\n\n  constructor(private readonly editor: BlockNoteEditor<BSchema>) {\n    super();\n    this.plugin = new Plugin({\n      key: sideMenuPluginKey,\n      view: (editorView) => {\n        this.sideMenuView = new SideMenuView(\n          editor,\n          editorView,\n          (sideMenuState) => {\n            this.emit(\"update\", sideMenuState);\n          }\n        );\n        return this.sideMenuView;\n      },\n    });\n  }\n\n  public onUpdate(callback: (state: SideMenuState<BSchema>) => void) {\n    return this.on(\"update\", callback);\n  }\n\n  /**\n   * If the block is empty, opens the slash menu. If the block has content,\n   * creates a new block below and opens the slash menu in it.\n   */\n  addBlock = () => this.sideMenuView!.addBlock();\n\n  /**\n   * Handles drag & drop events for blocks.\n   */\n  blockDragStart = (event: {\n    dataTransfer: DataTransfer | null;\n    clientY: number;\n  }) => {\n    this.sideMenuView!.isDragging = true;\n    dragStart(event, this.editor.prosemirrorView);\n  };\n\n  /**\n   * Handles drag & drop events for blocks.\n   */\n  blockDragEnd = () => unsetDragImage();\n  /**\n   * Freezes the side menu. When frozen, the side menu will stay\n   * attached to the same block regardless of which block is hovered by the\n   * mouse cursor.\n   */\n  freezeMenu = () => (this.sideMenuView!.menuFrozen = true);\n  /**\n   * Unfreezes the side menu. When frozen, the side menu will stay\n   * attached to the same block regardless of which block is hovered by the\n   * mouse cursor.\n   */\n  unfreezeMenu = () => (this.sideMenuView!.menuFrozen = false);\n}\n","import { BlockNoteEditor } from \"../../BlockNoteEditor\";\nimport { BlockSchema, PartialBlock } from \"../Blocks/api/blockTypes\";\nimport { BaseSlashMenuItem } from \"./BaseSlashMenuItem\";\nimport { defaultBlockSchema } from \"../Blocks/api/defaultBlocks\";\n\nfunction insertOrUpdateBlock<BSchema extends BlockSchema>(\n  editor: BlockNoteEditor<BSchema>,\n  block: PartialBlock<BSchema>\n) {\n  const currentBlock = editor.getTextCursorPosition().block;\n\n  if (\n    (currentBlock.content.length === 1 &&\n      currentBlock.content[0].type === \"text\" &&\n      currentBlock.content[0].text === \"/\") ||\n    currentBlock.content.length === 0\n  ) {\n    editor.updateBlock(currentBlock, block);\n  } else {\n    editor.insertBlocks([block], currentBlock, \"after\");\n    editor.setTextCursorPosition(editor.getTextCursorPosition().nextBlock!);\n  }\n}\n\nexport const getDefaultSlashMenuItems = <BSchema extends BlockSchema>(\n  // This type casting is weird, but it's the best way of doing it, as it allows\n  // the schema type to be automatically inferred if it is defined, or be\n  // inferred as any if it is not defined. I don't think it's possible to make it\n  // infer to DefaultBlockSchema if it is not defined.\n  schema: BSchema = defaultBlockSchema as unknown as BSchema\n) => {\n  const slashMenuItems: BaseSlashMenuItem<BSchema>[] = [];\n\n  if (\"heading\" in schema && \"level\" in schema.heading.propSchema) {\n    // Command for creating a level 1 heading\n    if (schema.heading.propSchema.level.values?.includes(\"1\")) {\n      slashMenuItems.push({\n        name: \"Heading\",\n        aliases: [\"h\", \"heading1\", \"h1\"],\n        execute: (editor) =>\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: \"1\" },\n          } as PartialBlock<BSchema>),\n      });\n    }\n\n    // Command for creating a level 2 heading\n    if (schema.heading.propSchema.level.values?.includes(\"2\")) {\n      slashMenuItems.push({\n        name: \"Heading 2\",\n        aliases: [\"h2\", \"heading2\", \"subheading\"],\n        execute: (editor) =>\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: \"2\" },\n          } as PartialBlock<BSchema>),\n      });\n    }\n\n    // Command for creating a level 3 heading\n    if (schema.heading.propSchema.level.values?.includes(\"3\")) {\n      slashMenuItems.push({\n        name: \"Heading 3\",\n        aliases: [\"h3\", \"heading3\", \"subheading\"],\n        execute: (editor) =>\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: \"3\" },\n          } as PartialBlock<BSchema>),\n      });\n    }\n  }\n\n  if (\"bulletListItem\" in schema) {\n    slashMenuItems.push({\n      name: \"Bullet List\",\n      aliases: [\"ul\", \"list\", \"bulletlist\", \"bullet list\"],\n      execute: (editor) =>\n        insertOrUpdateBlock(editor, {\n          type: \"bulletListItem\",\n        } as PartialBlock<BSchema>),\n    });\n  }\n\n  if (\"numberedListItem\" in schema) {\n    slashMenuItems.push({\n      name: \"Numbered List\",\n      aliases: [\"li\", \"list\", \"numberedlist\", \"numbered list\"],\n      execute: (editor) =>\n        insertOrUpdateBlock(editor, {\n          type: \"numberedListItem\",\n        } as PartialBlock<BSchema>),\n    });\n  }\n\n  if (\"paragraph\" in schema) {\n    slashMenuItems.push({\n      name: \"Paragraph\",\n      aliases: [\"p\"],\n      execute: (editor) =>\n        insertOrUpdateBlock(editor, {\n          type: \"paragraph\",\n        } as PartialBlock<BSchema>),\n    });\n  }\n\n  return slashMenuItems;\n};\n","import { Editor, EditorOptions, Extension } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\n// import \"./blocknote.css\";\nimport { Editor as TiptapEditor } from \"@tiptap/core/dist/packages/core/src/Editor\";\nimport * as Y from \"yjs\";\nimport { getBlockNoteExtensions } from \"./BlockNoteExtensions\";\nimport {\n  insertBlocks,\n  removeBlocks,\n  replaceBlocks,\n  updateBlock,\n} from \"./api/blockManipulation/blockManipulation\";\nimport {\n  blocksToHTML,\n  blocksToMarkdown,\n  HTMLToBlocks,\n  markdownToBlocks,\n} from \"./api/formatConversions/formatConversions\";\nimport {\n  blockToNode,\n  nodeToBlock,\n} from \"./api/nodeConversions/nodeConversions\";\nimport { getNodeById } from \"./api/util/nodeUtil\";\nimport styles from \"./editor.module.css\";\nimport {\n  Block,\n  BlockIdentifier,\n  BlockNoteDOMAttributes,\n  BlockSchema,\n  PartialBlock,\n} from \"./extensions/Blocks/api/blockTypes\";\nimport { TextCursorPosition } from \"./extensions/Blocks/api/cursorPositionTypes\";\nimport {\n  DefaultBlockSchema,\n  defaultBlockSchema,\n} from \"./extensions/Blocks/api/defaultBlocks\";\nimport {\n  ColorStyle,\n  Styles,\n  ToggledStyle,\n} from \"./extensions/Blocks/api/inlineContentTypes\";\nimport { Selection } from \"./extensions/Blocks/api/selectionTypes\";\nimport { getBlockInfoFromPos } from \"./extensions/Blocks/helpers/getBlockInfoFromPos\";\n\nimport { FormattingToolbarProsemirrorPlugin } from \"./extensions/FormattingToolbar/FormattingToolbarPlugin\";\nimport { HyperlinkToolbarProsemirrorPlugin } from \"./extensions/HyperlinkToolbar/HyperlinkToolbarPlugin\";\nimport { SideMenuProsemirrorPlugin } from \"./extensions/SideMenu/SideMenuPlugin\";\nimport { BaseSlashMenuItem } from \"./extensions/SlashMenu/BaseSlashMenuItem\";\nimport { SlashMenuProsemirrorPlugin } from \"./extensions/SlashMenu/SlashMenuPlugin\";\nimport { getDefaultSlashMenuItems } from \"./extensions/SlashMenu/defaultSlashMenuItems\";\nimport { UniqueID } from \"./extensions/UniqueID/UniqueID\";\nimport { mergeCSSClasses } from \"./shared/utils\";\n\nexport type BlockNoteEditorOptions<BSchema extends BlockSchema> = {\n  // TODO: Figure out if enableBlockNoteExtensions/disableHistoryExtension are needed and document them.\n  enableBlockNoteExtensions: boolean;\n  /**\n   *\n   * (couldn't fix any type, see https://github.com/TypeCellOS/BlockNote/pull/191#discussion_r1210708771)\n   *\n   * @default defaultSlashMenuItems from `./extensions/SlashMenu`\n   */\n  slashMenuItems: BaseSlashMenuItem<any>[];\n\n  /**\n   * The HTML element that should be used as the parent element for the editor.\n   *\n   * @default: undefined, the editor is not attached to the DOM\n   */\n  parentElement: HTMLElement;\n  /**\n   * An object containing attributes that should be added to HTML elements of the editor.\n   *\n   * @example { editor: { class: \"my-editor-class\" } }\n   */\n  domAttributes: Partial<BlockNoteDOMAttributes>;\n  /**\n   *  A callback function that runs when the editor is ready to be used.\n   */\n  onEditorReady: (editor: BlockNoteEditor<BSchema>) => void;\n  /**\n   * A callback function that runs whenever the editor's contents change.\n   */\n  onEditorContentChange: (editor: BlockNoteEditor<BSchema>) => void;\n  /**\n   * A callback function that runs whenever the text cursor position changes.\n   */\n  onTextCursorPositionChange: (editor: BlockNoteEditor<BSchema>) => void;\n  /**\n   * Locks the editor from being editable by the user if set to `false`.\n   */\n  editable: boolean;\n  /**\n   * The content that should be in the editor when it's created, represented as an array of partial block objects.\n   */\n  initialContent: PartialBlock<BSchema>[];\n  /**\n   * Use default BlockNote font and reset the styles of <p> <li> <h1> elements etc., that are used in BlockNote.\n   *\n   * @default true\n   */\n  defaultStyles: boolean;\n\n  /**\n   * A list of block types that should be available in the editor.\n   */\n  blockSchema: BSchema;\n\n  /**\n   * When enabled, allows for collaboration between multiple users.\n   */\n  collaboration: {\n    /**\n     * The Yjs XML fragment that's used for collaboration.\n     */\n    fragment: Y.XmlFragment;\n    /**\n     * The user info for the current user that's shown to other collaborators.\n     */\n    user: {\n      name: string;\n      color: string;\n    };\n    /**\n     * A Yjs provider (used for awareness / cursor information)\n     */\n    provider: any;\n    /**\n     * Optional function to customize how cursors of users are rendered\n     */\n    renderCursor?: (user: any) => HTMLElement;\n  };\n\n  // tiptap options, undocumented\n  _tiptapOptions: any;\n};\n\nconst blockNoteTipTapOptions = {\n  enableInputRules: true,\n  enablePasteRules: true,\n  enableCoreExtensions: false,\n};\n\nexport class BlockNoteEditor<BSchema extends BlockSchema = DefaultBlockSchema> {\n  public readonly _tiptapEditor: TiptapEditor & { contentComponent: any };\n  public blockCache = new WeakMap<Node, Block<BSchema>>();\n  public readonly schema: BSchema;\n  public ready = false;\n\n  public readonly sideMenu: SideMenuProsemirrorPlugin<BSchema>;\n  public readonly formattingToolbar: FormattingToolbarProsemirrorPlugin<BSchema>;\n  public readonly slashMenu: SlashMenuProsemirrorPlugin<BSchema, any>;\n  public readonly hyperlinkToolbar: HyperlinkToolbarProsemirrorPlugin<BSchema>;\n\n  constructor(\n    private readonly options: Partial<BlockNoteEditorOptions<BSchema>> = {}\n  ) {\n    // apply defaults\n    const newOptions: Omit<typeof options, \"defaultStyles\" | \"blockSchema\"> & {\n      defaultStyles: boolean;\n      blockSchema: BSchema;\n    } = {\n      defaultStyles: true,\n      // TODO: There's a lot of annoying typing stuff to deal with here. If\n      //  BSchema is specified, then options.blockSchema should also be required.\n      //  If BSchema is not specified, then options.blockSchema should also not\n      //  be defined. Unfortunately, trying to implement these constraints seems\n      //  to be a huge pain, hence the `as any` casts.\n      blockSchema: options.blockSchema || (defaultBlockSchema as any),\n      ...options,\n    };\n\n    this.sideMenu = new SideMenuProsemirrorPlugin(this);\n    this.formattingToolbar = new FormattingToolbarProsemirrorPlugin(this);\n    this.slashMenu = new SlashMenuProsemirrorPlugin(\n      this,\n      newOptions.slashMenuItems ||\n        getDefaultSlashMenuItems(newOptions.blockSchema)\n    );\n    this.hyperlinkToolbar = new HyperlinkToolbarProsemirrorPlugin(this);\n\n    const extensions = getBlockNoteExtensions<BSchema>({\n      editor: this,\n      domAttributes: newOptions.domAttributes || {},\n      blockSchema: newOptions.blockSchema,\n      collaboration: newOptions.collaboration,\n    });\n\n    const blockNoteUIExtension = Extension.create({\n      name: \"BlockNoteUIExtension\",\n\n      addProseMirrorPlugins: () => {\n        return [\n          this.sideMenu.plugin,\n          this.formattingToolbar.plugin,\n          this.slashMenu.plugin,\n          this.hyperlinkToolbar.plugin,\n        ];\n      },\n    });\n    extensions.push(blockNoteUIExtension);\n\n    this.schema = newOptions.blockSchema;\n\n    const initialContent =\n      newOptions.initialContent ||\n      (options.collaboration\n        ? undefined\n        : [\n            {\n              type: \"paragraph\",\n              id: UniqueID.options.generateID(),\n            },\n          ]);\n\n    const tiptapOptions: EditorOptions = {\n      ...blockNoteTipTapOptions,\n      ...newOptions._tiptapOptions,\n      onCreate: () => {\n        newOptions.onEditorReady?.(this);\n        this.ready = true;\n      },\n      onBeforeCreate(editor) {\n        if (!initialContent) {\n          // when using collaboration\n          return;\n        }\n        // we have to set the initial content here, because now we can use the editor schema\n        // which has been created at this point\n        const schema = editor.editor.schema;\n        const ic = initialContent.map((block) => blockToNode(block, schema));\n\n        const root = schema.node(\n          \"doc\",\n          undefined,\n          schema.node(\"blockGroup\", undefined, ic)\n        );\n        // override the initialcontent\n        editor.editor.options.content = root.toJSON();\n      },\n      onUpdate: () => {\n        // This seems to be necessary due to a bug in TipTap:\n        // https://github.com/ueberdosis/tiptap/issues/2583\n        if (!this.ready) {\n          return;\n        }\n\n        newOptions.onEditorContentChange?.(this);\n      },\n      onSelectionUpdate: () => {\n        // This seems to be necessary due to a bug in TipTap:\n        // https://github.com/ueberdosis/tiptap/issues/2583\n        if (!this.ready) {\n          return;\n        }\n\n        newOptions.onTextCursorPositionChange?.(this);\n      },\n      editable: options.editable === undefined ? true : options.editable,\n      extensions:\n        newOptions.enableBlockNoteExtensions === false\n          ? newOptions._tiptapOptions?.extensions\n          : [...(newOptions._tiptapOptions?.extensions || []), ...extensions],\n      editorProps: {\n        attributes: {\n          ...newOptions.domAttributes?.editor,\n          class: mergeCSSClasses(\n            styles.bnEditor,\n            styles.bnRoot,\n            newOptions.defaultStyles ? styles.defaultStyles : \"\",\n            newOptions.domAttributes?.editor?.class || \"\"\n          ),\n        },\n      },\n    };\n\n    if (newOptions.parentElement) {\n      tiptapOptions.element = newOptions.parentElement;\n    }\n\n    this._tiptapEditor = new Editor(tiptapOptions) as Editor & {\n      contentComponent: any;\n    };\n  }\n\n  public get prosemirrorView() {\n    return this._tiptapEditor.view;\n  }\n\n  public get domElement() {\n    return this._tiptapEditor.view.dom as HTMLDivElement;\n  }\n\n  public isFocused() {\n    return this._tiptapEditor.view.hasFocus();\n  }\n\n  public focus() {\n    this._tiptapEditor.view.focus();\n  }\n\n  /**\n   * Gets a snapshot of all top-level (non-nested) blocks in the editor.\n   * @returns A snapshot of all top-level (non-nested) blocks in the editor.\n   */\n  public get topLevelBlocks(): Block<BSchema>[] {\n    const blocks: Block<BSchema>[] = [];\n\n    this._tiptapEditor.state.doc.firstChild!.descendants((node) => {\n      blocks.push(nodeToBlock(node, this.schema, this.blockCache));\n\n      return false;\n    });\n\n    return blocks;\n  }\n\n  /**\n   * Gets a snapshot of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block that should be retrieved.\n   * @returns The block that matches the identifier, or `undefined` if no matching block was found.\n   */\n  public getBlock(\n    blockIdentifier: BlockIdentifier\n  ): Block<BSchema> | undefined {\n    const id =\n      typeof blockIdentifier === \"string\"\n        ? blockIdentifier\n        : blockIdentifier.id;\n    let newBlock: Block<BSchema> | undefined = undefined;\n\n    this._tiptapEditor.state.doc.firstChild!.descendants((node) => {\n      if (typeof newBlock !== \"undefined\") {\n        return false;\n      }\n\n      if (node.type.name !== \"blockContainer\" || node.attrs.id !== id) {\n        return true;\n      }\n\n      newBlock = nodeToBlock(node, this.schema, this.blockCache);\n\n      return false;\n    });\n\n    return newBlock;\n  }\n\n  /**\n   * Traverses all blocks in the editor depth-first, and executes a callback for each.\n   * @param callback The callback to execute for each block. Returning `false` stops the traversal.\n   * @param reverse Whether the blocks should be traversed in reverse order.\n   */\n  public forEachBlock(\n    callback: (block: Block<BSchema>) => boolean,\n    reverse = false\n  ): void {\n    const blocks = this.topLevelBlocks.slice();\n\n    if (reverse) {\n      blocks.reverse();\n    }\n\n    function traverseBlockArray(blockArray: Block<BSchema>[]): boolean {\n      for (const block of blockArray) {\n        if (!callback(block)) {\n          return false;\n        }\n\n        const children = reverse\n          ? block.children.slice().reverse()\n          : block.children;\n\n        if (!traverseBlockArray(children)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    traverseBlockArray(blocks);\n  }\n\n  /**\n   * Executes a callback whenever the editor's contents change.\n   * @param callback The callback to execute.\n   */\n  public onEditorContentChange(callback: () => void) {\n    this._tiptapEditor.on(\"update\", callback);\n  }\n\n  /**\n   * Executes a callback whenever the editor's selection changes.\n   * @param callback The callback to execute.\n   */\n  public onEditorSelectionChange(callback: () => void) {\n    this._tiptapEditor.on(\"selectionUpdate\", callback);\n  }\n\n  /**\n   * Gets a snapshot of the current text cursor position.\n   * @returns A snapshot of the current text cursor position.\n   */\n  public getTextCursorPosition(): TextCursorPosition<BSchema> {\n    const { node, depth, startPos, endPos } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    // Index of the current blockContainer node relative to its parent blockGroup.\n    const nodeIndex = this._tiptapEditor.state.doc\n      .resolve(endPos)\n      .index(depth - 1);\n    // Number of the parent blockGroup's child blockContainer nodes.\n    const numNodes = this._tiptapEditor.state.doc\n      .resolve(endPos + 1)\n      .node().childCount;\n\n    // Gets previous blockContainer node at the same nesting level, if the current node isn't the first child.\n    let prevNode: Node | undefined = undefined;\n    if (nodeIndex > 0) {\n      prevNode = this._tiptapEditor.state.doc.resolve(startPos - 2).node();\n    }\n\n    // Gets next blockContainer node at the same nesting level, if the current node isn't the last child.\n    let nextNode: Node | undefined = undefined;\n    if (nodeIndex < numNodes - 1) {\n      nextNode = this._tiptapEditor.state.doc.resolve(endPos + 2).node();\n    }\n\n    return {\n      block: nodeToBlock(node, this.schema, this.blockCache),\n      prevBlock:\n        prevNode === undefined\n          ? undefined\n          : nodeToBlock(prevNode, this.schema, this.blockCache),\n      nextBlock:\n        nextNode === undefined\n          ? undefined\n          : nodeToBlock(nextNode, this.schema, this.blockCache),\n    };\n  }\n\n  /**\n   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could\n   * not be found.\n   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.\n   * @param placement Whether the text cursor should be placed at the start or end of the block.\n   */\n  public setTextCursorPosition(\n    targetBlock: BlockIdentifier,\n    placement: \"start\" | \"end\" = \"start\"\n  ) {\n    const id = typeof targetBlock === \"string\" ? targetBlock : targetBlock.id;\n\n    const { posBeforeNode } = getNodeById(id, this._tiptapEditor.state.doc);\n    const { startPos, contentNode } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      posBeforeNode + 2\n    )!;\n\n    if (placement === \"start\") {\n      this._tiptapEditor.commands.setTextSelection(startPos + 1);\n    } else {\n      this._tiptapEditor.commands.setTextSelection(\n        startPos + contentNode.nodeSize - 1\n      );\n    }\n  }\n\n  /**\n   * Gets a snapshot of the current selection.\n   */\n  public getSelection(): Selection<BSchema> | undefined {\n    if (\n      this._tiptapEditor.state.selection.from ===\n      this._tiptapEditor.state.selection.to\n    ) {\n      return undefined;\n    }\n\n    const blocks: Block<BSchema>[] = [];\n\n    this._tiptapEditor.state.doc.descendants((node, pos) => {\n      if (node.type.spec.group !== \"blockContent\") {\n        return true;\n      }\n\n      if (\n        pos + node.nodeSize < this._tiptapEditor.state.selection.from ||\n        pos > this._tiptapEditor.state.selection.to\n      ) {\n        return true;\n      }\n\n      blocks.push(\n        nodeToBlock(\n          this._tiptapEditor.state.doc.resolve(pos).node(),\n          this.schema,\n          this.blockCache\n        )\n      );\n\n      return false;\n    });\n\n    return { blocks: blocks };\n  }\n\n  /**\n   * Checks if the editor is currently editable, or if it's locked.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  public get isEditable(): boolean {\n    return this._tiptapEditor.isEditable;\n  }\n\n  /**\n   * Makes the editor editable or locks it, depending on the argument passed.\n   * @param editable True to make the editor editable, or false to lock it.\n   */\n  public set isEditable(editable: boolean) {\n    this._tiptapEditor.setEditable(editable);\n  }\n\n  /**\n   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an\n   * error if the reference block could not be found.\n   * @param blocksToInsert An array of partial blocks that should be inserted.\n   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.\n   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the\n   * `referenceBlock`. Inserts the blocks at the start of the existing block's children if \"nested\" is used.\n   */\n  public insertBlocks(\n    blocksToInsert: PartialBlock<BSchema>[],\n    referenceBlock: BlockIdentifier,\n    placement: \"before\" | \"after\" | \"nested\" = \"before\"\n  ): void {\n    insertBlocks(blocksToInsert, referenceBlock, placement, this._tiptapEditor);\n  }\n\n  /**\n   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be\n   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could\n   * not be found.\n   * @param blockToUpdate The block that should be updated.\n   * @param update A partial block which defines how the existing block should be changed.\n   */\n  public updateBlock(\n    blockToUpdate: BlockIdentifier,\n    update: PartialBlock<BSchema>\n  ) {\n    updateBlock(blockToUpdate, update, this._tiptapEditor);\n  }\n\n  /**\n   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.\n   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.\n   */\n  public removeBlocks(blocksToRemove: BlockIdentifier[]) {\n    removeBlocks(blocksToRemove, this._tiptapEditor);\n  }\n\n  /**\n   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or\n   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in\n   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.\n   * @param blocksToRemove An array of blocks that should be replaced.\n   * @param blocksToInsert An array of partial blocks to replace the old ones with.\n   */\n  public replaceBlocks(\n    blocksToRemove: BlockIdentifier[],\n    blocksToInsert: PartialBlock<BSchema>[]\n  ) {\n    replaceBlocks(blocksToRemove, blocksToInsert, this._tiptapEditor);\n  }\n\n  /**\n   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.\n   */\n  public getActiveStyles() {\n    const styles: Styles = {};\n    const marks = this._tiptapEditor.state.selection.$to.marks();\n\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    for (const mark of marks) {\n      if (toggleStyles.has(mark.type.name as ToggledStyle)) {\n        styles[mark.type.name as ToggledStyle] = true;\n      } else if (colorStyles.has(mark.type.name as ColorStyle)) {\n        styles[mark.type.name as ColorStyle] = mark.attrs.color;\n      }\n    }\n\n    return styles;\n  }\n\n  /**\n   * Adds styles to the currently selected content.\n   * @param styles The styles to add.\n   */\n  public addStyles(styles: Styles) {\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    this._tiptapEditor.view.focus();\n\n    for (const [style, value] of Object.entries(styles)) {\n      if (toggleStyles.has(style as ToggledStyle)) {\n        this._tiptapEditor.commands.setMark(style);\n      } else if (colorStyles.has(style as ColorStyle)) {\n        this._tiptapEditor.commands.setMark(style, { color: value });\n      }\n    }\n  }\n\n  /**\n   * Removes styles from the currently selected content.\n   * @param styles The styles to remove.\n   */\n  public removeStyles(styles: Styles) {\n    this._tiptapEditor.view.focus();\n\n    for (const style of Object.keys(styles)) {\n      this._tiptapEditor.commands.unsetMark(style);\n    }\n  }\n\n  /**\n   * Toggles styles on the currently selected content.\n   * @param styles The styles to toggle.\n   */\n  public toggleStyles(styles: Styles) {\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    this._tiptapEditor.view.focus();\n\n    for (const [style, value] of Object.entries(styles)) {\n      if (toggleStyles.has(style as ToggledStyle)) {\n        this._tiptapEditor.commands.toggleMark(style);\n      } else if (colorStyles.has(style as ColorStyle)) {\n        this._tiptapEditor.commands.toggleMark(style, { color: value });\n      }\n    }\n  }\n\n  /**\n   * Gets the currently selected text.\n   */\n  public getSelectedText() {\n    return this._tiptapEditor.state.doc.textBetween(\n      this._tiptapEditor.state.selection.from,\n      this._tiptapEditor.state.selection.to\n    );\n  }\n\n  /**\n   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.\n   */\n  public getSelectedLinkUrl() {\n    return this._tiptapEditor.getAttributes(\"link\").href as string | undefined;\n  }\n\n  /**\n   * Creates a new link to replace the selected content.\n   * @param url The link URL.\n   * @param text The text to display the link with.\n   */\n  public createLink(url: string, text?: string) {\n    if (url === \"\") {\n      return;\n    }\n\n    const { from, to } = this._tiptapEditor.state.selection;\n\n    if (!text) {\n      text = this._tiptapEditor.state.doc.textBetween(from, to);\n    }\n\n    const mark = this._tiptapEditor.schema.mark(\"link\", { href: url });\n\n    this._tiptapEditor.view.dispatch(\n      this._tiptapEditor.view.state.tr\n        .insertText(text, from, to)\n        .addMark(from, from + text.length, mark)\n    );\n  }\n\n  /**\n   * Checks if the block containing the text cursor can be nested.\n   */\n  public canNestBlock() {\n    const { startPos, depth } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    return this._tiptapEditor.state.doc.resolve(startPos).index(depth - 1) > 0;\n  }\n\n  /**\n   * Nests the block containing the text cursor into the block above it.\n   */\n  public nestBlock() {\n    this._tiptapEditor.commands.sinkListItem(\"blockContainer\");\n  }\n\n  /**\n   * Checks if the block containing the text cursor is nested.\n   */\n  public canUnnestBlock() {\n    const { depth } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    return depth > 2;\n  }\n\n  /**\n   * Lifts the block containing the text cursor out of its parent.\n   */\n  public unnestBlock() {\n    this._tiptapEditor.commands.liftListItem(\"blockContainer\");\n  }\n\n  /**\n   * Serializes blocks into an HTML string. To better conform to HTML standards, children of blocks which aren't list\n   * items are un-nested in the output HTML.\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  public async blocksToHTML(blocks: Block<BSchema>[]): Promise<string> {\n    return blocksToHTML(blocks, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and\n   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote\n   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.\n   * @param html The HTML string to parse blocks from.\n   * @returns The blocks parsed from the HTML string.\n   */\n  public async HTMLToBlocks(html: string): Promise<Block<BSchema>[]> {\n    return HTMLToBlocks(html, this.schema, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of\n   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.\n   * @param blocks An array of blocks that should be serialized into Markdown.\n   * @returns The blocks, serialized as a Markdown string.\n   */\n  public async blocksToMarkdown(blocks: Block<BSchema>[]): Promise<string> {\n    return blocksToMarkdown(blocks, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on\n   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it\n   * as text.\n   * @param markdown The Markdown string to parse blocks from.\n   * @returns The blocks parsed from the Markdown string.\n   */\n  public async markdownToBlocks(markdown: string): Promise<Block<BSchema>[]> {\n    return markdownToBlocks(markdown, this.schema, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Updates the user info for the current user that's shown to other collaborators.\n   */\n  public updateCollaborationUserInfo(user: { name: string; color: string }) {\n    if (!this.options.collaboration) {\n      throw new Error(\n        \"Cannot update collaboration user info when collaboration is disabled.\"\n      );\n    }\n    this._tiptapEditor.commands.updateUser(user);\n  }\n}\n"],"names":["getBlockInfo","blockContainer","id","contentNode","contentType","numChildBlocks","getBlockInfoFromPos","doc","pos","outerBlockGroupEndPos","$pos","maxDepth","node","depth","startPos","endPos","BackgroundColorExtension","Extension","element","attributes","posInBlock","color","state","view","blockInfo","BackgroundColorMark","Mark","HTMLAttributes","commands","isAppleOS","formatKeyboardShortcut","shortcut","mergeCSSClasses","classes","c","UnreachableCaseError","val","camelToDataKebab","str","propsToAttributes","blockConfig","tiptapAttributes","name","spec","parse","render","blockContent","attribute","value","contentDOM","createBlockSpec","createTipTapBlock","getPos","blockContentDOMAttributes","_a","styles","editor","blockIdentifier","block","rendered","inlineContentDOMAttributes","_b","config","Node","HeadingBlockContent","level","InputRule","chain","range","mergeAttributes","handleEnter","selectionEmpty","BulletListItemBlockContent","parent","PLUGIN_KEY","PluginKey","NumberedListIndexingPlugin","Plugin","_transactions","_oldState","newState","tr","modified","newIndex","isFirstBlockInDoc","prevBlockInfo","prevBlockContentNode","prevBlockIndex","NumberedListItemBlockContent","ParagraphBlockContent","defaultProps","defaultBlockSchema","removeDuplicates","array","by","seen","item","key","findDuplicates","items","filtered","el","index","UniqueID","testOptions","v4","dragSourceElement","transformPasted","transactions","oldState","docChanges","transaction","filterTransactions","types","attributeName","generateID","transform","combineTransactionSteps","mapping","getChangedRanges","newRange","newNodes","findChildrenInRange","newIds","duplicatedNewIds","deleted","handleDragstart","event","slice","removeId","fragment","list","nodeWithoutId","Fragment","Slice","toggleStyles","colorStyles","styledTextToNodes","styledText","schema","marks","style","text","linkToNodes","link","linkMark","styledTextArrayToNodes","content","nodes","inlineContentToNodes","blockToNode","type","children","child","groupNode","contentNodeToInlineContent","currentContent","commentMark","mark","nodeToBlock","blockSchema","blockCache","cachedBlock","props","attr","blockSpec","propSchema","i","nodeAttributes","PreviousBlockTypePlugin","timeout","_editorView","_prevState","prev","currentTransactionOriginalOldBlockAttrs","oldNodes","findChildren","oldNodesById","oldNode","oldContentNode","newContentNode","newAttrs","oldAttrs","pluginState","decorations","prevAttrs","decorationAttrs","nodeAttr","decoration","Decoration","DecorationSet","BlockAttributes","BlockContainer","attrs","HTMLAttr","domAttributes","dispatch","newBlock","childNodes","posBetweenBlocks","nextNodeIsBlock","prevNodeIsBlock","nextBlockInfo","childBlocksStart","childBlocksEnd","childBlocksRange","prevBlockEndPos","TextSelection","keepType","originalBlockContent","newBlockContent","newBlockInsertionPos","newBlockContentPos","selectionAtBlockStart","isParagraph","blockAtDocStart","blockEmpty","blockIndented","BlockGroup","blockGroupDOMAttributes","Doc","customBlockSerializer","defaultSerializer","DOMSerializer","CustomBlockSerializerExtension","EventEmitter","__publicField","fn","args","callbacks","callback","findBlock","findParentNode","SuggestionsMenuView","pluginKey","updateSuggestionsMenu","decorationNode","getDefaultPluginState","prevState","next","started","stopped","changed","setupSuggestionsMenu","defaultTriggerCharacter","onSelectItem","suggestionsPluginView","deactivate","_c","_d","menuIsActive","triggerCharacter","queryStartPos","keyboardHoveredItemIndex","active","decorationId","blockNode","slashMenuPluginKey","SlashMenuProsemirrorPlugin","suggestions","query","aliases","alias","Placeholder","selection","menuState","anchor","hasAnchor","isEmpty","TextAlignmentExtension","textAlignment","positionsBeforeSelectedContent","TextColorExtension","TextColorMark","TrailingNode","plugin","_","__","shouldInsertNodeAtEnd","endPosition","_state","lastNode","getBlockNoteExtensions","opts","ret","extensions","Gapcursor","blockStyles","HardBreak","Text","Bold","Code","Italic","Strike","Underline","Link","Dropcursor","Collaboration","defaultRender","user","cursor","label","nonbreakingSpace1","nonbreakingSpace2","CollaborationCursor","History","getNodeById","targetNode","posBeforeNode","insertBlocks","blocksToInsert","referenceBlock","placement","nodesToInsert","insertionPos","blockGroupNode","updateBlock","blockToUpdate","update","removeBlocks","blocksToRemove","idsOfBlocksToRemove","removedSize","oldDocSize","newDocSize","notFoundIds","replaceBlocks","removeUnderlines","removeUnderlinesHelper","tree","numChildElements","numElementsAdded","simplifyBlocks","options","listItemBlockTypes","simplifyBlocksHelper","activeList","blockGroup","isListItemBlock","listItemBlockType","numElementsRemoved","fromDom","listItemElement","blocksToHTML","blocks","htmlParentElement","serializer","htmlNode","unified","rehypeParse","rehypeStringify","HTMLToBlocks","html","parentNode","DOMParser","blocksToMarkdown","rehypeRemark","remarkGfm","remarkStringify","code","properties","result","markdownToBlocks","markdown","htmlString","remarkParse","remarkRehype","defaultHandlers","FormattingToolbarView","pmView","updateFormattingToolbar","from","to","empty","isEmptyTextBlock","isTextSelection","editorWrapper","composing","isSame","ranges","shouldShow","isNodeSelection","posToDOMRect","formattingToolbarPluginKey","FormattingToolbarProsemirrorPlugin","editorView","HyperlinkToolbarView","updateHyperlinkToolbar","hoveredHyperlinkElement","posInHoveredHyperlinkMark","resolvedPosInHoveredHyperlinkMark","marksAtPos","getMarkRange","url","prevHyperlinkMark","hyperlinkToolbarPluginKey","HyperlinkToolbarProsemirrorPlugin","MultipleNodeSelection","Selection","$anchor","$head","_pos","fromResult","toResult","serializeForClipboard","pv","dragImageElement","getDraggableBlockFromCoords","coords","blockPositionFromCoords","docView","desc","blockPositionsFromSelection","beforeFirstBlockPos","afterLastBlockPos","selectionStartInBlockContent","selectionEndInBlockContent","minDepth","startFirstBlockPos","endLastBlockPos","setDragImage","parentClone","getElementIndex","parentElement","targetElement","firstSelectedBlockIndex","lastSelectedBlockIndex","unsetDragImage","inheritedClasses","className","dragStart","e","editorBoundingBox","draggedBlockInSelection","multipleBlocksSelected","NodeSelection","dom","SideMenuView","updateSideMenu","evt","_event","editorOuterBoundingBox","cursorWithinEditor","_e","blockContentBoundingBox","sideMenuPluginKey","SideMenuProsemirrorPlugin","sideMenuState","insertOrUpdateBlock","currentBlock","getDefaultSlashMenuItems","slashMenuItems","blockNoteTipTapOptions","BlockNoteEditor","newOptions","blockNoteUIExtension","initialContent","tiptapOptions","ic","root","Editor","reverse","traverseBlockArray","blockArray","nodeIndex","numNodes","prevNode","nextNode","targetBlock","editable"],"mappings":"8hGAqBO,SAASA,EAAaC,EAAiD,CACtE,MAAAC,EAAKD,EAAe,MAAM,GAC1BE,EAAcF,EAAe,WAC7BG,EAAcD,EAAY,KAC1BE,EACJJ,EAAe,aAAe,EAAIA,EAAe,UAAW,WAAa,EAEpE,MAAA,CACL,GAAAC,EACA,KAAMD,EACN,YAAAE,EACA,YAAAC,EACA,eAAAC,CAAA,CAEJ,CASgB,SAAAC,EAAoBC,EAAWC,EAAwB,CAK/D,MAAAC,EAAwBF,EAAI,SAAW,EAC7C,GAAIC,GAAO,EAIP,IAHFA,EAAM,EAA0B,EAG9BD,EAAI,QAAQC,CAAG,EAAE,OAAO,KAAK,OAAS,kBACtCA,EAAMC,GAEND,YAEOA,GAAOC,EAId,IAHFD,EAAMC,EAAwB,EAG5BF,EAAI,QAAQC,CAAG,EAAE,OAAO,KAAK,OAAS,kBACtCA,EAAM,GAENA,IAMAD,EAAI,QAAQC,CAAG,EAAE,OAAO,KAAK,OAAS,cACxCA,IAGI,MAAAE,EAAOH,EAAI,QAAQC,CAAG,EAEtBG,EAAWD,EAAK,MAClB,IAAAE,EAAOF,EAAK,KAAKC,CAAQ,EACzBE,EAAQF,EAGZ,OAAa,CACX,GAAIE,EAAQ,EACV,MAAM,IAAI,MACR,8GAAA,EAIA,GAAAD,EAAK,KAAK,OAAS,iBACrB,MAGOC,GAAA,EACFD,EAAAF,EAAK,KAAKG,CAAK,CACxB,CAEA,KAAM,CAAE,GAAAX,EAAI,YAAAC,EAAa,YAAAC,EAAa,eAAAC,GAAmBL,EAAaY,CAAI,EAEpEE,EAAWJ,EAAK,MAAMG,CAAK,EAC3BE,EAASL,EAAK,IAAIG,CAAK,EAEtB,MAAA,CACL,GAAAX,EACA,KAAAU,EACA,YAAAT,EACA,YAAAC,EACA,eAAAC,EACA,SAAAS,EACA,OAAAC,EACA,MAAAF,CAAA,CAEJ,CCnGa,MAAAG,GAA2BC,YAAU,OAAO,CACvD,KAAM,uBAEN,qBAAsB,CACb,MAAA,CACL,CACE,MAAO,CAAC,gBAAgB,EACxB,WAAY,CACV,gBAAiB,CACf,QAAS,UACT,UAAYC,GACVA,EAAQ,aAAa,uBAAuB,EACxCA,EAAQ,aAAa,uBAAuB,EAC5C,UACN,WAAaC,GACXA,EAAW,kBAAoB,WAAa,CAC1C,wBAAyBA,EAAW,eACtC,CACJ,CACF,CACF,CAAA,CAEJ,EAEA,aAAc,CACL,MAAA,CACL,wBACE,CAACC,EAAYC,IACb,CAAC,CAAE,MAAAC,EAAO,KAAAC,KAAW,CACnB,MAAMC,EAAYlB,EAAoBgB,EAAM,IAAKF,CAAU,EAC3D,OAAII,IAAc,OACT,IAGTF,EAAM,GAAG,iBACPE,EAAU,SAAW,EACrB,kBACAH,CAAA,EAGFE,EAAK,MAAM,EAEJ,GACT,CAAA,CAEN,CACF,CAAC,EClDYE,GAAsBC,OAAK,OAAO,CAC7C,KAAM,kBAEN,eAAgB,CACP,MAAA,CACL,MAAO,CACL,QAAS,OACT,UAAYR,GAAYA,EAAQ,aAAa,uBAAuB,EACpE,WAAaC,IAAgB,CAC3B,wBAAyBA,EAAW,KAAA,EAExC,CAAA,CAEJ,EAEA,WAAY,CACH,MAAA,CACL,CACE,IAAK,OACL,SAAWD,GACL,OAAOA,GAAY,SACd,GAGLA,EAAQ,aAAa,uBAAuB,EACvC,CAAE,MAAOA,EAAQ,aAAa,uBAAuB,CAAE,EAGzD,EAEX,CAAA,CAEJ,EAEA,WAAW,CAAE,eAAAS,GAAkB,CACtB,MAAA,CAAC,OAAQA,EAAgB,CAAC,CACnC,EAEA,aAAc,CACL,MAAA,CACL,mBACGN,GACD,CAAC,CAAE,SAAAO,KACGP,IAAU,UACLO,EAAS,QAAQ,KAAK,KAAM,CAAE,MAAAP,EAAc,EAG9CO,EAAS,UAAU,KAAK,IAAI,CACrC,CAEN,CACF,CAAC,qmBC7DYC,GAAY,IACvB,MAAM,KAAK,UAAU,QAAQ,GAC5B,cAAc,KAAK,UAAU,SAAS,GACrC,cAAc,KAAK,UAAU,SAAS,EAEnC,SAASC,GAAuBC,EAAkB,CACvD,OAAIF,KACKE,EAAS,QAAQ,MAAO,GAAG,EAE3BA,EAAS,QAAQ,MAAO,MAAM,CAEzC,CAEO,SAASC,KAAmBC,EAAmB,CACpD,OAAOA,EAAQ,OAAQC,GAAMA,CAAC,EAAE,KAAK,GAAG,CAC1C,CAEO,MAAMC,WAA6B,KAAM,CAC9C,YAAYC,EAAY,CAChB,MAAA,qBAAqBA,CAAG,EAAE,CAClC,CACF,CCRO,SAASC,EAAiBC,EAAqB,CACpD,MAAO,QAAUA,EAAI,QAAQ,kBAAmB,OAAO,EAAE,aAC3D,CAIO,SAASC,GAMdC,EAIA,CACA,MAAMC,EAA8C,CAAA,EAE7C,cAAA,QAAQD,EAAY,UAAU,EAAE,QAAQ,CAAC,CAACE,EAAMC,CAAI,IAAM,CAC/DF,EAAiBC,CAAI,EAAI,CACvB,QAASC,EAAK,QACd,YAAa,GAIb,UAAYzB,GAAYA,EAAQ,aAAamB,EAAiBK,CAAI,CAAC,EACnE,WAAavB,GACXA,EAAWuB,CAAI,IAAMC,EAAK,QACtB,CACE,CAACN,EAAiBK,CAAI,CAAC,EAAGvB,EAAWuB,CAAI,CAAA,EAE3C,CAAC,CAAA,CACT,CACD,EAEMD,CACT,CAKO,SAASG,GAMdJ,EAIA,CACO,MAAA,CACL,CACE,IAAK,yBAA2BA,EAAY,KAAO,GACrD,CAAA,CAEJ,CAKgB,SAAAK,GAMdL,EAIAb,EACA,CAEM,MAAAmB,EAAe,SAAS,cAAc,KAAK,EAEpCA,EAAA,aAAa,oBAAqBN,EAAY,IAAI,EAE/D,SAAW,CAACO,EAAWC,CAAK,IAAK,OAAO,QAAQrB,CAAc,EAC/CmB,EAAA,aAAaC,EAAWC,CAAK,EAKxC,IAAAC,EACJ,OAAIT,EAAY,uBACDS,EAAA,SAAS,cAAc,KAAK,EACzCH,EAAa,YAAYG,CAAU,GAEtBA,EAAA,OAGRA,IAAe,OAClB,CACE,IAAKH,EACL,WAAAG,CAAA,EAEF,CACE,IAAKH,CAAA,CAEb,CAIO,SAASI,GAMdV,EAC2B,CA8GpB,MAAA,CACL,KA9GWW,EAMX,CACA,KAAMX,EAAY,KAClB,QAASA,EAAY,sBAAwB,UAAY,GACzD,WAAYA,EAAY,sBAExB,eAAgB,CACd,OAAOD,GAAkBC,CAAW,CACtC,EAEA,WAAY,CACV,OAAOI,GAAMJ,CAAW,CAC1B,EAEA,WAAW,CAAE,eAAAb,GAAkB,CACtB,OAAAkB,GAAOL,EAAab,CAAc,CAC3C,EAEA,aAAc,CACZ,MAAO,CAAC,CAAE,eAAAA,EAAgB,OAAAyB,KAAa,SAE/B,MAAAN,EAAe,SAAS,cAAc,KAAK,EAE3CO,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,eAAgB,CAAA,EAC9C,SAAW,CAACP,EAAWC,CAAK,IAAK,OAAO,QACtCK,CAAA,EAEIN,IAAc,SACHD,EAAA,aAAaC,EAAWC,CAAK,EAI9CF,EAAa,UAAYd,EACvBuB,EAAO,aACPF,EAA0B,KAAA,EAGfP,EAAA,aAAa,oBAAqBN,EAAY,IAAI,EAE/D,SAAW,CAACO,EAAWC,CAAK,IAAK,OAAO,QAAQrB,CAAc,EAC/CmB,EAAA,aAAaC,EAAWC,CAAK,EAItC,MAAAQ,EAAS,KAAK,QAAQ,OAIxB,GAAA,OAAOJ,GAAW,UACpB,MAAM,IAAI,MACR,mEAAA,EAGJ,MAAM5C,EAAM4C,IAMNK,EAJeD,EAAO,cAEQ,MAAM,IAAI,QAAQhD,CAAI,EAAE,OAErB,MAAM,GAGvCkD,EAAQF,EAAO,SAASC,CAAe,EACzC,GAAAC,EAAM,OAASlB,EAAY,KACvB,MAAA,IAAI,MAAM,2BAA2B,EAI7C,MAAMmB,EAAWnB,EAAY,OAAOkB,EAAcF,CAAM,EAExD,GAAI,eAAgBG,EAAU,CAC5B,MAAMC,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,gBAAiB,CAAA,EAE/C,SAAW,CAACd,EAAWC,CAAK,IAAK,OAAO,QACtCY,CAAA,EAEIb,IAAc,SACPY,EAAA,WAAW,aAAaZ,EAAWC,CAAK,EAIrDW,EAAS,WAAW,UAAY3B,EAC9B2B,EAAS,WAAW,UACpBJ,EAAO,cACPK,EAA2B,KAAA,CAE/B,CAEa,OAAAd,EAAA,YAAYa,EAAS,GAAG,EAE9B,eAAgBA,EACnB,CACE,IAAKb,EACL,WAAYa,EAAS,UAAA,EAEvB,CACE,IAAKb,CAAA,CACP,CAER,CAAA,CACD,EAIC,WAAYN,EAAY,UAAA,CAE5B,CAEO,SAASW,EASdW,EACoC,CAKpC,OAAOC,EAAAA,KAAK,OAAyB,CACnC,GAAGD,EACH,MAAO,cAAA,CACR,CACH,CChQO,MAAME,GAAsBb,EAA6B,CAC9D,KAAM,UACN,QAAS,UAET,eAAgB,CACP,MAAA,CACL,MAAO,CACL,QAAS,IAET,UAAYjC,GAAYA,EAAQ,aAAa,YAAY,EACzD,WAAaC,IACJ,CACL,aAAcA,EAAW,KAAA,EAG/B,CAAA,CAEJ,EAEA,eAAgB,CACP,MAAA,CACL,GAAG,CAAC,IAAK,IAAK,GAAG,EAAE,IAAK8C,GAEf,IAAIC,EAAAA,UAAU,CACnB,KAAM,IAAI,OAAO,OAAO,SAASD,CAAK,CAAC,QAAQ,EAC/C,QAAS,CAAC,CAAE,MAAA3C,EAAO,MAAA6C,EAAO,MAAAC,KAAY,CACpCD,EACG,EAAA,cAAc7C,EAAM,UAAU,KAAM,CACnC,KAAM,UACN,MAAO,CACL,MAAA2C,CACF,CAAA,CACD,EAEA,YAAY,CAAE,KAAMG,EAAM,KAAM,GAAIA,EAAM,EAAA,CAAI,CACnD,CAAA,CACD,CACF,CAAA,CAEL,EAEA,WAAY,CACH,MAAA,CACL,CACE,IAAK,KACL,MAAO,CAAE,MAAO,GAAI,EACpB,KAAM,SACR,EACA,CACE,IAAK,KACL,MAAO,CAAE,MAAO,GAAI,EACpB,KAAM,SACR,EACA,CACE,IAAK,KACL,MAAO,CAAE,MAAO,GAAI,EACpB,KAAM,SACR,CAAA,CAEJ,EAEA,WAAW,CAAE,KAAAxD,EAAM,eAAAe,GAAkB,SACnC,MAAM0B,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,eAAgB,CAAA,EACxCM,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,gBAAiB,CAAA,EAExC,MAAA,CACL,MACAQ,EAAAA,gBAAgB1C,EAAgB,CAC9B,MAAOK,EACLuB,EAAO,aACPF,EAA0B,KAC5B,EACA,oBAAqB,KAAK,IAAA,CAC3B,EACD,CACE,IAAMzC,EAAK,MAAM,MACjB,CACE,MAAOoB,EACLuB,EAAO,cACPK,EAA2B,KAC7B,CACF,EACA,CACF,CAAA,CAEJ,CACF,CAAC,EC1FYU,GAAed,GAAmB,CACvC,KAAA,CAAE,KAAA5C,EAAM,YAAAR,CAAA,EAAgBE,EAC5BkD,EAAO,MAAM,IACbA,EAAO,MAAM,UAAU,IAAA,EAGnBe,EACJf,EAAO,MAAM,UAAU,SAAWA,EAAO,MAAM,UAAU,KAE3D,MAAI,CAACpD,EAAY,KAAK,SAAS,UAAU,GAAK,CAACmE,EACtC,GAGFf,EAAO,SAAS,MAAM,CAAC,CAAE,MAAAlC,EAAO,MAAA6C,EAAO,SAAAvC,KAAe,CAC3D,IAEEA,EAAS,QAAQ,IACXhB,EAAK,YAAY,SAAW,EACvBgB,EAAS,cAAcN,EAAM,UAAU,KAAM,CAClD,KAAM,YACN,MAAO,CAAC,CAAA,CACT,EAGI,EACR,EAEH,IAGEM,EAAS,QAAQ,IACXhB,EAAK,YAAY,OAAS,GACtBuD,EAAA,EACH,gBACA,EAAA,aAAa7C,EAAM,UAAU,KAAM,EAAI,EACvC,MAEI,IAGF,EACR,CAAA,CACJ,CACH,ECxCakD,GAA6BrB,EAAoC,CAC5E,KAAM,iBACN,QAAS,UAET,eAAgB,CACP,MAAA,CAEL,IAAIe,YAAU,CACZ,KAAM,IAAI,OAAO,YAAY,EAC7B,QAAS,CAAC,CAAE,MAAA5C,EAAO,MAAA6C,EAAO,MAAAC,KAAY,CACpCD,EACG,EAAA,cAAc7C,EAAM,UAAU,KAAM,CACnC,KAAM,iBACN,MAAO,CAAC,CAAA,CACT,EAEA,YAAY,CAAE,KAAM8C,EAAM,KAAM,GAAIA,EAAM,EAAA,CAAI,CACnD,CAAA,CACD,CAAA,CAEL,EAEA,sBAAuB,CACd,MAAA,CACL,MAAO,IAAME,GAAY,KAAK,MAAM,CAAA,CAExC,EAEA,WAAY,CACH,MAAA,CAEL,CACE,IAAK,KACL,SAAWpD,GAAY,CACjB,GAAA,OAAOA,GAAY,SACd,MAAA,GAGT,MAAMuD,EAASvD,EAAQ,cAEvB,OAAIuD,IAAW,KACN,GAGLA,EAAO,UAAY,KACd,GAGF,EACT,EACA,KAAM,gBACR,EAEA,CACE,IAAK,IACL,SAAWvD,GAAY,CACjB,GAAA,OAAOA,GAAY,SACd,MAAA,GAGT,MAAMuD,EAASvD,EAAQ,cAEvB,OAAIuD,IAAW,KACN,GAGLA,EAAO,aAAa,mBAAmB,IAAM,iBACxC,GAGF,EACT,EACA,SAAU,IACV,KAAM,gBACR,CAAA,CAEJ,EAEA,WAAW,CAAE,eAAA9C,GAAkB,SAC7B,MAAM0B,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,eAAgB,CAAA,EACxCM,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,gBAAiB,CAAA,EAExC,MAAA,CACL,MACAQ,EAAAA,gBAAgB1C,EAAgB,CAC9B,MAAOK,EACLuB,EAAO,aACPF,EAA0B,KAC5B,EACA,oBAAqB,KAAK,IAAA,CAC3B,EACD,CACE,IACA,CACE,MAAOrB,EACLuB,EAAO,cACPK,EAA2B,KAC7B,CACF,EACA,CACF,CAAA,CAEJ,CACF,CAAC,EC3GKc,GAAa,IAAIC,EAAAA,UAAU,wBAAwB,EAC5CC,GAA6B,IACjC,IAAIC,EAAAA,OAAO,CAChB,IAAKH,GACL,kBAAmB,CAACI,EAAeC,EAAWC,IAAa,CACzD,MAAMC,EAAKD,EAAS,GACjBC,EAAA,QAAQ,uBAAwB,EAAI,EAEvC,IAAIC,EAAW,GAKf,OAAAF,EAAS,IAAI,YAAY,CAACpE,EAAMJ,IAAQ,CAEpC,GAAAI,EAAK,KAAK,OAAS,kBACnBA,EAAK,WAAY,KAAK,OAAS,mBAC/B,CACA,IAAIuE,EAAW,IACf,MAAMC,EAAoB5E,IAAQ,EAE5BgB,EAAYlB,EAAoB2E,EAAG,IAAKzE,EAAM,CAAC,EACrD,GAAIgB,IAAc,OAChB,OAKF,GAAI,CAAC4D,EAAmB,CACtB,MAAMC,EAAgB/E,EAAoB2E,EAAG,IAAKzE,EAAM,CAAC,EACzD,GAAI6E,IAAkB,OACpB,OAMF,GAAI,EAFF7D,EAAU,QAAU6D,EAAc,OAEH,CAC/B,MAAMC,EAAuBD,EAAc,YAM3C,GAL6BA,EAAc,YAGpB,OAAS,mBAEA,CACxB,MAAAE,EAAiBD,EAAqB,MAAM,MAElDH,GAAY,SAASI,CAAc,EAAI,GAAG,SAAS,CACrD,CACF,CACF,CAEoB/D,EAAU,YACJ,MAAM,QAElB2D,IACDD,EAAA,GAERD,EAAA,cAAczE,EAAM,EAAG,OAAW,CACnC,MAAO2E,CAAA,CACR,EAEL,CAAA,CACD,EAEMD,EAAWD,EAAK,IACzB,CAAA,CACD,EChEUO,GACXrC,EAAsC,CACpC,KAAM,mBACN,QAAS,UAET,eAAgB,CACP,MAAA,CACL,MAAO,CACL,QAAS,KACT,UAAYjC,GAAYA,EAAQ,aAAa,YAAY,EACzD,WAAaC,IACJ,CACL,aAAcA,EAAW,KAAA,EAG/B,CAAA,CAEJ,EAEA,eAAgB,CACP,MAAA,CAEL,IAAI+C,YAAU,CACZ,KAAM,IAAI,OAAO,WAAW,EAC5B,QAAS,CAAC,CAAE,MAAA5C,EAAO,MAAA6C,EAAO,MAAAC,KAAY,CACpCD,EACG,EAAA,cAAc7C,EAAM,UAAU,KAAM,CACnC,KAAM,mBACN,MAAO,CAAC,CAAA,CACT,EAEA,YAAY,CAAE,KAAM8C,EAAM,KAAM,GAAIA,EAAM,EAAA,CAAI,CACnD,CAAA,CACD,CAAA,CAEL,EAEA,sBAAuB,CACd,MAAA,CACL,MAAO,IAAME,GAAY,KAAK,MAAM,CAAA,CAExC,EAEA,uBAAwB,CACf,MAAA,CAACM,IAA4B,CACtC,EAEA,WAAY,CACH,MAAA,CAGL,CACE,IAAK,KACL,SAAW1D,GAAY,CACjB,GAAA,OAAOA,GAAY,SACd,MAAA,GAGT,MAAMuD,EAASvD,EAAQ,cAEvB,OAAIuD,IAAW,KACN,GAGLA,EAAO,UAAY,KACd,GAGF,EACT,EACA,KAAM,kBACR,EAGA,CACE,IAAK,IACL,SAAWvD,GAAY,CACjB,GAAA,OAAOA,GAAY,SACd,MAAA,GAGT,MAAMuD,EAASvD,EAAQ,cAEvB,OAAIuD,IAAW,KACN,GAIPA,EAAO,aAAa,mBAAmB,IAAM,mBAEtC,GAGF,EACT,EACA,SAAU,IACV,KAAM,kBACR,CAAA,CAEJ,EAEA,WAAW,CAAE,eAAA9C,GAAkB,SAC7B,MAAM0B,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,eAAgB,CAAA,EACxCM,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,gBAAiB,CAAA,EAExC,MAAA,CACL,MACAQ,EAAAA,gBAAgB1C,EAAgB,CAC9B,MAAOK,EACLuB,EAAO,aACPF,EAA0B,KAC5B,EACA,oBAAqB,KAAK,IAAA,CAC3B,EAGD,CACE,IACA,CACE,MAAOrB,EACLuB,EAAO,cACPK,EAA2B,KAC7B,CACF,EACA,CACF,CAAA,CAEJ,CACF,CAAC,ECpIU6B,GAAwBtC,EAAkB,CACrD,KAAM,YACN,QAAS,UAET,WAAY,CACH,MAAA,CACL,CACE,IAAK,IACL,SAAU,IACV,KAAM,WACR,CAAA,CAEJ,EAEA,WAAW,CAAE,eAAAxB,GAAkB,SAC7B,MAAM0B,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,eAAgB,CAAA,EACxCM,IACJC,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,gBAAiB,CAAA,EAExC,MAAA,CACL,MACAQ,EAAA,gBACE,CACE,GAAGhB,EACH,MAAOrB,EACLuB,EAAO,aACPF,EAA0B,KAC5B,EACA,oBAAqB,KAAK,IAC5B,EACA1B,CACF,EACA,CACE,IACA,CACE,GAAGiC,EACH,MAAO5B,EACLuB,EAAO,cACPK,EAA2B,KAC7B,CACF,EACA,CACF,CAAA,CAEJ,CACF,CAAC,EC7CY8B,EAAe,CAC1B,gBAAiB,CACf,QAAS,aACX,EACA,UAAW,CACT,QAAS,OACX,EACA,cAAe,CACb,QAAS,OACT,OAAQ,CAAC,OAAQ,SAAU,QAAS,SAAS,CAC/C,CACF,EAIaC,EAAqB,CAChC,UAAW,CACT,WAAYD,EACZ,KAAMD,EACR,EACA,QAAS,CACP,WAAY,CACV,GAAGC,EACH,MAAO,CAAE,QAAS,IAAK,OAAQ,CAAC,IAAK,IAAK,GAAG,CAAW,CAC1D,EACA,KAAM1B,EACR,EACA,eAAgB,CACd,WAAY0B,EACZ,KAAMlB,EACR,EACA,iBAAkB,CAChB,WAAYkB,EACZ,KAAMF,EACR,CACF,ECnBA,SAASI,GAAiBC,EAAYC,EAAK,KAAK,UAAW,CACzD,MAAMC,EAAY,CAAA,EACX,OAAAF,EAAM,OAAQG,GAAc,CAC3B,MAAAC,EAAMH,EAAGE,CAAI,EACZ,OAAA,OAAO,UAAU,eAAe,KAAKD,EAAME,CAAG,EACjD,GACCF,EAAKE,CAAG,EAAI,EAAA,CAClB,CACH,CAKA,SAASC,GAAeC,EAAY,CAClC,MAAMC,EAAWD,EAAM,OACrB,CAACE,EAASC,IAAkBH,EAAM,QAAQE,CAAE,IAAMC,CAAA,EAG7C,OADYV,GAAiBQ,CAAQ,CAE9C,CAEA,MAAMG,EAAWtF,YAAU,OAAO,CAChC,KAAM,WAGN,SAAU,IACV,YAAa,CACJ,MAAA,CACL,cAAe,KACf,MAAO,CAAC,EACR,WAAY,IAAM,CAEhB,GAAI,OAAO,OAAW,KAAgB,OAAe,eAAgB,CACnE,MAAMuF,EAAe,OAAe,eAChC,OAAAA,EAAY,SAAW,OACzBA,EAAY,OAAS,EAETA,EAAA,SAGPA,EAAY,OAAO,UAC5B,CAEA,OAAOC,GAAG,GAAA,CACZ,EACA,kBAAmB,IAAA,CAEvB,EACA,qBAAsB,CACb,MAAA,CACL,CACE,MAAO,KAAK,QAAQ,MACpB,WAAY,CACV,CAAC,KAAK,QAAQ,aAAa,EAAG,CAC5B,QAAS,KACT,UAAYvF,GACVA,EAAQ,aAAa,QAAQ,KAAK,QAAQ,aAAa,EAAE,EAC3D,WAAaC,IAAgB,CAC3B,CAAC,QAAQ,KAAK,QAAQ,aAAa,EAAE,EACnCA,EAAW,KAAK,QAAQ,aAAa,CAAA,EAE3C,CACF,CACF,CAAA,CAEJ,EA+BA,uBAAwB,CACtB,IAAIuF,EAAyB,KACzBC,EAAkB,GACf,MAAA,CACL,IAAI9B,SAAO,CACT,IAAK,IAAIF,EAAA,UAAU,UAAU,EAC7B,kBAAmB,CAACiC,EAAcC,EAAU7B,IAAa,CAEvD,MAAM8B,EACJF,EAAa,KAAMG,GAAgBA,EAAY,UAAU,GACzD,CAACF,EAAS,IAAI,GAAG7B,EAAS,GAAG,EACzBgC,EACJ,KAAK,QAAQ,mBACbJ,EAAa,KAAM3B,GAAO,CACxB,IAAI3B,EAAIO,EACR,MAAO,EAAG,GAAAA,GAAMP,EAAK,KAAK,SAAS,qBAAuB,MAC1DO,IAAO,SAEHA,EAAG,KAAKP,EAAI2B,CAAE,EAAA,CACnB,EACC,GAAA,CAAC6B,GAAcE,EACjB,OAEI,KAAA,CAAE,GAAA/B,CAAO,EAAAD,EACT,CAAE,MAAAiC,EAAO,cAAAC,EAAe,WAAAC,CAAA,EAAe,KAAK,QAC5CC,EAAYC,EAAA,wBAChBR,EAAS,IACTD,CAAA,EAEI,CAAE,QAAAU,CAAY,EAAAF,EA4ChB,GA1CYG,mBAAiBH,CAAS,EAElC,QAAQ,CAAC,CAAE,SAAAI,KAAe,CAChC,MAAMC,EAAWC,EAAA,oBACf1C,EAAS,IACTwC,EACC5G,GACQqG,EAAM,SAASrG,EAAK,KAAK,IAAI,CACtC,EAEI+G,EAASF,EACZ,IAAI,CAAC,CAAE,KAAA7G,CAAW,IAAAA,EAAK,MAAMsG,CAAa,CAAC,EAC3C,OAAQhH,GAAOA,IAAO,IAAI,EACvB0H,EAAmB1B,GAAeyB,CAAM,EAC9CF,EAAS,QAAQ,CAAC,CAAE,KAAA7G,EAAM,IAAAJ,KAAU,CAC9B,IAAA8C,EAKJ,MAAMpD,IACHoD,EAAK2B,EAAG,IAAI,OAAOzE,CAAG,KAAO,MAAQ8C,IAAO,OACzC,OACAA,EAAG,MAAM4D,CAAa,EAC5B,GAAIhH,KAAO,KAAM,CACZ+E,EAAA,cAAczE,EAAK,OAAW,CAC/B,GAAGI,EAAK,MACR,CAACsG,CAAa,EAAGC,EAAW,CAAA,CAC7B,EACD,MACF,CAEA,KAAM,CAAE,QAAAU,EAAQ,EAAIP,EAAQ,OAAO,EAAE,UAAU9G,CAAG,EAClCqH,IAAWD,EAAiB,SAAS1H,EAAE,GAElD+E,EAAA,cAAczE,EAAK,OAAW,CAC/B,GAAGI,EAAK,MACR,CAACsG,CAAa,EAAGC,EAAW,CAAA,CAC7B,CACH,CACD,CAAA,CACF,EACG,EAAClC,EAAG,MAAM,OAGP,OAAAA,CACT,EAEA,KAAK1D,EAAM,CACH,MAAAuG,EAAmBC,GAAe,CAClC,IAAAzE,EACJoD,EACG,GAAApD,EAAK/B,EAAK,IAAI,iBAAmB,MAAQ+B,IAAO,SAE7CA,EAAG,SAASyE,EAAM,MAAM,EAE1BxG,EAAK,IAAI,cACT,IAAA,EAEC,cAAA,iBAAiB,YAAauG,CAAe,EAC7C,CACL,SAAU,CACD,OAAA,oBAAoB,YAAaA,CAAe,CACzD,CAAA,CAEJ,EACA,MAAO,CAGL,gBAAiB,CAGf,KAAM,CAACvG,EAAMwG,IAAe,CACtB,IAAAzE,EACJ,OACEoD,IAAsBnF,EAAK,IAAI,iBAC7B+B,EAAKyE,EAAM,gBAAkB,MAAQzE,IAAO,OAC1C,OACAA,EAAG,iBAAmB,UAENoD,EAAA,KACFC,EAAA,IAEb,EACT,EAEA,MAAO,KACaA,EAAA,GACX,GAEX,EAGA,gBAAkBqB,GAAU,CAC1B,GAAI,CAACrB,EACI,OAAAqB,EAET,KAAM,CAAE,MAAAf,EAAO,cAAAC,GAAkB,KAAK,QAChCe,EAAYC,GAAkB,CAClC,MAAMC,EAAc,CAAA,EACX,OAAAD,EAAA,QAAStH,GAAc,CAE9B,GAAIA,EAAK,OAAQ,CACfuH,EAAK,KAAKvH,CAAI,EACd,MACF,CAEA,GAAI,CAACqG,EAAM,SAASrG,EAAK,KAAK,IAAI,EAAG,CACnCuH,EAAK,KAAKvH,EAAK,KAAKqH,EAASrH,EAAK,OAAO,CAAC,CAAC,EAC3C,MACF,CAEM,MAAAwH,EAAgBxH,EAAK,KAAK,OAC9B,CACE,GAAGA,EAAK,MACR,CAACsG,CAAa,EAAG,IACnB,EACAe,EAASrH,EAAK,OAAO,EACrBA,EAAK,KAAA,EAEPuH,EAAK,KAAKC,CAAa,CAAA,CACxB,EACMC,EAAA,SAAS,KAAKF,CAAI,CAAA,EAGT,OAAAxB,EAAA,GACX,IAAI2B,EAAA,MACTL,EAASD,EAAM,OAAO,EACtBA,EAAM,UACNA,EAAM,OAAA,CAEV,CACF,CAAA,CACD,CAAA,CAEL,CACF,CAAC,ECvQKO,OAAmB,IAAkB,CACzC,OACA,SACA,YACA,SACA,MACF,CAAC,EACKC,GAAkB,IAAA,IAAgB,CAAC,YAAa,iBAAiB,CAAC,EAMxE,SAASC,GAAkBC,EAAwBC,EAAwB,CACzE,MAAMC,EAAgB,CAAA,EAEX,SAAA,CAACC,EAAO7F,CAAK,IAAK,OAAO,QAAQ0F,EAAW,MAAM,EACvDH,GAAa,IAAIM,CAAqB,EACxCD,EAAM,KAAKD,EAAO,KAAKE,CAAK,CAAC,EACpBL,GAAY,IAAIK,CAAmB,GACtCD,EAAA,KAAKD,EAAO,KAAKE,EAAO,CAAE,MAAO7F,CAAO,CAAA,CAAC,EAInD,OACE0F,EAAW,KAER,MAAM,OAAO,EAGb,OAAQI,GAASA,EAAK,OAAS,CAAC,EAEhC,IAAKA,GACAA,IAAS;AAAA,EACJH,EAAO,MAAM,UAAa,OAAO,EAEjCA,EAAO,KAAKG,EAAMF,CAAK,CAEjC,CAEP,CAMA,SAASG,GAAYC,EAAmBL,EAAwB,CAC9D,MAAMM,EAAWN,EAAO,MAAM,KAAK,OAAO,CACxC,KAAMK,EAAK,IAAA,CACZ,EAED,OAAOE,GAAuBF,EAAK,QAASL,CAAM,EAAE,IAAK/H,GAAS,CAC5D,GAAAA,EAAK,KAAK,OAAS,OACrB,OAAOA,EAAK,KAAK,CAAC,GAAGA,EAAK,MAAOqI,CAAQ,CAAC,EAGxC,GAAArI,EAAK,KAAK,OAAS,YACd,OAAAA,EAEH,MAAA,IAAI,MAAM,sBAAsB,CAAA,CACvC,CACH,CAMA,SAASsI,GACPC,EACAR,EACQ,CACR,MAAMS,EAAgB,CAAA,EAElB,GAAA,OAAOD,GAAY,SACf,OAAAC,EAAA,KACJ,GAAGX,GAAkB,CAAE,KAAM,OAAQ,KAAMU,EAAS,OAAQ,EAAG,EAAGR,CAAM,CAAA,EAEnES,EAGT,UAAWV,KAAcS,EACvBC,EAAM,KAAK,GAAGX,GAAkBC,EAAYC,CAAM,CAAC,EAE9C,OAAAS,CACT,CAKgB,SAAAC,GACdvG,EACA6F,EACQ,CACR,MAAMS,EAAgB,CAAA,EAEtB,UAAWD,KAAWrG,EAChB,GAAAqG,EAAQ,OAAS,OACnBC,EAAM,KAAK,GAAGL,GAAYI,EAASR,CAAM,CAAC,UACjCQ,EAAQ,OAAS,OAC1BC,EAAM,KAAK,GAAGF,GAAuB,CAACC,CAAO,EAAGR,CAAM,CAAC,MAEjD,OAAA,IAAIxG,GAAqBgH,CAAO,EAGnC,OAAAC,CACT,CAKgB,SAAAE,EACd5F,EACAiF,EACA,CACA,IAAIzI,EAAKwD,EAAM,GAEXxD,IAAO,SACJA,EAAAqG,EAAS,QAAQ,cAGxB,IAAIgD,EAAO7F,EAAM,KAEb6F,IAAS,SACJA,EAAA,aAGL,IAAApJ,EAEA,GAAA,CAACuD,EAAM,QACTvD,EAAcwI,EAAO,MAAMY,CAAI,EAAE,OAAO7F,EAAM,KAAK,UAC1C,OAAOA,EAAM,SAAY,SACpBvD,EAAAwI,EAAO,MAAMY,CAAI,EAAE,OAC/B7F,EAAM,MACNiF,EAAO,KAAKjF,EAAM,OAAO,CAAA,MAEtB,CACL,MAAM0F,EAAQC,GAAqB3F,EAAM,QAASiF,CAAM,EACxDxI,EAAcwI,EAAO,MAAMY,CAAI,EAAE,OAAO7F,EAAM,MAAO0F,CAAK,CAC5D,CAEA,MAAMI,EAAmB,CAAA,EAEzB,GAAI9F,EAAM,SACG,UAAA+F,KAAS/F,EAAM,SACxB8F,EAAS,KAAKF,EAAYG,EAAOd,CAAM,CAAC,EAItC,MAAAe,EAAYf,EAAO,MAAM,WAAc,OAAO,CAAA,EAAIa,CAAQ,EAEzD,OAAAb,EAAO,MAAM,eAAkB,OACpC,CACE,GAAAzI,EACA,GAAGwD,EAAM,KACX,EACA8F,EAAS,OAAS,EAAI,CAACrJ,EAAauJ,CAAS,EAAIvJ,CAAA,CAErD,CAKA,SAASwJ,GAA2BxJ,EAAmB,CACrD,MAAMgJ,EAA2B,CAAA,EACjC,IAAIS,EAIQ,OAAAzJ,EAAA,QAAQ,QAASS,GAAS,CAGhC,GAAAA,EAAK,KAAK,OAAS,YAAa,CAC9BgJ,EAEEA,EAAe,OAAS,OAE1BA,EAAe,MAAQ;AAAA,EACdA,EAAe,OAAS,SAEjCA,EAAe,QAAQA,EAAe,QAAQ,OAAS,CAAC,EAAE,MACxD;AAAA,GAIaA,EAAA,CACf,KAAM,OACN,KAAM;AAAA,EACN,OAAQ,CAAC,CAAA,EAIb,MACF,CAEA,MAAMrG,EAAiB,CAAA,EACnB,IAAA0F,EACAY,EAEO,UAAAC,KAAQlJ,EAAK,MAClB,GAAAkJ,EAAK,KAAK,OAAS,OACVb,EAAAa,UACFA,EAAK,KAAK,OAAS,UACdD,EAAAC,UACLvB,GAAa,IAAIuB,EAAK,KAAK,IAAoB,EACjDvG,EAAAuG,EAAK,KAAK,IAAoB,EAAI,WAChCtB,GAAY,IAAIsB,EAAK,KAAK,IAAkB,EACrDvG,EAAOuG,EAAK,KAAK,IAAkB,EAAIA,EAAK,MAAM,UAElD,OAAM,MAAM,oCAAsCA,EAAK,KAAK,IAAI,EAMhEF,EAEEA,EAAe,OAAS,OACtBX,GAEFE,EAAQ,KAAKS,CAAc,EACVA,EAAA,CACf,KAAM,OACN,KAAMX,EAAS,MAAM,KACrB,QAAS,CACP,CACE,KAAM,OACN,KAAMrI,EAAK,YACX,OAAA2C,CACF,CACF,CAAA,GAEOsG,EACTV,EAAQ,KAAKS,CAAc,EAIzB,KAAK,UAAUA,EAAe,MAAM,IAAM,KAAK,UAAUrG,CAAM,EAG/DqG,EAAe,MAAQhJ,EAAK,aAG5BuI,EAAQ,KAAKS,CAAc,EACVA,EAAA,CACf,KAAM,OACN,KAAMhJ,EAAK,YACX,OAAA2C,CAAA,GAIGqG,EAAe,OAAS,SAE7BX,EAGEW,EAAe,OAASX,EAAS,MAAM,KAGvC,KAAK,UACHW,EAAe,QAAQA,EAAe,QAAQ,OAAS,CAAC,EAAE,MAAA,IACtD,KAAK,UAAUrG,CAAM,EAE3BqG,EAAe,QAAQA,EAAe,QAAQ,OAAS,CAAC,EAAE,MACxDhJ,EAAK,YAGPgJ,EAAe,QAAQ,KAAK,CAC1B,KAAM,OACN,KAAMhJ,EAAK,YACX,OAAA2C,CAAA,CACD,GAIH4F,EAAQ,KAAKS,CAAc,EACVA,EAAA,CACf,KAAM,OACN,KAAMX,EAAS,MAAM,KACrB,QAAS,CACP,CACE,KAAM,OACN,KAAMrI,EAAK,YACX,OAAA2C,CACF,CACF,CAAA,IAKJ4F,EAAQ,KAAKS,CAAc,EACVA,EAAA,CACf,KAAM,OACN,KAAMhJ,EAAK,YACX,OAAA2C,CAAA,IAQD0F,EAScW,EAAA,CACf,KAAM,OACN,KAAMX,EAAS,MAAM,KACrB,QAAS,CACP,CACE,KAAM,OACN,KAAMrI,EAAK,YACX,OAAA2C,CACF,CACF,CAAA,EAjBeqG,EAAA,CACf,KAAM,OACN,KAAMhJ,EAAK,YACX,OAAA2C,CAAA,CAiBN,CACD,EAEGqG,GACFT,EAAQ,KAAKS,CAAc,EAGtBT,CACT,CAKgB,SAAAY,EACdnJ,EACAoJ,EACAC,EACgB,CACZ,GAAArJ,EAAK,KAAK,OAAS,iBACf,MAAA,MACJ,sDACEA,EAAK,KAAK,KACV,GAAA,EAIA,MAAAsJ,EAAcD,GAAA,YAAAA,EAAY,IAAIrJ,GAEpC,GAAIsJ,EACK,OAAAA,EAGH,MAAA1I,EAAYxB,EAAaY,CAAI,EAEnC,IAAIV,EAAKsB,EAAU,GAGftB,IAAO,OACJA,EAAAqG,EAAS,QAAQ,cAGxB,MAAM4D,EAAa,CAAA,EACnB,SAAW,CAACC,EAAMpH,CAAK,IAAK,OAAO,QAAQ,CACzC,GAAGpC,EAAK,MACR,GAAGY,EAAU,YAAY,KAAA,CAC1B,EAAG,CACF,MAAM6I,EAAYL,EAAYxI,EAAU,YAAY,IAAI,EACxD,GAAI,CAAC6I,EACG,MAAA,MACJ,qCAAuC7I,EAAU,YAAY,IAAA,EAIjE,MAAM8I,EAAaD,EAAU,WAEzBD,KAAQE,EACVH,EAAMC,CAAI,EAAIpH,EAWPoH,IAAS,MAAQ,EAAEA,KAAQ1E,IAC1B,QAAA,KAAK,wCAA0C0E,CAAI,CAE/D,CAEM,MAAAjB,EAAUQ,GAA2BnI,EAAU,WAAW,EAE1DgI,EAA6B,CAAA,EACnC,QAASe,EAAI,EAAGA,EAAI/I,EAAU,eAAgB+I,IACnCf,EAAA,KACPO,EAAYnJ,EAAK,UAAW,MAAM2J,CAAC,EAAGP,EAAaC,CAAU,CAAA,EAIjE,MAAMvG,EAAwB,CAC5B,GAAAxD,EACA,KAAMsB,EAAU,YAAY,KAC5B,MAAA2I,EACA,QAAAhB,EACA,SAAAK,CAAA,EAGU,OAAAS,GAAA,MAAAA,EAAA,IAAIrJ,EAAM8C,GAEfA,CACT,CChbA,MAAMgB,GAAa,IAAIC,EAAAA,UAAU,iBAAiB,EAE5C6F,GAAyC,CAE7C,MAAO,QAEP,MAAO,QAEP,KAAM,OACN,MAAO,QACP,eAAgB,cAClB,EAUaC,GAA0B,IAAM,CACvC,IAAAC,EACJ,OAAO,IAAI7F,EAAAA,OAAO,CAChB,IAAKH,GACL,KAAKiG,EAAa,CACT,MAAA,CACL,OAAQ,MAAOpJ,EAAMqJ,IAAe,SAC9BtH,EAAA,KAAK,MAAL,YAAAA,EAAU,SAAS/B,EAAK,OAAO,cAAc,MAAO,IAGtDmJ,EAAU,WAAW,IAAM,CACpBnJ,EAAA,SACHA,EAAK,MAAM,GAAG,QAAQmD,GAAY,CAAE,YAAa,GAAM,CAAA,GAExD,CAAC,EAER,EACA,QAAS,IAAM,CACTgG,GACF,aAAaA,CAAO,CAExB,CAAA,CAEJ,EACA,MAAO,CACL,MAAO,CACE,MAAA,CAEL,6BAA8B,CAAC,EAE/B,gCAAiC,CAAC,EAElC,kBAAmB,GAAY,CAEnC,EAEA,MAAM3D,EAAa8D,EAAMhE,EAAU7B,EAAU,CAIvC,GAHJ6F,EAAK,gCAAkC,GACvCA,EAAK,cAAc,QAEf,CAAC9D,EAAY,YAAcF,EAAS,IAAI,GAAG7B,EAAS,GAAG,EAClD,OAAA6F,EAuBT,MAAMC,EAA0C,CAAA,EAE1CC,EAAWC,eAAanE,EAAS,IAAMjG,GAASA,EAAK,MAAM,EAAE,EAC7DqK,EAAe,IAAI,IACvBF,EAAS,IAAKnK,GAAS,CAACA,EAAK,KAAK,MAAM,GAAIA,CAAI,CAAC,CAAA,EAE7C6G,EAAWuD,eAAahG,EAAS,IAAMpE,GAASA,EAAK,MAAM,EAAE,EAGnE,UAAWA,KAAQ6G,EAAU,CAC3B,MAAMyD,EAAUD,EAAa,IAAIrK,EAAK,KAAK,MAAM,EAAE,EAE7CuK,EAAiBD,GAAA,YAAAA,EAAS,KAAK,WAC/BE,EAAiBxK,EAAK,KAAK,WAE7B,GAAAsK,GAAWC,GAAkBC,EAAgB,CAC/C,MAAMC,EAAW,CACf,MAAOD,EAAe,MAAM,MAC5B,MAAOA,EAAe,MAAM,MAC5B,KAAMA,EAAe,KAAK,KAC1B,MAAOpG,EAAS,IAAI,QAAQpE,EAAK,GAAG,EAAE,KAAA,EAGxC,IAAI0K,EAAW,CACb,MAAOH,EAAe,MAAM,MAC5B,MAAOA,EAAe,MAAM,MAC5B,KAAMA,EAAe,KAAK,KAC1B,MAAOtE,EAAS,IAAI,QAAQqE,EAAQ,GAAG,EAAE,KAAA,EAG3CJ,EAAwClK,EAAK,KAAK,MAAM,EAAE,EACxD0K,EASEvE,EAAY,QAAQ,sBAAsB,IAGxCnG,EAAK,KAAK,MAAM,MAAMiK,EAAK,+BAC7BS,EACET,EAAK,6BAA6BjK,EAAK,KAAK,MAAM,EAAE,GAKpDyK,EAAS,OAAS,qBACpBC,EAAS,MAAQD,EAAS,QAI9BR,EAAK,gCAAgCjK,EAAK,KAAK,MAAM,EAAE,EAAI0K,EAGvD,KAAK,UAAUA,CAAQ,IAAM,KAAK,UAAUD,CAAQ,IACrDC,EAAiB,cAAc,EAC9BA,EAAS,MAAQD,EAAS,MAY5BR,EAAK,cAAc,IAAIjK,EAAK,KAAK,MAAM,EAAE,EAE7C,CACF,CAEA,OAAAiK,EAAK,6BACHC,EAEKD,CACT,CACF,EACA,MAAO,CACL,YAAYvJ,EAAO,CACX,MAAAiK,EAAe,KAAgB,SAASjK,CAAK,EAC/C,GAAAiK,EAAY,cAAc,OAAS,EAC9B,OAGT,MAAMC,EAA4B,CAAA,EAElC,OAAAlK,EAAM,IAAI,YAAY,CAACV,EAAMJ,IAAQ,CAKnC,GAJI,CAACI,EAAK,MAAM,IAIZ,CAAC2K,EAAY,cAAc,IAAI3K,EAAK,MAAM,EAAE,EAC9C,OAGF,MAAM6K,EACJF,EAAY,gCAAgC3K,EAAK,MAAM,EAAE,EACrD8K,EAAuB,CAAA,EAE7B,SAAW,CAACC,EAAUvJ,CAAG,IAAK,OAAO,QAAQqJ,CAAS,EACpDC,EAAgB,aAAelB,GAAemB,CAAQ,CAAC,EACrDvJ,GAAO,OASX,MAAMwJ,EAAaC,EAAAA,WAAW,KAAKrL,EAAKA,EAAMI,EAAK,SAAU,CAC3D,GAAG8K,CAAA,CACJ,EAEDF,EAAY,KAAKI,CAAU,CAAA,CAC5B,EAEME,EAAc,cAAA,OAAOxK,EAAM,IAAKkK,CAAW,CACpD,CACF,CAAA,CACD,CACH,ECvNMO,GAA0C,CAC9C,WAAY,mBACZ,WAAY,mBACZ,GAAI,UACJ,MAAO,aACP,YAAa,mBACf,ECkCaC,GAAiBjI,OAAK,OAEhC,CACD,KAAM,iBACN,MAAO,iBAEP,QAAS,2BAET,SAAU,GACV,SAAU,GAEV,WAAY,CACH,MAAA,CACL,CACE,IAAK,MACL,SAAW7C,GAAY,CACjB,GAAA,OAAOA,GAAY,SACd,MAAA,GAGT,MAAM+K,EAAgC,CAAA,EACtC,SAAW,CAACN,EAAUO,CAAQ,IAAK,OAAO,QAAQH,EAAe,EAC3D7K,EAAQ,aAAagL,CAAQ,IAC/BD,EAAMN,CAAQ,EAAIzK,EAAQ,aAAagL,CAAQ,GAInD,OAAIhL,EAAQ,aAAa,gBAAgB,IAAM,iBACtC+K,EAGF,EACT,CACF,CAAA,CAEJ,EAEA,WAAW,CAAE,eAAAtK,GAAkB,OAC7B,MAAMwK,IAAgB7I,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,iBAAkB,CAAA,EAE7D,MAAA,CACL,MACAe,EAAAA,gBAAgB1C,EAAgB,CAC9B,MAAO4B,EAAO,WACd,iBAAkB,aAAA,CACnB,EACD,CACE,MACAc,EAAA,gBACE,CACE,GAAG8H,EACH,MAAOnK,EAAgBuB,EAAO,MAAO4I,EAAc,KAAK,EACxD,iBAAkB,KAAK,IACzB,EACAxK,CACF,EACA,CACF,CAAA,CAEJ,EAEA,aAAc,CACL,MAAA,CAEL,cACGnB,GACD,CAAC,CAAE,MAAAc,EAAO,SAAA8K,KAAe,CACvB,MAAMC,EACJ/K,EAAM,OAAO,MAAM,eAAkB,gBAEvC,OAAI8K,GACI9K,EAAA,GAAG,OAAOd,EAAK6L,CAAQ,EAGxB,EACT,EAEF,cACGjL,GACD,CAAC,CAAE,MAAAE,EAAO,SAAA8K,KAAe,CACvB,MAAM5K,EAAYlB,EAAoBgB,EAAM,IAAKF,CAAU,EAC3D,GAAII,IAAc,OACT,MAAA,GAGH,KAAA,CAAE,SAAAV,EAAU,OAAAC,CAAW,EAAAS,EAE7B,OAAI4K,GACI9K,EAAA,GAAG,YAAYR,EAAUC,CAAM,EAGhC,EACT,EAEF,cACE,CAACK,EAAYsC,IACb,CAAC,CAAE,MAAApC,EAAO,SAAA8K,KAAe,CACvB,MAAM5K,EAAYlB,EAAoBgB,EAAM,IAAKF,CAAU,EAC3D,GAAII,IAAc,OACT,MAAA,GAGT,KAAM,CAAE,SAAAV,EAAU,OAAAC,EAAQ,KAAAH,EAAM,YAAAT,GAAgBqB,EAEhD,GAAI4K,EAAU,CAER,GAAA1I,EAAM,WAAa,OAAW,CAChC,MAAM4I,EAAa,CAAA,EAGR,UAAA7C,KAAS/F,EAAM,SACxB4I,EAAW,KAAKhD,EAAYG,EAAOnI,EAAM,MAAM,CAAC,EAI9CV,EAAK,aAAe,EAEtBU,EAAM,GAAG,QACPR,EAAWX,EAAY,SAAW,EAClCY,EAAS,EACT,IAAIuH,EAAAA,MAAMD,EAAAA,SAAS,KAAKiE,CAAU,EAAG,EAAG,CAAC,CAAA,EAI3ChL,EAAM,GAAG,OACPR,EAAWX,EAAY,SACvBmB,EAAM,OAAO,MAAM,WAAc,OAAO,GAAIgL,CAAU,CAAA,CAG5D,CAGI,GAAA5I,EAAM,UAAY,OAAW,CAC/B,IAAIyF,EAAoB,CAAA,EAGpB,OAAOzF,EAAM,SAAY,SAE3ByF,EAAQ,KAAK7H,EAAM,OAAO,KAAKoC,EAAM,OAAO,CAAC,EAI7CyF,EAAUE,GAAqB3F,EAAM,QAASpC,EAAM,MAAM,EAI5DA,EAAM,GAAG,QACPR,EAAW,EACXA,EAAWX,EAAY,SAAW,EAClC,IAAImI,EAAAA,MAAMD,EAAAA,SAAS,KAAKc,CAAO,EAAG,EAAG,CAAC,CAAA,CAE1C,CAIA7H,EAAM,GAAG,cACPR,EACA4C,EAAM,OAAS,OACX,OACApC,EAAM,OAAO,MAAMoC,EAAM,IAAI,EACjC,CACE,GAAGvD,EAAY,MACf,GAAGuD,EAAM,KACX,CAAA,EAKFpC,EAAM,GAAG,cAAcR,EAAW,EAAG,OAAW,CAC9C,GAAGF,EAAK,MACR,GAAG8C,EAAM,KAAA,CACV,CACH,CAEO,MAAA,EACT,EAkBF,cACG6I,GACD,CAAC,CAAE,MAAAjL,EAAO,SAAA8K,KAAe,CACjB,MAAAI,EACJlL,EAAM,IAAI,QAAQiL,EAAmB,CAAC,EAAE,KAAO,EAAA,KAAK,OACpD,iBACIE,EACJnL,EAAM,IAAI,QAAQiL,EAAmB,CAAC,EAAE,KAAO,EAAA,KAAK,OACpD,iBAEE,GAAA,CAACC,GAAmB,CAACC,EAChB,MAAA,GAGT,MAAMC,EAAgBpM,EACpBgB,EAAM,IACNiL,EAAmB,CAAA,EAGf,CAAE,KAAA3L,EAAM,YAAAT,EAAa,SAAAW,EAAU,OAAAC,EAAQ,MAAAF,CAAU,EAAA6L,EAInD,GAAA9L,EAAK,aAAe,EAAG,CACnB,MAAA+L,EAAmBrL,EAAM,IAAI,QACjCR,EAAWX,EAAY,SAAW,CAAA,EAE9ByM,EAAiBtL,EAAM,IAAI,QAAQP,EAAS,CAAC,EAC7C8L,EACJF,EAAiB,WAAWC,CAAc,EAGxCR,GACF9K,EAAM,GAAG,KAAKuL,EAAmBhM,EAAQ,CAAC,CAE9C,CAEA,IAAIiM,EAAkBP,EAAmB,EACrClH,EAAgB/E,EAAoBgB,EAAM,IAAKwL,CAAe,EAG3D,KAAAzH,EAAe,eAAiB,GAGrC,GAFAyH,IACgBzH,EAAA/E,EAAoBgB,EAAM,IAAKwL,CAAe,EAC1DzH,IAAkB,OACb,MAAA,GAMX,OAAI+G,IACFA,EACE9K,EAAM,GACH,YAAYR,EAAUA,EAAWX,EAAY,QAAQ,EACrD,QACC2M,EAAkB,EAClBhM,EACA,IAAIwH,EAAA,MAAMnI,EAAY,QAAS,EAAG,CAAC,GAEpC,eAAe,CAAA,EAGpBmB,EAAM,GAAG,aACP,IAAIyL,EAAAA,cAAczL,EAAM,IAAI,QAAQwL,EAAkB,CAAC,CAAC,CAAA,GAIrD,EACT,EAGF,aACE,CAAC1L,EAAY4L,IACb,CAAC,CAAE,MAAA1L,EAAO,SAAA8K,KAAe,CACvB,MAAM5K,EAAYlB,EAAoBgB,EAAM,IAAKF,CAAU,EAC3D,GAAII,IAAc,OACT,MAAA,GAGT,KAAM,CAAE,YAAArB,EAAa,YAAAC,EAAa,SAAAU,EAAU,OAAAC,EAAQ,MAAAF,CAClD,EAAAW,EAEIyL,EAAuB3L,EAAM,IAAI,IAAIR,EAAW,EAAGM,CAAU,EAC7D8L,EAAkB5L,EAAM,IAAI,IAAIF,EAAYL,EAAS,CAAC,EAEtDsL,EACJ/K,EAAM,OAAO,MAAM,eAAkB,gBAEjC6L,EAAuBpM,EAAS,EAChCqM,EAAqBD,EAAuB,EAElD,OAAIf,IAGI9K,EAAA,GAAG,OAAO6L,EAAsBd,CAAQ,EAI9C/K,EAAM,GAAG,QACP8L,EACAA,EAAqB,EACrBF,EAAgB,QAAQ,KAAO,EAC3B,IAAI5E,EAAA,MACFD,EAAA,SAAS,KAAK6E,CAAe,EAC7BrM,EAAQ,EACRA,EAAQ,CAEV,EAAA,MAAA,EAKFmM,GACF1L,EAAM,GAAG,aACP8L,EACAA,EACA9L,EAAM,OAAO,KAAKlB,CAAW,EAAE,KAC/BD,EAAY,KAAA,EAKhBmB,EAAM,GAAG,aACP,IAAIyL,EAAc,cAAAzL,EAAM,IAAI,QAAQ8L,CAAkB,CAAC,CAAA,EAKzD9L,EAAM,GAAG,QACPR,EAAW,EACXC,EAAS,EACTkM,EAAqB,QAAQ,KAAO,EAChC,IAAI3E,EAAA,MACFD,EAAA,SAAS,KAAK4E,CAAoB,EAClCpM,EAAQ,EACRA,EAAQ,CAEV,EAAA,MAAA,GAID,EACT,CAAA,CAEN,EAEA,uBAAwB,CACf,MAAA,CAAC4J,IAAyB,CACnC,EAEA,sBAAuB,CAyJd,MAAA,CACL,UAxJsB,IACtB,KAAK,OAAO,SAAS,MAAM,CAAC,CAAE,SAAA7I,KAAe,CAE3C,IAAMA,EAAS,gBAAgB,EAE/B,IAAMA,EAAS,cAAc,EAE7B,IACEA,EAAS,QAAQ,CAAC,CAAE,MAAAN,KAAY,CACxB,KAAA,CAAE,YAAAlB,GAAgBE,EACtBgB,EAAM,IACNA,EAAM,UAAU,IAAA,EAGZ+L,EACJ/L,EAAM,UAAU,QAAQ,eAAiB,EACrCgM,EAAclN,EAAY,OAAS,YAErC,OAAAiN,GAAyB,CAACC,EACrB1L,EAAS,cAAcN,EAAM,UAAU,KAAM,CAClD,KAAM,YACN,MAAO,CAAC,CAAA,CACT,EAGI,EAAA,CACR,EAEH,IACEM,EAAS,QAAQ,CAAC,CAAE,MAAAN,KAEhBA,EAAM,UAAU,QAAQ,eAAiB,EAGlCM,EAAS,aAAa,gBAAgB,EAGxC,EACR,EAGH,IACEA,EAAS,QAAQ,CAAC,CAAE,MAAAN,KAAY,CACxB,KAAA,CAAE,MAAAT,EAAO,SAAAC,CAAA,EAAaR,EAC1BgB,EAAM,IACNA,EAAM,UAAU,IAAA,EAGZ+L,EACJ/L,EAAM,UAAU,QAAQ,eAAiB,EACrCiD,EACJjD,EAAM,UAAU,SAAWA,EAAM,UAAU,KACvCiM,EAAkBzM,IAAa,EAE/ByL,EAAmBzL,EAAW,EAEpC,MACE,CAACyM,GACDF,GACA9I,GACA1D,IAAU,EAEHe,EAAS,cAAc2K,CAAgB,EAGzC,EAAA,CACR,CAAA,CACJ,EAsFD,MApFkB,IAClB,KAAK,OAAO,SAAS,MAAM,CAAC,CAAE,SAAA3K,KAAe,CAG3C,IACEA,EAAS,QAAQ,CAAC,CAAE,MAAAN,KAAY,CACxB,KAAA,CAAE,KAAAV,EAAM,MAAAC,CAAA,EAAUP,EACtBgB,EAAM,IACNA,EAAM,UAAU,IAAA,EAGZ+L,EACJ/L,EAAM,UAAU,QAAQ,eAAiB,EACrCiD,EACJjD,EAAM,UAAU,SAAWA,EAAM,UAAU,KACvCkM,EAAa5M,EAAK,YAAY,SAAW,EACzC6M,EAAgB5M,EAAQ,EAG5B,OAAAwM,GACA9I,GACAiJ,GACAC,EAEO7L,EAAS,aAAa,gBAAgB,EAGxC,EAAA,CACR,EAGH,IACEA,EAAS,QAAQ,CAAC,CAAE,MAAAN,EAAO,MAAA6C,KAAY,CAC/B,KAAA,CAAE,KAAAvD,EAAM,OAAAG,CAAA,EAAWT,EACvBgB,EAAM,IACNA,EAAM,UAAU,IAAA,EAGZ+L,EACJ/L,EAAM,UAAU,QAAQ,eAAiB,EACrCiD,EACJjD,EAAM,UAAU,SAAWA,EAAM,UAAU,KACvCkM,EAAa5M,EAAK,YAAY,SAAW,EAE3C,GAAAyM,GAAyB9I,GAAkBiJ,EAAY,CACzD,MAAML,EAAuBpM,EAAS,EAChCqM,EAAqBD,EAAuB,EAElD,OAAAhJ,EAAA,EACG,cAAcgJ,CAAoB,EAClC,iBAAiBC,CAAkB,EACnC,MAEI,EACT,CAEO,MAAA,EAAA,CACR,EAGH,IACExL,EAAS,QAAQ,CAAC,CAAE,MAAAN,EAAO,MAAA6C,KAAY,CAC/B,KAAA,CAAE,KAAAvD,GAASN,EACfgB,EAAM,IACNA,EAAM,UAAU,IAAA,EAKlB,OAFmBV,EAAK,YAAY,SAAW,EAWxC,IARCuD,EAAA,EACH,gBACA,EAAA,aAAa7C,EAAM,UAAU,KAAM,EAAK,EACxC,MAEI,GAGF,CACR,CAAA,CACJ,EAOD,IAAK,KACE,KAAA,OAAO,SAAS,aAAa,gBAAgB,EAC3C,IAET,YAAa,KACN,KAAA,OAAO,SAAS,aAAa,gBAAgB,EAC3C,IAET,YAAa,IACX,KAAK,OAAO,SAAS,cACnB,KAAK,OAAO,MAAM,UAAU,OAAS,CACvC,EACF,YAAa,IACX,KAAK,OAAO,SAAS,cAAc,KAAK,OAAO,MAAM,UAAU,OAAQ,CACrE,KAAM,UACN,MAAO,CACL,MAAO,GACT,CAAA,CACD,EACH,YAAa,IACX,KAAK,OAAO,SAAS,cAAc,KAAK,OAAO,MAAM,UAAU,OAAQ,CACrE,KAAM,UACN,MAAO,CACL,MAAO,GACT,CAAA,CACD,EACH,YAAa,IACX,KAAK,OAAO,SAAS,cAAc,KAAK,OAAO,MAAM,UAAU,OAAQ,CACrE,KAAM,UACN,MAAO,CACL,MAAO,GACT,CAAA,CACD,EACH,cAAe,IACb,KAAK,OAAO,SAAS,cAAc,KAAK,OAAO,MAAM,UAAU,OAAQ,CACrE,KAAM,iBACN,MAAO,CAAC,CAAA,CACT,EACH,cAAe,IACb,KAAK,OAAO,SAAS,cAAc,KAAK,OAAO,MAAM,UAAU,OAAQ,CACrE,KAAM,mBACN,MAAO,CAAC,CAAA,CACT,CAAA,CAEP,CACF,CAAC,ECvkBYoM,GAAa3J,OAAK,OAE5B,CACD,KAAM,aACN,MAAO,aACP,QAAS,kBAET,WAAY,CACH,MAAA,CACL,CACE,IAAK,MACL,SAAW7C,GACL,OAAOA,GAAY,SACd,GAGLA,EAAQ,aAAa,gBAAgB,IAAM,aAEtC,KAGF,EAEX,CAAA,CAEJ,EAEA,WAAW,CAAE,eAAAS,GAAkB,OAC7B,MAAMgM,IACJrK,EAAA,KAAK,QAAQ,gBAAb,YAAAA,EAA4B,aAAc,CAAA,EAErC,MAAA,CACL,MACAe,EAAA,gBACE,CACE,GAAGsJ,EACH,MAAO3L,EACLuB,EAAO,WACPoK,EAAwB,KAC1B,EACA,iBAAkB,YACpB,EACAhM,CACF,EACA,CAAA,CAEJ,CACF,CAAC,ECjDYiM,GAAM7J,OAAK,OAAO,CAC7B,KAAM,MACN,QAAS,GACT,QAAS,YACX,CAAC,ECHK8J,GAAyBlF,GAAmB,CAC1C,MAAAmF,EAAoBC,EAAAA,cAAc,WAAWpF,CAAM,EAEzD,OAAO,IAAIoF,EAAA,cACT,CACE,GAAGD,EAAkB,KAKvB,EACAA,EAAkB,KAAA,CAEtB,EACaE,GAAiC/M,YAAU,OAAO,CAC7D,uBAAwB,CACf,MAAA,CACL,IAAI4D,SAAO,CACT,MAAO,CACL,oBAAqBgJ,GAAsB,KAAK,OAAO,MAAM,CAC/D,CAAA,CACD,CAAA,CAEL,CACF,CAAC,EChBM,MAAMI,CAA4C,CAAlD,cAEGC,EAAA,iBAA2C,CAAA,GAE5C,GACLnG,EACAoG,EACA,CACA,OAAK,KAAK,UAAUpG,CAAK,IAClB,KAAA,UAAUA,CAAK,EAAI,IAG1B,KAAK,UAAUA,CAAK,EAAE,KAAKoG,CAAE,EAEtB,IAAM,KAAK,IAAIpG,EAAOoG,CAAE,CACjC,CAEU,KACRpG,KACGqG,EACH,CACM,MAAAC,EAAY,KAAK,UAAUtG,CAAK,EAElCsG,GACFA,EAAU,QAASC,GAAaA,EAAS,MAAM,KAAMF,CAAI,CAAC,CAE9D,CAEO,IACLrG,EACAoG,EACA,CACM,MAAAE,EAAY,KAAK,UAAUtG,CAAK,EAElCsG,IACEF,EACG,KAAA,UAAUpG,CAAK,EAAIsG,EAAU,OAAQC,GAAaA,IAAaH,CAAE,EAE/D,OAAA,KAAK,UAAUpG,CAAK,EAGjC,CAEU,oBAA2B,CACnC,KAAK,UAAY,EACnB,CACF,CCxDO,MAAMwG,GAAYC,EAAA,eACtB5N,GAASA,EAAK,KAAK,OAAS,gBAC/B,ECYA,MAAM6N,EAGJ,CAMA,YACmBjL,EACAkL,EACjBC,EAEY,IAAM,CAAA,EAGlB,CAbMT,EAAA,6BACDA,EAAA,8BAEPA,EAAA,oBAwBAA,EAAA,oBAAe,IAAM,OACf,IAAA5K,EAAA,KAAK,uBAAL,MAAAA,EAA2B,KAAM,CACnC,MAAMsL,EAAiB,SAAS,cAC9B,wBAAwB,KAAK,YAAY,YAAY,IAAA,EAElD,KAAA,qBAAqB,aACxBA,EAAgB,sBAAsB,EACxC,KAAK,sBAAsB,CAC7B,CAAA,GA7BiB,KAAA,OAAApL,EACA,KAAA,UAAAkL,EAOjB,KAAK,YAAcG,IAEnB,KAAK,sBAAwB,IAAM,CAC7B,GAAA,CAAC,KAAK,qBACF,MAAA,IAAI,MAAM,qDAAqD,EAGvEF,EAAsB,KAAK,oBAAoB,CAAA,EAGxC,SAAA,iBAAiB,SAAU,KAAK,YAAY,CACvD,CAaA,OAAOpN,EAAkBuN,EAAwB,CAC/C,MAAMjE,EAAO,KAAK,UAAU,SAASiE,CAAS,EACxCC,EAAO,KAAK,UAAU,SAASxN,EAAK,KAAK,EAGzCyN,EAAU,CAACnE,EAAK,QAAUkE,EAAK,OAC/BE,EAAUpE,EAAK,QAAU,CAACkE,EAAK,OAG/BG,EAAUrE,EAAK,QAAUkE,EAAK,OAGpC,GAAI,CAACC,GAAW,CAACE,GAAW,CAACD,EAC3B,OAKF,GAFK,KAAA,YAAcA,EAAUpE,EAAOkE,EAEhCE,GAAW,CAAC,KAAK,OAAO,WAAY,CACtC,KAAK,qBAAsB,KAAO,GAClC,KAAK,sBAAsB,EAE3B,MACF,CAEA,MAAML,EAAiB,SAAS,cAC9B,wBAAwB,KAAK,YAAY,YAAY,IAAA,EAGnD,KAAK,OAAO,aACd,KAAK,qBAAuB,CAC1B,KAAM,GACN,aAAcA,EAAgB,sBAAsB,EACpD,cAAe,KAAK,YAAY,MAChC,yBAA0B,KAAK,YAAY,wBAAA,EAG7C,KAAK,sBAAsB,EAE/B,CAEA,SAAU,CACC,SAAA,oBAAoB,SAAU,KAAK,YAAY,CAC1D,CACF,CAqBA,SAASC,GAEqB,CACrB,MAAA,CACL,OAAQ,GACR,iBAAkB,OAClB,cAAe,OACf,MAAO,CAAC,EACR,yBAA0B,OAC1B,cAAe,EACf,aAAc,MAAA,CAElB,CAYa,MAAAM,GAAuB,CAIlC3L,EACAmL,EAIAD,EACAU,EACAjJ,EAAgC,IAAM,GACtCkJ,EAGa,IAAM,CAEnB,IACG,CAEC,GAAAD,EAAwB,SAAW,EAC/B,MAAA,IAAI,MAAM,qCAAqC,EAGnD,IAAAE,EAEE,MAAAC,EAAchO,GAAqB,CAClCA,EAAA,SAASA,EAAK,MAAM,GAAG,QAAQmN,EAAW,CAAE,WAAY,EAAK,CAAC,CAAC,CAAA,EAG/D,MAAA,CACL,OAAQ,IAAI7J,EAAAA,OAAO,CACjB,IAAK6J,EAEL,KAAM,KACJY,EAAwB,IAAIb,GAC1BjL,EACAkL,EAEAC,CAAA,EAEKW,GAGT,MAAO,CAEL,MAAiC,CAC/B,OAAOT,EAAyB,CAClC,EAGA,MAAM9H,EAAa8D,EAAMhE,EAAU7B,EAAoC,aAErE,GAAI+B,EAAY,QAAQ,qBAAqB,IAAM,OAC1C,OAAA8D,EAIT,IAAIvH,EAAAyD,EAAY,QAAQ2H,CAAS,IAA7B,MAAApL,EAAgC,SAC3B,MAAA,CACL,OAAQ,GACR,mBACEO,EAAAkD,EAAY,QAAQ2H,CAAS,IAA7B,YAAA7K,EAAgC,mBAAoB,GACtD,cAAemB,EAAS,UAAU,KAClC,MAAOmB,EAAM,EAAE,EACf,yBAA0B,EAG1B,cAAe,EACf,aAAc,MAAM,KAAK,MAAM,KAAK,OAAO,EAAI,UAAU,CAAC,EAAA,EAK1D,GAAA,CAAC0E,EAAK,OACD,OAAAA,EAGH,MAAAkE,EAAO,CAAE,GAAGlE,GAyBlB,GArBAkE,EAAK,MAAQ5I,EACXnB,EAAS,IAAI,YACX6F,EAAK,cACL7F,EAAS,UAAU,IACrB,CAAA,EAIF+J,EAAK,cAAgB,EACjBA,EAAK,MAAM,SAAW,IAGxBA,EAAK,cAAgB,KAAK,IACxB,EACAlE,EAAK,eACF7F,EAAS,UAAU,KAAO6B,EAAS,UAAU,KAAA,GAQlD7B,EAAS,UAAU,OAASA,EAAS,UAAU,KAE/CwK,EAAAzI,EAAY,QAAQ2H,CAAS,IAA7B,MAAAc,EAAgC,YAGhCzI,EAAY,QAAQ,OAAO,GAC3BA,EAAY,QAAQ,MAAM,GAC1BA,EAAY,QAAQ,SAAS,GAE5B8D,EAAK,QAAU7F,EAAS,UAAU,KAAO6F,EAAK,eAG/CkE,EAAK,cAAgB,EAErB,OAAOF,EAAyB,EAKlC,KACEY,EAAA1I,EAAY,QAAQ2H,CAAS,IAA7B,YAAAe,EAAgC,4BAChC,OACA,CACA,IAAItK,EACF4B,EAAY,QAAQ2H,CAAS,EAAE,yBAG7BvJ,EAAW,EACFA,EAAA0F,EAAK,MAAM,OAAS,EACtB1F,GAAY0F,EAAK,MAAM,SACrB1F,EAAA,GAGb4J,EAAK,yBAA2B5J,CAAA,MACvB0B,EAAS,UAAU,OAAS7B,EAAS,UAAU,OACxD+J,EAAK,yBAA2B,GAG3B,OAAAA,CACT,CACF,EAEA,MAAO,CACL,cAAcxN,EAAMwG,EAAO,CACzB,MAAM2H,EAAgB,KAAgB,SAASnO,EAAK,KAAK,EAAE,OAG3D,GAAIwG,EAAM,MAAQqH,GAA2B,CAACM,EACvC,OAAAnO,EAAA,SACHA,EAAK,MAAM,GACR,WAAW6N,CAAuB,EAClC,eAAA,EACA,QAAQV,EAAW,CAClB,SAAU,GACV,iBAAkBU,CAAA,CACnB,CAAA,EAGE,GAIT,GAAI,CAACM,EACI,MAAA,GAIH,KAAA,CACJ,iBAAAC,EACA,cAAAC,EACA,MAAAzJ,EACA,yBAAA0J,CACE,EAAAnB,EAAU,SAASnN,EAAK,KAAK,EAG7B,OAAAwG,EAAM,MAAQ,WACXxG,EAAA,SACHA,EAAK,MAAM,GAAG,QAAQmN,EAAW,CAC/B,yBAA0BmB,EAA2B,CAAA,CACtD,CAAA,EAEI,IAIL9H,EAAM,MAAQ,aACXxG,EAAA,SACHA,EAAK,MAAM,GAAG,QAAQmN,EAAW,CAC/B,yBAA0BmB,EAA2B,CAAA,CACtD,CAAA,EAEI,IAIL9H,EAAM,MAAQ,SAChBwH,EAAWhO,CAAI,EACfiC,EAAO,cACJ,MACA,EAAA,MAAA,EACA,YAAY,CACX,KAAMoM,EAAiBD,EAAkB,OACzC,GAAInM,EAAO,cAAc,MAAM,UAAU,IAAA,CAC1C,EACA,IAAI,EAEM6L,EAAA,CACX,KAAMlJ,EAAM0J,CAAwB,EACpC,OAAArM,CAAA,CACD,EAEM,IAILuE,EAAM,MAAQ,UAChBwH,EAAWhO,CAAI,EACR,IAGF,EACT,EAGA,YAAYD,EAAO,CACX,KAAA,CAAE,OAAAwO,EAAQ,aAAAC,EAAc,cAAAH,EAAe,iBAAAD,GAC3C,KACA,SAASrO,CAAK,EAEhB,GAAI,CAACwO,EACI,OAAA,KAKT,GAAIH,IAAqB,GAAI,CACrB,MAAAK,EAAYzB,GAAUjN,EAAM,SAAS,EAC3C,GAAI0O,EACK,OAAAlE,gBAAc,OAAOxK,EAAM,IAAK,CACrCuK,EAAAA,WAAW,KACTmE,EAAU,IACVA,EAAU,IAAMA,EAAU,KAAK,SAC/B,CACE,SAAU,OACV,MAAO,uBACP,qBAAsBD,CACxB,CACF,CAAA,CACD,CAEL,CAEO,OAAAjE,gBAAc,OAAOxK,EAAM,IAAK,CACrCuK,EAAAA,WAAW,OACT+D,EAAgBD,EAAiB,OACjCC,EACA,CACE,SAAU,OACV,MAAO,uBACP,qBAAsBG,CACxB,CACF,CAAA,CACD,CACH,CACF,CAAA,CACD,EACD,aAAe/J,GAAY,CACduJ,EAAA/L,EAAO,cAAc,IAAI,EACpCA,EAAO,cACJ,MACA,EAAA,MAAA,EACA,YAAY,CACX,KACE8L,EAAsB,YAAY,cAClCA,EAAsB,YAAY,iBAAkB,OACtD,GAAI9L,EAAO,cAAc,MAAM,UAAU,IAAA,CAC1C,EACA,IAAI,EAEM6L,EAAA,CACX,KAAArJ,EACA,OAAAxC,CAAA,CACD,CACH,CAAA,CAEJ,EC1aayM,EAAqB,IAAItL,EAAA,UAAU,iBAAiB,EAE1D,MAAMuL,WAGHjC,CAAkB,CAI1B,YAAYzK,EAAkC2C,EAAwB,CAC9D,QAJQ+H,EAAA,eACAA,EAAA,qBAId,MAAMiC,EAAchB,GAClB3L,EACClC,GAAU,CACJ,KAAA,KAAK,SAAUA,CAAK,CAC3B,EACA2O,EACA,IACCG,GACCjK,EAAM,OACJ,CAAC,CAAE,KAAAzD,EAAM,QAAA2N,KACP3N,EAAK,YAAc,EAAA,WAAW0N,EAAM,YAAa,CAAA,GAChDC,GACCA,EAAQ,OAAQC,GACdA,EAAM,YAAA,EAAc,WAAWF,EAAM,aAAa,GAClD,SAAW,CACnB,EACF,CAAC,CAAE,KAAApK,EAAM,OAAAxC,CAAa,IAAAwC,EAAK,QAAQxC,CAAM,CAAA,EAG3C,KAAK,OAAS2M,EAAY,OAC1B,KAAK,aAAeA,EAAY,YAClC,CAEO,SACL7B,EACA,CACO,OAAA,KAAK,GAAG,SAAUA,CAAQ,CACnC,CACF,CC5CA,MAAM5J,GAAa,IAAIC,EAAAA,UAAU,uBAAuB,EA2B3C4L,GAActP,YAAU,OAA2B,CAC9D,KAAM,cAEN,YAAa,CACJ,MAAA,CACL,iBAAkB,kBAClB,eAAgB,WAChB,cAAe,YACf,eAAgB,aAChB,YAAa,oBACb,qBAAsB,GACtB,gBAAiB,GACjB,gBAAiB,EAAA,CAErB,EAEA,uBAAwB,CACf,MAAA,CACL,IAAI4D,SAAO,CACT,IAAKH,GACL,MAAO,CACL,YAAcpD,GAAU,CAChB,KAAA,CAAE,IAAAf,EAAK,UAAAiQ,CAAc,EAAAlP,EAErBmP,EAAYR,EAAmB,SAAS3O,CAAK,EAC7CwO,EACJ,KAAK,OAAO,YAAc,CAAC,KAAK,QAAQ,qBACpC,CAAE,OAAAY,CAAW,EAAAF,EACbhF,EAA4B,CAAA,EAElC,GAAKsE,EAID,OAAAvP,EAAA,YAAY,CAACK,EAAMJ,IAAQ,CAC7B,MAAMmQ,EAAYD,GAAUlQ,GAAOkQ,GAAUlQ,EAAMI,EAAK,SAClDgQ,EAAU,CAAChQ,EAAK,QAAU,CAACA,EAAK,WAEtC,IAAK+P,GAAa,CAAC,KAAK,QAAQ,kBAAoBC,EAAS,CAC3D,MAAM3O,EAAU,CAAC,KAAK,QAAQ,cAAc,EAGxC,KAAK,OAAO,SACNA,EAAA,KAAK,KAAK,QAAQ,gBAAgB,EAGxC0O,GACM1O,EAAA,KAAK,KAAK,QAAQ,cAAc,GAItCwO,GAAA,YAAAA,EAAW,oBAAqB,KAAMA,GAAA,MAAAA,EAAW,SAC3CxO,EAAA,KAAK,KAAK,QAAQ,aAAa,EA8BzC,MAAM2J,EAAaC,EAAAA,WAAW,KAAKrL,EAAKA,EAAMI,EAAK,SAAU,CAC3D,MAAOqB,EAAQ,KAAK,GAAG,CAAA,CACxB,EACDuJ,EAAY,KAAKI,CAAU,CAC7B,CAEA,OAAO,KAAK,QAAQ,eAAA,CACrB,EAEME,gBAAc,OAAOvL,EAAKiL,CAAW,CAC9C,CACF,CAAA,CACD,CAAA,CAEL,CACF,CAAC,ECrHYqF,GAAyB5P,YAAU,OAAO,CACrD,KAAM,gBAEN,qBAAsB,CACb,MAAA,CACL,CAGE,MAAO,CAAC,YAAa,UAAW,iBAAkB,kBAAkB,EACpE,WAAY,CACV,cAAe,CACb,QAAS,OACT,UAAYC,GAAYA,EAAQ,aAAa,qBAAqB,EAClE,WAAaC,GACXA,EAAW,gBAAkB,QAAU,CACrC,sBAAuBA,EAAW,aACpC,CACJ,CACF,CACF,CAAA,CAEJ,EAEA,aAAc,CACL,MAAA,CACL,iBACG2P,GACD,CAAC,CAAE,MAAAxP,KAAY,CACb,MAAMyP,EAAiC,CAAA,EAEjCvP,EAAYlB,EAChBgB,EAAM,IACNA,EAAM,UAAU,IAAA,EAElB,GAAIE,IAAc,OACT,MAAA,GAIT,IAAIhB,EAAMgB,EAAU,SACb,KAAAhB,EAAMc,EAAM,UAAU,IAEzBA,EAAM,IAAI,QAAQd,CAAG,EAAE,KAAO,EAAA,KAAK,KAAK,QAAU,gBAEnBuQ,EAAA,KAAKvQ,EAAM,CAAC,EAE3CA,GAAOc,EAAM,IAAI,QAAQd,CAAG,EAAE,KAAA,EAAO,SAAW,GAEzCA,GAAA,EAKX,UAAWA,KAAOuQ,EAChBzP,EAAM,GAAG,iBAAiBd,EAAK,gBAAiBsQ,CAAa,EAGxD,MAAA,EACT,CAAA,CAEN,CACF,CAAC,EC/DYE,GAAqB/P,YAAU,OAAO,CACjD,KAAM,iBAEN,qBAAsB,CACb,MAAA,CACL,CACE,MAAO,CAAC,gBAAgB,EACxB,WAAY,CACV,UAAW,CACT,QAAS,UACT,UAAYC,GACVA,EAAQ,aAAa,iBAAiB,EAClCA,EAAQ,aAAa,iBAAiB,EACtC,UACN,WAAaC,GACXA,EAAW,YAAc,WAAa,CACpC,kBAAmBA,EAAW,SAChC,CACJ,CACF,CACF,CAAA,CAEJ,EAEA,aAAc,CACL,MAAA,CACL,kBACE,CAACC,EAAYC,IACb,CAAC,CAAE,MAAAC,EAAO,KAAAC,KAAW,CACnB,MAAMC,EAAYlB,EAAoBgB,EAAM,IAAKF,CAAU,EAC3D,OAAII,IAAc,OACT,IAGTF,EAAM,GAAG,iBAAiBE,EAAU,SAAW,EAAG,YAAaH,CAAK,EAEpEE,EAAK,MAAM,EAEJ,GACT,CAAA,CAEN,CACF,CAAC,EC3CY0P,GAAgBvP,OAAK,OAAO,CACvC,KAAM,YAEN,eAAgB,CACP,MAAA,CACL,MAAO,CACL,QAAS,OACT,UAAYR,GAAYA,EAAQ,aAAa,iBAAiB,EAC9D,WAAaC,IAAgB,CAC3B,kBAAmBA,EAAW,KAAA,EAElC,CAAA,CAEJ,EAEA,WAAY,CACH,MAAA,CACL,CACE,IAAK,OACL,SAAWD,GACL,OAAOA,GAAY,SACd,GAGLA,EAAQ,aAAa,iBAAiB,EACjC,CAAE,MAAOA,EAAQ,aAAa,iBAAiB,CAAE,EAGnD,EAEX,CAAA,CAEJ,EAEA,WAAW,CAAE,eAAAS,GAAkB,CACtB,MAAA,CAAC,OAAQA,EAAgB,CAAC,CACnC,EAEA,aAAc,CACL,MAAA,CACL,aACGN,GACD,CAAC,CAAE,SAAAO,KACGP,IAAU,UACLO,EAAS,QAAQ,KAAK,KAAM,CAAE,MAAAP,EAAc,EAG9CO,EAAS,UAAU,KAAK,IAAI,CACrC,CAEN,CACF,CAAC,EC3CYsP,GAAejQ,YAAU,OAA4B,CAChE,KAAM,eAEN,uBAAwB,CACtB,MAAMkQ,EAAS,IAAIxM,EAAAA,UAAU,KAAK,IAAI,EAK/B,MAAA,CACL,IAAIE,SAAO,CACT,IAAKsM,EACL,kBAAmB,CAACC,EAAGC,EAAI/P,IAAU,CACnC,KAAM,CAAE,IAAAf,EAAK,GAAA0E,EAAI,OAAA0D,CAAA,EAAWrH,EACtBgQ,EAAwBH,EAAO,SAAS7P,CAAK,EAC7CiQ,EAAchR,EAAI,QAAQ,KAAO,EACjCgJ,EAAOZ,EAAO,MAAM,eACpBvI,EAAcuI,EAAO,MAAM,UACjC,GAAK2I,EAIL,OAAOrM,EAAG,OACRsM,EACAhI,EAAK,OAAO,OAAWnJ,EAAY,QAAQ,CAAA,CAE/C,EACA,MAAO,CACL,KAAM,CAACgR,EAAGI,IAAW,CAGrB,EACA,MAAO,CAACvM,EAAIjC,IAAU,CAChB,GAAA,CAACiC,EAAG,WACC,OAAAjC,EAGL,IAAAyO,EAAWxM,EAAG,IAAI,UAEtB,GAAI,CAACwM,GAAYA,EAAS,KAAK,OAAS,aAChC,MAAA,IAAI,MAAM,qBAAqB,EAKvC,GAFAA,EAAWA,EAAS,UAEhB,CAACA,GAAYA,EAAS,KAAK,OAAS,iBAChC,MAAA,IAAI,MAAM,yBAAyB,EAE3C,OAAOA,EAAS,SAAW,CAC7B,CACF,CAAA,CACD,CAAA,CAEL,CACF,CAAC,EClCYC,GAAuDC,GAa9D,OACJ,MAAMC,EAAkB,CACtBC,EAAAA,WAAW,wBACXA,EAAAA,WAAW,SACXA,EAAAA,WAAW,SACXA,EAAAA,WAAW,YACXA,EAAAA,WAAW,SAGXC,GAAA,UAGAvB,GAAY,UAAU,CACpB,eAAgBwB,EAAY,QAC5B,eAAgBA,EAAY,UAC5B,cAAeA,EAAY,SAC3B,gBAAiB,GACjB,gBAAiB,EAAA,CAClB,EACDxL,EAAS,UAAU,CACjB,MAAO,CAAC,gBAAgB,CAAA,CACzB,EACDyL,GAAA,UAIAC,GAAA,KAGAC,EAAA,KACAC,GAAA,KACAC,GAAA,OACAC,GAAA,OACAC,GAAA,UACAC,GAAA,KACAtB,GACAD,GACAvP,GACAT,GACA6P,GAGAjD,GACA5B,GAAe,UAAU,CACvB,cAAe2F,EAAK,aAAA,CACrB,EACDjE,GAAW,UAAU,CACnB,cAAeiE,EAAK,aAAA,CACrB,EACD,GAAG,OAAO,OAAOA,EAAK,WAAW,EAAE,IAAKtH,GACtCA,EAAU,KAAK,UAAU,CACvB,OAAQsH,EAAK,OACb,cAAeA,EAAK,aAAA,CACrB,CACH,EACA3D,GAEAwE,cAAW,UAAU,CAAE,MAAO,EAAG,MAAO,UAAW,EAGnDtB,EAAA,EAGF,GAAIS,EAAK,eAMH,GALAC,EAAA,KACFa,GAAAA,QAAc,UAAU,CACtB,SAAUd,EAAK,cAAc,QAAA,CAC9B,CAAA,GAECrO,EAAAqO,EAAK,cAAc,WAAnB,MAAArO,EAA6B,UAAW,CACpC,MAAAoP,EAAiBC,GAA0C,CACzD,MAAAC,EAAS,SAAS,cAAc,MAAM,EAE5CA,EAAO,UAAU,IAAIrP,EAAO,6BAA6B,CAAC,EAC1DqP,EAAO,aAAa,QAAS,iBAAiBD,EAAK,KAAK,EAAE,EAEpD,MAAAE,EAAQ,SAAS,cAAc,MAAM,EAE3CA,EAAM,UAAU,IAAItP,EAAO,6BAA6B,CAAC,EACzDsP,EAAM,aAAa,QAAS,qBAAqBF,EAAK,KAAK,EAAE,EAC7DE,EAAM,aAAa,SAAS,eAAeF,EAAK,IAAI,EAAG,IAAI,EAErD,MAAAG,EAAoB,SAAS,eAAe,GAAQ,EACpDC,EAAoB,SAAS,eAAe,GAAQ,EACnD,OAAAH,EAAA,aAAaE,EAAmB,IAAI,EACpCF,EAAA,aAAaC,EAAO,IAAI,EACxBD,EAAA,aAAaG,EAAmB,IAAI,EACpCH,CAAA,EAELhB,EAAA,KACFoB,GAAAA,QAAoB,UAAU,CAC5B,KAAMrB,EAAK,cAAc,KACzB,OAAQA,EAAK,cAAc,cAAgBe,EAC3C,SAAUf,EAAK,cAAc,QAAA,CAC9B,CAAA,CAEL,OAGAC,EAAI,KAAKqB,GAAAA,OAAO,EAGX,OAAArB,CACT,ECrJgB,SAAAsB,EACdhT,EACAK,EACuC,CACvC,IAAI4S,EACAC,EAmBA,GAjBJ7S,EAAI,WAAY,YAAY,CAACK,EAAMJ,IAE7B2S,EACK,GAILvS,EAAK,KAAK,OAAS,kBAAoBA,EAAK,MAAM,KAAOV,EACpD,IAGIiT,EAAAvS,EACbwS,EAAgB5S,EAAM,EAEf,GACR,EAEG2S,IAAe,QAAaC,IAAkB,OAChD,MAAM,MAAM,sDAAsD,EAG7D,MAAA,CACL,KAAMD,EACN,cAAAC,CAAA,CAEJ,CC3BO,SAASC,GACdC,EACAC,EACAC,EAA2C,SAC3ChQ,EACM,CACN,MAAMtD,EACJ,OAAOqT,GAAmB,SAAWA,EAAiBA,EAAe,GAEjEE,EAAwB,CAAA,EAC9B,UAAWpJ,KAAaiJ,EACtBG,EAAc,KAAKnK,EAAYe,EAAW7G,EAAO,MAAM,CAAC,EAG1D,IAAIkQ,EAAe,GAEb,KAAA,CAAE,KAAA9S,EAAM,cAAAwS,GAAkBF,EAAYhT,EAAIsD,EAAO,MAAM,GAAG,EAUhE,GARIgQ,IAAc,WACDE,EAAAN,GAGbI,IAAc,UAChBE,EAAeN,EAAgBxS,EAAK,UAGlC4S,IAAc,SAAU,CAEtB,GAAA5S,EAAK,WAAa,EAAG,CACR8S,EAAAN,EAAgBxS,EAAK,WAAY,SAAW,EAE3D,MAAM+S,EAAiBnQ,EAAO,MAAM,OAAO,MAAM,WAAc,OAC7D,CAAC,EACDiQ,CAAA,EAGFjQ,EAAO,KAAK,SACVA,EAAO,MAAM,GAAG,OAAOkQ,EAAcC,CAAc,CAAA,EAGrD,MACF,CAEeD,EAAAN,EAAgBxS,EAAK,WAAY,SAAW,CAC7D,CAEO4C,EAAA,KAAK,SAASA,EAAO,MAAM,GAAG,OAAOkQ,EAAcD,CAAa,CAAC,CAC1E,CAEgB,SAAAG,GACdC,EACAC,EACAtQ,EACA,CACA,MAAMtD,EACJ,OAAO2T,GAAkB,SAAWA,EAAgBA,EAAc,GAC9D,CAAE,cAAAT,CAAc,EAAIF,EAAYhT,EAAIsD,EAAO,MAAM,GAAG,EAE1DA,EAAO,SAAS,cAAc4P,EAAgB,EAAGU,CAAM,CACzD,CAEgB,SAAAC,GACdC,EACAxQ,EACA,CACA,MAAMyQ,EAAsB,IAAI,IAC9BD,EAAe,IAAKtQ,GAClB,OAAOA,GAAU,SAAWA,EAAQA,EAAM,EAC5C,CAAA,EAGF,IAAIwQ,EAAc,EA2Bd,GAzBJ1Q,EAAO,MAAM,IAAI,YAAY,CAAC5C,EAAMJ,IAAQ,CAEtC,GAAAyT,EAAoB,OAAS,EACxB,MAAA,GAKP,GAAArT,EAAK,KAAK,OAAS,kBACnB,CAACqT,EAAoB,IAAIrT,EAAK,MAAM,EAAE,EAE/B,MAAA,GAGWqT,EAAA,OAAOrT,EAAK,MAAM,EAAE,EAClC,MAAAuT,EAAa3Q,EAAO,MAAM,IAAI,SAEpCA,EAAO,SAAS,cAAchD,EAAM0T,EAAc,CAAC,EAE7C,MAAAE,EAAa5Q,EAAO,MAAM,IAAI,SACpC,OAAA0Q,GAAeC,EAAaC,EAErB,EAAA,CACR,EAEGH,EAAoB,KAAO,EAAG,CAChC,MAAMI,EAAc,CAAC,GAAGJ,CAAmB,EAAE,KAAK;AAAA,CAAI,EAEhD,MAAA,MACJ,mEACEI,CAAA,CAEN,CACF,CAEgB,SAAAC,GACdN,EACAV,EACA9P,EACA,CACA6P,GAAaC,EAAgBU,EAAe,CAAC,EAAG,SAAUxQ,CAAM,EAChEuQ,GAAaC,EAAgBxQ,CAAM,CACrC,CCvHO,SAAS+Q,IAAmB,CAC3B,MAAAC,EAA0BC,GAAqB,CAC/C,IAAAC,EAAmBD,EAAK,SAAS,OAErC,QAASlK,EAAI,EAAGA,EAAImK,EAAkBnK,IAAK,CACnC,MAAA3J,EAAO6T,EAAK,SAASlK,CAAC,EAExB,GAAA3J,EAAK,OAAS,YAEhB4T,EAAuB5T,CAAI,EAEtBA,EAAqB,UAAY,KAGhC,GAAAA,EAAK,SAAS,OAAS,EAAG,CAC5B6T,EAAK,SAAS,OAAOlK,EAAG,EAAG,GAAG3J,EAAK,QAAQ,EAErC,MAAA+T,EAAmB/T,EAAK,SAAS,OAAS,EAC5B8T,GAAAC,EACfpK,GAAAoK,CAAA,MAEAF,EAAA,SAAS,OAAOlK,EAAG,CAAC,EAEzBmK,IACAnK,GAIR,CAAA,EAGK,OAAAiK,CACT,CCrBO,SAASI,GAAeC,EAAgC,CACvD,MAAAC,MAAyB,IAAY,CACzC,GAAGD,EAAQ,0BACX,GAAGA,EAAQ,2BAAA,CACZ,EAEKE,EAAwBN,GAAqB,CAC7C,IAAAC,EAAmBD,EAAK,SAAS,OACjCO,EAEJ,QAASzK,EAAI,EAAGA,EAAImK,EAAkBnK,IAAK,CAEnC,MAAAtK,EADawU,EAAK,SAASlK,CAAC,EACA,SAAS,CAAC,EACtCzH,EAAe7C,EAAe,SAAS,CAAC,EACxCgV,EACJhV,EAAe,SAAS,SAAW,EAC9BA,EAAe,SAAS,CAAC,EAC1B,KAEAiV,EAAkBJ,EAAmB,IACzChS,EAAa,WAAY,eAAiB,EAGtCqS,EAAoBD,EACtBL,EAAQ,0BAA0B,IAChC/R,EAAa,WAAY,eAAiB,EAE1C,KACA,KACF,KAQA,GALAmS,IAAe,MACjBF,EAAqBE,CAAU,EAI7BD,GAAcA,EAAW,UAAYG,EAAmB,CAE1DV,EAAK,SAAS,OACZlK,EAAIyK,EAAW,SAAS,OACxBA,EAAW,SAAS,OACpBA,CAAA,EAII,MAAAI,EAAqBJ,EAAW,SAAS,OAAS,EACnDzK,GAAA6K,EACeV,GAAAU,EAEPJ,EAAA,MACf,CAGA,GAAIE,EAAiB,CAGdF,IAEUA,EAAAK,EAAA,QACX,SAAS,cAAcF,CAAkB,CAAA,GAK7C,MAAMG,EAAkBD,EAAA,QACtB,SAAS,cAAc,IAAI,CAAA,EAI7BC,EAAgB,SAAS,KAAKxS,EAAa,SAAS,CAAC,CAAC,EAGlDmS,IAAe,MACjBK,EAAgB,SAAS,KAAK,GAAGL,EAAW,QAAQ,EAI3CD,EAAA,SAAS,KAAKM,CAAe,CAAA,SAC/BL,IAAe,KAAM,CAE9BR,EAAK,SAAS,OAAOlK,EAAI,EAAG,EAAG,GAAG0K,EAAW,QAAQ,EAErDR,EAAK,SAASlK,CAAC,EAAIzH,EAAa,SAAS,CAAC,EAGpC,MAAA6R,EAAmBM,EAAW,SAAS,OACxC1K,GAAAoK,EACeD,GAAAC,CAAA,MAGpBF,EAAK,SAASlK,CAAC,EAAIzH,EAAa,SAAS,CAAC,CAE9C,CAIIkS,GACFP,EAAK,SAAS,OACZC,EAAmBM,EAAW,SAAS,OACvCA,EAAW,SAAS,OACpBA,CAAA,CAEJ,EAGK,OAAAD,CACT,CC7GsB,eAAAQ,GACpBC,EACA7M,EACiB,CACX,MAAA8M,EAAoB,SAAS,cAAc,KAAK,EAChDC,EAAa3H,EAAAA,cAAc,WAAWpF,CAAM,EAElD,UAAWjF,KAAS8R,EAAQ,CACpB,MAAA5U,EAAO0I,EAAY5F,EAAOiF,CAAM,EAChCgN,EAAWD,EAAW,cAAc9U,CAAI,EAC9C6U,EAAkB,YAAYE,CAAQ,CACxC,CAWA,OATmB,MAAMC,UAAQ,EAC9B,IAAIC,EAAAA,QAAa,CAAE,SAAU,EAAK,CAAC,EACnC,IAAIjB,GAAgB,CACnB,0BAA2B,IAAI,IAAY,CAAC,kBAAkB,CAAC,EAC/D,4BAA6B,IAAI,IAAY,CAAC,gBAAgB,CAAC,CAAA,CAChE,EACA,IAAIkB,EAAe,OAAA,EACnB,QAAQL,EAAkB,SAAS,GAEpB,KACpB,CAEsB,eAAAM,GACpBC,EACAhM,EACArB,EAC2B,CACrB,MAAAgN,EAAW,SAAS,cAAc,KAAK,EACpCA,EAAA,UAAYK,EAAK,OAGpB,MAAAC,EADSC,EAAAA,UAAU,WAAWvN,CAAM,EAChB,MAAMgN,CAAQ,EAElCH,EAA2B,CAAA,EAEjC,QAASjL,EAAI,EAAGA,EAAI0L,EAAW,WAAY,WAAY1L,IAC9CiL,EAAA,KAAKzL,EAAYkM,EAAW,WAAY,MAAM1L,CAAC,EAAGP,CAAW,CAAC,EAGhE,OAAAwL,CACT,CAEsB,eAAAW,GACpBX,EACA7M,EACiB,CASjB,OARuB,MAAMiN,UAAQ,EAClC,IAAIC,EAAA,QAAa,CAAE,SAAU,EAAM,CAAA,EACnC,IAAItB,EAAgB,EACpB,IAAI6B,GAAY,OAAA,EAChB,IAAIC,SAAS,EACb,IAAIC,GAAe,OAAA,EACnB,QAAQ,MAAMf,GAAaC,EAAQ7M,CAAM,CAAC,GAEvB,KACxB,CAIA,SAAS4N,GAAKjV,EAAYV,EAAW,CACnC,MAAMoC,EAAQpC,EAAK,MAAQA,EAAK,MAAQ;AAAA,EAAO,GAEzC4V,EAAkB,CAAA,EAEpB5V,EAAK,OAEI4V,EAAA,eAAe,EAAI5V,EAAK,MAKrC,IAAI6V,EAAc,CAChB,KAAM,UACN,QAAS,OACT,WAAAD,EACA,SAAU,CAAC,CAAE,KAAM,OAAQ,MAAAxT,EAAO,CAAA,EAGpC,OAAIpC,EAAK,OACP6V,EAAO,KAAO,CAAE,KAAM7V,EAAK,IAAK,GAG5BU,EAAA,MAAMV,EAAM6V,CAAM,EACfA,EAAAnV,EAAM,UAAUV,EAAM6V,CAAM,EAG5BA,EAAA,CACP,KAAM,UACN,QAAS,MACT,WAAY,CAAC,EACb,SAAU,CAACA,CAAM,CAAA,EAEbnV,EAAA,MAAMV,EAAM6V,CAAM,EACjBA,CACT,CAEsB,eAAAC,GACpBC,EACA3M,EACArB,EAC2B,CACrB,MAAAiO,EAAa,MAAMhB,UACtB,EAAA,IAAIiB,GAAAA,OAAW,EACf,IAAIR,EAAS,OAAA,EACb,IAAIS,WAAc,CACjB,SAAU,CACR,GAAIC,EAAA,gBACJ,KAAAR,EACF,CACD,CAAA,EACA,IAAIT,EAAAA,OAAe,EACnB,QAAQa,CAAQ,EAEnB,OAAOZ,GAAaa,EAAW,MAAiB5M,EAAarB,CAAM,CACrE,CCrHO,MAAMqO,EAAmD,CA0B9D,YACmBxT,EACAyT,EACjBC,EAGA,CA/BMhJ,EAAA,+BACDA,EAAA,gCAEAA,EAAA,mBAAc,IACdA,EAAA,mBAAc,IACdA,EAAA,uBAAkC,MAElCA,EAAA,kBAKS,CAAC,CAAE,KAAA3M,EAAM,MAAAD,EAAO,KAAA6V,EAAM,GAAAC,KAAS,CACvC,KAAA,CAAE,IAAA7W,EAAK,UAAAiQ,CAAc,EAAAlP,EACrB,CAAE,MAAA+V,CAAU,EAAA7G,EAKZ8G,EACJ,CAAC/W,EAAI,YAAY4W,EAAMC,CAAE,EAAE,QAAUG,EAAAA,gBAAgBjW,EAAM,SAAS,EAEtE,MAAO,EAAE,CAACC,EAAK,YAAc8V,GAASC,EAAA,GA8BxCpJ,EAAA,4BAAuB,IAAM,CAC3B,KAAK,YAAc,EAAA,GAGrBA,EAAA,0BAAqB,IAAM,CACzB,KAAK,YAAc,GACnB,WAAW,IAAM,KAAK,OAAO,KAAK,MAAM,CAAC,CAAA,GAI3CA,EAAA,wBAAmB,IAAM,QACnB5K,EAAA,KAAK,yBAAL,MAAAA,EAA6B,OAC/B,KAAK,uBAAuB,KAAO,GACnC,KAAK,wBAAwB,EAC/B,GAGF4K,EAAA,oBAAe,IAAM,CAEnB,WAAW,IAAM,KAAK,OAAO,KAAK,MAAM,CAAC,CAAA,GAG3CA,EAAA,mBAAenG,GAAsB,OACnC,GAAI,KAAK,YAAa,CACpB,KAAK,YAAc,GAEnB,MACF,CAEM,MAAAyP,EAAgB,KAAK,OAAO,IAAI,cAMpCzP,GACAA,EAAM,gBAELyP,IAAmBzP,EAAM,eACxByP,EAAc,SAASzP,EAAM,aAAqB,KAKlDzE,EAAA,KAAK,yBAAL,MAAAA,EAA6B,OAC/B,KAAK,uBAAuB,KAAO,GACnC,KAAK,wBAAwB,EAC/B,GAGF4K,EAAA,qBAAgB,IAAM,QAChB5K,EAAA,KAAK,yBAAL,MAAAA,EAA6B,OAC1B,KAAA,uBAAuB,aAAe,KAAK,wBAAwB,EACxE,KAAK,wBAAwB,EAC/B,GAhFiB,KAAA,OAAAE,EACA,KAAA,OAAAyT,EAKjB,KAAK,wBAA0B,IAAM,CAC/B,GAAA,CAAC,KAAK,uBACR,MAAM,IAAI,MACR,uDAAA,EAIJC,EAAwB,KAAK,sBAAsB,CAAA,EAGrDD,EAAO,IAAI,iBAAiB,YAAa,KAAK,oBAAoB,EAClEA,EAAO,IAAI,iBAAiB,UAAW,KAAK,kBAAkB,EAC9DA,EAAO,IAAI,iBAAiB,YAAa,KAAK,gBAAgB,EAE9DA,EAAO,IAAI,iBAAiB,QAAS,KAAK,YAAY,EACtDA,EAAO,IAAI,iBAAiB,OAAQ,KAAK,WAAW,EAE3C,SAAA,iBAAiB,SAAU,KAAK,aAAa,CACxD,CA2DA,OAAO1V,EAAkBsF,EAAwB,SACzC,KAAA,CAAE,MAAAvF,EAAO,UAAAmW,CAAc,EAAAlW,EACvB,CAAE,IAAAhB,EAAK,UAAAiQ,CAAc,EAAAlP,EACrBoW,EACJ7Q,GAAYA,EAAS,IAAI,GAAGtG,CAAG,GAAKsG,EAAS,UAAU,GAAG2J,CAAS,EAGlE,IAAA,KAAK,kBAAoB,MACxB,KAAK,kBAAoB,KAAK,OAAO,cACtCiH,GAAaC,GAEd,OAGG,KAAA,gBAAkB,KAAK,OAAO,WAG7B,KAAA,CAAE,OAAAC,CAAW,EAAAnH,EACb2G,EAAO,KAAK,IAAI,GAAGQ,EAAO,IAAKvT,GAAUA,EAAM,MAAM,GAAG,CAAC,EACzDgT,EAAK,KAAK,IAAI,GAAGO,EAAO,IAAKvT,GAAUA,EAAM,IAAI,GAAG,CAAC,EAErDwT,GAAatU,EAAA,KAAK,aAAL,YAAAA,EAAA,UAAkB,CACnC,KAAA/B,EACA,MAAAD,EACA,KAAA6V,EACA,GAAAC,CAAA,GAKA,GAAA,KAAK,OAAO,YACZ,CAAC,KAAK,cACLQ,GAAc,KAAK,aACpB,CACA,KAAK,uBAAyB,CAC5B,KAAM,GACN,aAAc,KAAK,wBAAwB,CAAA,EAG7C,KAAK,wBAAwB,EAE7B,MACF,CAGA,IACE/T,EAAA,KAAK,yBAAL,MAAAA,EAA6B,MAC7B,CAAC,KAAK,cACL,CAAC+T,GAAc,KAAK,aAAe,CAAC,KAAK,OAAO,YACjD,CACA,KAAK,uBAAuB,KAAO,GACnC,KAAK,wBAAwB,EAE7B,MACF,CACF,CAEA,SAAU,CACR,KAAK,OAAO,IAAI,oBAAoB,YAAa,KAAK,oBAAoB,EAC1E,KAAK,OAAO,IAAI,oBAAoB,UAAW,KAAK,kBAAkB,EACtE,KAAK,OAAO,IAAI,oBAAoB,YAAa,KAAK,gBAAgB,EAEtE,KAAK,OAAO,IAAI,oBAAoB,QAAS,KAAK,YAAY,EAC9D,KAAK,OAAO,IAAI,oBAAoB,OAAQ,KAAK,WAAW,EAEnD,SAAA,oBAAoB,SAAU,KAAK,aAAa,CAC3D,CAEA,yBAA0B,CAClB,KAAA,CAAE,MAAAtW,CAAM,EAAI,KAAK,OACjB,CAAE,UAAAkP,CAAc,EAAAlP,EAGhB,CAAE,OAAAqW,CAAW,EAAAnH,EACb2G,EAAO,KAAK,IAAI,GAAGQ,EAAO,IAAKvT,GAAUA,EAAM,MAAM,GAAG,CAAC,EACzDgT,EAAK,KAAK,IAAI,GAAGO,EAAO,IAAKvT,GAAUA,EAAM,IAAI,GAAG,CAAC,EAEvD,GAAAyT,EAAAA,gBAAgBrH,CAAS,EAAG,CAC9B,MAAM5P,EAAO,KAAK,OAAO,QAAQuW,CAAI,EAErC,GAAIvW,EACF,OAAOA,EAAK,uBAEhB,CAEA,OAAOkX,EAAa,aAAA,KAAK,OAAQX,EAAMC,CAAE,CAC3C,CACF,CAEa,MAAAW,GAA6B,IAAIpT,EAAA,UAC5C,yBACF,EAEO,MAAMqT,WAEH/J,CAAkB,CAI1B,YAAYzK,EAAkC,CACtC,QAJA0K,EAAA,aACQA,EAAA,eAIT,KAAA,OAAS,IAAIrJ,SAAO,CACvB,IAAKkT,GACL,KAAOE,IACL,KAAK,KAAO,IAAIjB,GAAsBxT,EAAQyU,EAAa3W,GAAU,CAC9D,KAAA,KAAK,SAAUA,CAAK,CAAA,CAC1B,EACM,KAAK,KACd,CACD,CACH,CAEO,SAASgN,EAAmD,CAC1D,OAAA,KAAK,GAAG,SAAUA,CAAQ,CACnC,CACF,CChOA,MAAM4J,EAAkD,CAiBtD,YACmB1U,EACAyT,EACjBkB,EAGA,CAtBMjK,EAAA,8BACDA,EAAA,+BAEPA,EAAA,wBACAA,EAAA,6BACAA,EAAA,4BAEAA,EAAA,kCACAA,EAAA,uCAEAA,EAAA,qCACAA,EAAA,0CAEAA,EAAA,sBACAA,EAAA,2BAqCAA,EAAA,wBAAoBnG,GAAsB,CAOxC,GALA,KAAK,0BAA4B,OACjC,KAAK,+BAAiC,OAEtC,KAAK,oBAAoB,EAGvBA,EAAM,kBAAkB,mBACxBA,EAAM,OAAO,WAAa,IAC1B,CAGA,MAAMqQ,EAA0BrQ,EAAM,OAChCsQ,EACJ,KAAK,OAAO,SAASD,EAAyB,CAAC,EAAI,EAC/CE,EAAoC,KAAK,OAAO,MAAM,IAAI,QAC9DD,CAAA,EAEIE,EAAaD,EAAkC,QAErD,UAAWxO,KAAQyO,EAEf,GAAAzO,EAAK,KAAK,OAAS,KAAK,OAAO,MAAM,OAAO,KAAK,MAAM,EAAE,KAAK,KAC9D,CACA,KAAK,0BAA4BA,EACjC,KAAK,+BACH0O,EAAA,aACEF,EACAxO,EAAK,KACLA,EAAK,KACF,GAAA,OAEP,KACF,CAEJ,CAEA,YAAK,qBAAqB,EAEnB,EAAA,GAGToE,EAAA,oBAAgBnG,GAAsB,OAC9B,MAAAyP,EAAgB,KAAK,OAAO,IAAI,cAIpC,KAAK,eAELzP,GACAA,EAAM,QAEN,EACEyP,IAAmBzP,EAAM,QACzByP,EAAc,SAASzP,EAAM,MAAc,KAGzCzE,EAAA,KAAK,wBAAL,MAAAA,EAA4B,OAC9B,KAAK,sBAAsB,KAAO,GAClC,KAAK,uBAAuB,EAEhC,GAGF4K,EAAA,qBAAgB,IAAM,OAChB,KAAK,gBAAkB,SACrB5K,EAAA,KAAK,wBAAL,MAAAA,EAA4B,OAC9B,KAAK,sBAAsB,aAAewU,EAAA,aACxC,KAAK,OACL,KAAK,mBAAoB,KACzB,KAAK,mBAAoB,EAAA,EAE3B,KAAK,uBAAuB,EAEhC,GA7GiB,KAAA,OAAAtU,EACA,KAAA,OAAAyT,EAKjB,KAAK,uBAAyB,IAAM,CAC9B,GAAA,CAAC,KAAK,sBACF,MAAA,IAAI,MAAM,sDAAsD,EAGxEkB,EAAuB,KAAK,qBAAqB,CAAA,EAGnD,KAAK,qBAAuB,IAAM,CAC3B,KAAA,gBAAkB,WAAW,IAAM,CACtC,KAAK,OAAO,GACX,GAAG,CAAA,EAGR,KAAK,oBAAsB,KACrB,KAAK,kBACP,aAAa,KAAK,eAAe,EACjC,KAAK,gBAAkB,QAGlB,IAGT,KAAK,OAAO,IAAI,iBAAiB,YAAa,KAAK,gBAAgB,EACnE,SAAS,iBAAiB,QAAS,KAAK,aAAc,EAAI,EACjD,SAAA,iBAAiB,SAAU,KAAK,aAAa,CACxD,CAgFA,cAAcM,EAAa3P,EAAc,OACvC,MAAM7D,EAAK,KAAK,OAAO,MAAM,GAAG,WAC9B6D,EACA,KAAK,mBAAoB,KACzB,KAAK,mBAAoB,EAAA,EAExB7D,EAAA,QACD,KAAK,mBAAoB,KACzB,KAAK,mBAAoB,KAAO6D,EAAK,OACrC,KAAK,OAAO,MAAM,OAAO,KAAK,OAAQ,CAAE,KAAM2P,EAAK,CAAA,EAEhD,KAAA,OAAO,SAASxT,CAAE,EACvB,KAAK,OAAO,SAER3B,EAAA,KAAK,wBAAL,MAAAA,EAA4B,OAC9B,KAAK,sBAAsB,KAAO,GAClC,KAAK,uBAAuB,EAEhC,CAEA,iBAAkB,OAChB,KAAK,OAAO,SACV,KAAK,OAAO,MAAM,GACf,WACC,KAAK,mBAAoB,KACzB,KAAK,mBAAoB,GACzB,KAAK,cAAe,IAAA,EAErB,QAAQ,kBAAmB,EAAI,CAAA,EAEpC,KAAK,OAAO,SAERA,EAAA,KAAK,wBAAL,MAAAA,EAA4B,OAC9B,KAAK,sBAAsB,KAAO,GAClC,KAAK,uBAAuB,EAEhC,CAEA,QAAS,OACP,GAAI,CAAC,KAAK,OAAO,WACf,OAIF,MAAMoV,EAAoB,KAAK,cAY/B,GATA,KAAK,cAAgB,OACrB,KAAK,mBAAqB,OAG1B,KAAK,6BAA+B,OACpC,KAAK,kCAAoC,OAIrC,KAAK,OAAO,MAAM,UAAU,MAAO,CACrC,MAAMH,EAAa,KAAK,OAAO,MAAM,UAAU,MAAM,QAErD,UAAWzO,KAAQyO,EAEf,GAAAzO,EAAK,KAAK,OAAS,KAAK,OAAO,MAAM,OAAO,KAAK,MAAM,EAAE,KAAK,KAC9D,CACA,KAAK,6BAA+BA,EACpC,KAAK,kCACH0O,EAAA,aACE,KAAK,OAAO,MAAM,UAAU,MAC5B1O,EAAK,KACLA,EAAK,KACF,GAAA,OAEP,KACF,CAEJ,CAaA,GAXI,KAAK,4BACP,KAAK,cAAgB,KAAK,0BAC1B,KAAK,mBAAqB,KAAK,gCAI7B,KAAK,+BACP,KAAK,cAAgB,KAAK,6BAC1B,KAAK,mBAAqB,KAAK,mCAG7B,KAAK,eAAiB,KAAK,OAAO,WAAY,CAChD,KAAK,sBAAwB,CAC3B,KAAM,GACN,aAAcgO,EAAA,aACZ,KAAK,OACL,KAAK,mBAAoB,KACzB,KAAK,mBAAoB,EAC3B,EACA,IAAK,KAAK,cAAe,MAAM,KAC/B,KAAM,KAAK,OAAO,MAAM,IAAI,YAC1B,KAAK,mBAAoB,KACzB,KAAK,mBAAoB,EAC3B,CAAA,EAEF,KAAK,uBAAuB,EAE5B,MACF,CAIE,IAAAxU,EAAA,KAAK,wBAAL,MAAAA,EAA4B,MAC5BoV,IACC,CAAC,KAAK,eAAiB,CAAC,KAAK,OAAO,YACrC,CACA,KAAK,sBAAsB,KAAO,GAClC,KAAK,uBAAuB,EAE5B,MACF,CACF,CAEA,SAAU,CACR,KAAK,OAAO,IAAI,oBAAoB,YAAa,KAAK,gBAAgB,EAC7D,SAAA,oBAAoB,SAAU,KAAK,aAAa,EACzD,SAAS,oBAAoB,QAAS,KAAK,aAAc,EAAI,CAC/D,CACF,CAEa,MAAAC,GAA4B,IAAIhU,EAAA,UAC3C,wBACF,EAEO,MAAMiU,WAEH3K,CAAkB,CAI1B,YAAYzK,EAAkC,CACtC,QAJA0K,EAAA,aACQA,EAAA,eAsBTA,EAAA,qBAAgB,CAACuK,EAAa3P,IAAiB,CAC/C,KAAA,KAAM,cAAc2P,EAAK3P,CAAI,CAAA,GAM7BoF,EAAA,uBAAkB,IAAM,CAC7B,KAAK,KAAM,iBAAgB,GAStBA,EAAA,sBAAiB,IAAM,CAC5B,KAAK,KAAM,sBAAqB,GAS3BA,EAAA,qBAAgB,IAAM,CAC3B,KAAK,KAAM,qBAAoB,GA9C1B,KAAA,OAAS,IAAIrJ,SAAO,CACvB,IAAK8T,GACL,KAAOV,IACL,KAAK,KAAO,IAAIC,GAAqB1U,EAAQyU,EAAa3W,GAAU,CAC7D,KAAA,KAAK,SAAUA,CAAK,CAAA,CAC1B,EACM,KAAK,KACd,CACD,CACH,CAEO,SAASgN,EAAkD,CACzD,OAAA,KAAK,GAAG,SAAUA,CAAQ,CACnC,CAmCF,CC5TO,MAAMuK,UAA8BC,EAAAA,SAAU,CAGnD,YAAYC,EAAsBC,EAAoB,CACpD,MAAMD,EAASC,CAAK,EAHtB9K,EAAA,cAMQ,MAAA+H,EAAa8C,EAAQ,OAE3B,KAAK,MAAQ,GACLA,EAAA,IAAI,aAAaA,EAAQ,IAAKC,EAAM,IAAK,CAACpY,EAAMqY,EAAMxU,IAAW,CACvE,GAAIA,IAAW,MAAQA,EAAO,GAAGwR,CAAU,EACpC,YAAA,MAAM,KAAKrV,CAAI,EACb,EAET,CACD,CACH,CAEA,OAAO,OAAOL,EAAW4W,EAAcC,EAAKD,EAA6B,CAChE,OAAA,IAAI0B,EAAsBtY,EAAI,QAAQ4W,CAAI,EAAG5W,EAAI,QAAQ6W,CAAE,CAAC,CACrE,CAEA,SAAiB,CACR,OAAA,IAAI9O,EAAAA,MAAMD,EAAAA,SAAS,KAAK,KAAK,KAAK,EAAG,EAAG,CAAC,CAClD,CAEA,GAAGmI,EAA+B,CAShC,GARI,EAAEA,aAAqBqI,IAIvB,KAAK,MAAM,SAAWrI,EAAU,MAAM,QAItC,KAAK,OAASA,EAAU,MAAQ,KAAK,KAAOA,EAAU,GACjD,MAAA,GAGT,QAASjG,EAAI,EAAGA,EAAI,KAAK,MAAM,OAAQA,IACjC,GAAA,CAAC,KAAK,MAAMA,CAAC,EAAE,GAAGiG,EAAU,MAAMjG,CAAC,CAAC,EAC/B,MAAA,GAIJ,MAAA,EACT,CAEA,IAAIhK,EAAW+G,EAA8B,CAC3C,MAAM4R,EAAa5R,EAAQ,UAAU,KAAK,IAAI,EACxC6R,EAAW7R,EAAQ,UAAU,KAAK,EAAE,EAE1C,OAAI6R,EAAS,QACJL,EAAAA,UAAU,KAAKvY,EAAI,QAAQ2Y,EAAW,GAAG,CAAC,EAG/CA,EAAW,QACNJ,EAAAA,UAAU,KAAKvY,EAAI,QAAQ4Y,EAAS,GAAG,CAAC,EAG1C,IAAIN,EACTtY,EAAI,QAAQ2Y,EAAW,GAAG,EAC1B3Y,EAAI,QAAQ4Y,EAAS,GAAG,CAAA,CAE5B,CAEA,QAAc,CACL,MAAA,CAAE,KAAM,OAAQ,OAAQ,KAAK,OAAQ,KAAM,KAAK,KACzD,CACF,CCxEA,MAAMC,GAAyBC,GAAW,wBAG1C,IAAIC,EAOJ,SAASC,GACPC,EACAjY,EACA,OACI,GAAA,CAACA,EAAK,IAAI,YAGL,OAGH,MAAAf,EAAMe,EAAK,YAAYiY,CAAM,EACnC,GAAI,CAAChZ,EACI,OAET,IAAII,EAAOW,EAAK,SAASf,EAAI,GAAG,EAAE,KAE9B,GAAAI,IAASW,EAAK,IAMhB,MAAAX,GACAA,EAAK,YACLA,EAAK,aAAeW,EAAK,KACzB,GAAC+B,EAAA1C,EAAK,eAAL,MAAA0C,EAAA,KAAA1C,EAAoB,aAErBA,EAAOA,EAAK,WAEd,GAAKA,EAGL,MAAO,CAAE,KAAAA,EAAM,GAAIA,EAAK,aAAa,SAAS,GAChD,CAEA,SAAS6Y,GACPD,EACAjY,EACA,CACM,MAAAmC,EAAQ6V,GAA4BC,EAAQjY,CAAI,EAEtD,GAAImC,GAASA,EAAM,KAAK,WAAa,EAAG,CAEtC,MAAMgW,EAAWnY,EAAa,QACxBoY,EAAOD,EAAQ,YAAYhW,EAAM,KAAM,EAAI,EAC7C,MAAA,CAACiW,GAAQA,IAASD,EACb,KAEFC,EAAK,SACd,CACO,OAAA,IACT,CAEA,SAASC,GAA4BpJ,EAAsBjQ,EAAW,CAIhE,IAAAsZ,EACAC,EAOE,MAAAC,EACJxZ,EAAI,QAAQiQ,EAAU,IAAI,EAAE,KAAK,EAAE,KAAK,KAAK,QAAU,eACnDwJ,EACJzZ,EAAI,QAAQiQ,EAAU,EAAE,EAAE,KAAK,EAAE,KAAK,KAAK,QAAU,eAGjDyJ,EAAW,KAAK,IAAIzJ,EAAU,QAAQ,MAAOA,EAAU,MAAM,KAAK,EAExE,GAAIuJ,GAAgCC,EAA4B,CAI9D,MAAME,EAAqB1J,EAAU,MAAM,MAAMyJ,EAAW,CAAC,EACvDE,EAAkB3J,EAAU,IAAI,IAAIyJ,EAAW,CAAC,EAGtDJ,EAAsBtZ,EAAI,QAAQ2Z,EAAqB,CAAC,EAAE,IAC1DJ,EAAoBvZ,EAAI,QAAQ4Z,EAAkB,CAAC,EAAE,GAAA,MAErDN,EAAsBrJ,EAAU,KAChCsJ,EAAoBtJ,EAAU,GAGhC,MAAO,CAAE,KAAMqJ,EAAqB,GAAIC,CAAkB,CAC5D,CAEA,SAASM,GAAa7Y,EAAkB4V,EAAcC,EAAKD,EAAM,CAC3DA,IAASC,IAELA,GAAA7V,EAAK,MAAM,IAAI,QAAQ4V,EAAO,CAAC,EAAE,KAAO,EAAA,UAIhD,MAAMkD,EAAc9Y,EAAK,SAAS4V,CAAI,EAAE,KAAK,UAAU,EAAI,EACrD1S,EAASlD,EAAK,SAAS4V,CAAI,EAAE,KAE7BmD,EAAkB,CAACC,EAAwBC,IAC/C,MAAM,UAAU,QAAQ,KAAKD,EAAc,SAAUC,CAAa,EAE9DC,EAA0BH,EAC9B7V,EAEAlD,EAAK,SAAS4V,EAAO,CAAC,EAAE,KAAK,aAAA,EAEzBuD,EAAyBJ,EAC7B7V,EAEAlD,EAAK,SAAS6V,EAAK,CAAC,EAAE,KAAK,aAAA,EAG7B,QAAS7M,EAAI9F,EAAO,kBAAoB,EAAG8F,GAAK,EAAGA,KAC7CA,EAAImQ,GAA0BnQ,EAAIkQ,IACpCJ,EAAY,YAAYA,EAAY,SAAS9P,CAAC,CAAC,EAKpCoQ,KACIrB,EAAAe,EAKnB,MAAMO,EADUrZ,EAAK,IAAI,UAAU,MAAM,GAAG,EAEzC,OACEsZ,GACC,CAACA,EAAU,SAAS,IAAI,GACxB,CAACA,EAAU,SAAS,aAAa,GACjC,CAACA,EAAU,SAAS,QAAQ,CAAA,EAE/B,KAAK,GAAG,EAEXvB,EAAiB,UACfA,EAAiB,UACjB,IACA/V,EAAO,YACP,IACAqX,EAEO,SAAA,KAAK,YAAYtB,CAAgB,CAC5C,CAEA,SAASqB,IAAiB,CACpBrB,IAAqB,SACd,SAAA,KAAK,YAAYA,CAAgB,EACvBA,EAAA,OAEvB,CAEA,SAASwB,GACPC,EACAxZ,EACA,CACI,GAAA,CAACwZ,EAAE,aACL,OAGI,MAAAC,EAAoBzZ,EAAK,IAAI,sBAAsB,EAEnDiY,EAAS,CACb,KAAMwB,EAAkB,KAAOA,EAAkB,MAAQ,EACzD,IAAKD,EAAE,OAAA,EAGHva,EAAMiZ,GAAwBD,EAAQjY,CAAI,EAChD,GAAIf,GAAO,KAAM,CACT,MAAAgQ,EAAYjP,EAAK,MAAM,UACvBhB,EAAMgB,EAAK,MAAM,IAEjB,CAAE,KAAA4V,EAAM,GAAAC,CAAA,EAAOwC,GAA4BpJ,EAAWjQ,CAAG,EAEzD0a,EAA0B9D,GAAQ3W,GAAOA,EAAM4W,EAC/C8D,EACJ1K,EAAU,QAAQ,SAAWA,EAAU,MAAM,KAAK,GAClDA,aAAqBqI,EAEnBoC,GAA2BC,GACxB3Z,EAAA,SACHA,EAAK,MAAM,GAAG,aAAasX,EAAsB,OAAOtY,EAAK4W,EAAMC,CAAE,CAAC,CAAA,EAE3DgD,GAAA7Y,EAAM4V,EAAMC,CAAE,IAEtB7V,EAAA,SACHA,EAAK,MAAM,GAAG,aAAa4Z,EAAA,cAAc,OAAO5Z,EAAK,MAAM,IAAKf,CAAG,CAAC,CAAA,EAEtE4Z,GAAa7Y,EAAMf,CAAG,GAGxB,MAAMwH,EAAQzG,EAAK,MAAM,UAAU,QAAQ,EACrC,CAAE,IAAA6Z,EAAK,KAAAtS,CAAA,EAASsQ,GAAsB7X,EAAMyG,CAAK,EAEvD+S,EAAE,aAAa,YACfA,EAAE,aAAa,QAAQ,YAAaK,EAAI,SAAS,EAC/CL,EAAA,aAAa,QAAQ,aAAcjS,CAAI,EACzCiS,EAAE,aAAa,cAAgB,OAC/BA,EAAE,aAAa,aAAazB,EAAmB,EAAG,CAAC,EACnD/X,EAAK,SAAW,CAAE,MAAAyG,EAAO,KAAM,EAAK,CACtC,CACF,CAEO,MAAMqT,EAAgE,CAgB3E,YACmB7X,EACAyT,EACAqE,EAGjB,CArBMpN,EAAA,sBAKAA,EAAA,oCACAA,EAAA,4BAEAA,EAAA,qBAGDA,EAAA,kBAAa,IAEbA,EAAA,kBAAa,IA+BpBA,EAAA,mBAAc,IAAM,CAClB,KAAK,WAAa,EAAA,GAQpBA,EAAA,cAAUnG,GAAqB,CAG7B,GAFK,KAAA,OAAO,cAAc,SAAS,KAAK,EAEnCA,EAAc,WAAa,CAAC,KAAK,WACpC,OAGI,MAAAvH,EAAM,KAAK,OAAO,YAAY,CAClC,KAAMuH,EAAM,QACZ,IAAKA,EAAM,OAAA,CACZ,EAID,GAFA,KAAK,WAAa,GAEd,CAACvH,GAAOA,EAAI,SAAW,GAAI,CAC7B,MAAM+a,EAAM,IAAI,MAAM,OAAQxT,CAAK,EAC7BiT,EACJ,KAAK,OAAO,IAAI,WAChB,wBACFO,EAAI,QAAUP,EAAkB,KAAOA,EAAkB,MAAQ,EACjEO,EAAI,QAAUxT,EAAM,QACpBwT,EAAI,aAAexT,EAAM,aACrBwT,EAAA,eAAiB,IAAMxT,EAAM,eAAe,EAChDwT,EAAI,UAAY,GAEX,KAAA,OAAO,IAAI,cAAcA,CAAG,CACnC,CAAA,GAQFrN,EAAA,kBAAcnG,GAAqB,CACjC,GAAKA,EAAc,WAAa,CAAC,KAAK,WACpC,OAEI,MAAAvH,EAAM,KAAK,OAAO,YAAY,CAClC,KAAMuH,EAAM,QACZ,IAAKA,EAAM,OAAA,CACZ,EAED,GAAI,CAACvH,GAAOA,EAAI,SAAW,GAAI,CAC7B,MAAM+a,EAAM,IAAI,MAAM,WAAYxT,CAAK,EACjCiT,EACJ,KAAK,OAAO,IAAI,WAChB,wBACFO,EAAI,QAAUP,EAAkB,KAAOA,EAAkB,MAAQ,EACjEO,EAAI,QAAUxT,EAAM,QACpBwT,EAAI,aAAexT,EAAM,aACrBwT,EAAA,eAAiB,IAAMxT,EAAM,eAAe,EAChDwT,EAAI,UAAY,GAEX,KAAA,OAAO,IAAI,cAAcA,CAAG,CACnC,CAAA,GAGFrN,EAAA,iBAAasN,GAA0B,QACjClY,EAAA,KAAK,gBAAL,MAAAA,EAAoB,OACtB,KAAK,cAAc,KAAO,GACrB,KAAA,eAAe,KAAK,aAAa,GAExC,KAAK,WAAa,EAAA,GAGpB4K,EAAA,mBAAenG,GAAsB,eACnC,GAAI,KAAK,WACP,OAOF,MAAMiT,EACJ,KAAK,OAAO,IAAI,WAChB,wBAGIS,EAAyB,KAAK,OAAO,IAAI,sBAAsB,EAC/DC,EACJ3T,EAAM,SAAW0T,EAAuB,MACxC1T,EAAM,SAAW0T,EAAuB,OACxC1T,EAAM,SAAW0T,EAAuB,KACxC1T,EAAM,SAAW0T,EAAuB,OAEpCjE,EAAgB,KAAK,OAAO,IAAI,cAItC,GAEEkE,GAEA3T,GACAA,EAAM,QAEN,EACEyP,IAAkBzP,EAAM,QACxByP,EAAc,SAASzP,EAAM,MAAqB,GAEpD,EACIzE,EAAA,KAAK,gBAAL,MAAAA,EAAoB,OACtB,KAAK,cAAc,KAAO,GACrB,KAAA,eAAe,KAAK,aAAa,GAGxC,MACF,CAEA,KAAK,oBAAsB0X,EAAkB,EAG7C,MAAMxB,EAAS,CACb,KAAMwB,EAAkB,KAAOA,EAAkB,MAAQ,EACzD,IAAKjT,EAAM,OAAA,EAEPrE,EAAQ6V,GAA4BC,EAAQ,KAAK,MAAM,EAG7D,GAAI,CAAC9V,GAAS,CAAC,KAAK,OAAO,WAAY,EACjCG,EAAA,KAAK,gBAAL,MAAAA,EAAoB,OACtB,KAAK,cAAc,KAAO,GACrB,KAAA,eAAe,KAAK,aAAa,GAGxC,MACF,CAGA,IACE2L,EAAA,KAAK,gBAAL,MAAAA,EAAoB,QACpBC,EAAA,KAAK,eAAL,MAAAA,EAAmB,aAAa,eAChCkM,EAAA,KAAK,eAAL,YAAAA,EAAmB,aAAa,cAAejY,EAAM,GAErD,OAGF,KAAK,aAAeA,EAAM,KAGpB,MAAAZ,EAAeY,EAAM,KAAK,WAEhC,GAAKZ,GAKD,KAAK,OAAO,WAAY,CACpB,MAAA8Y,EAA0B9Y,EAAa,wBAE7C,KAAK,cAAgB,CACnB,KAAM,GACN,aAAc,IAAI,QAChB,KAAK,4BACD,KAAK,oBACL8Y,EAAwB,EAC5BA,EAAwB,EACxBA,EAAwB,MACxBA,EAAwB,MAC1B,EACA,MAAO,KAAK,OAAO,SACjB,KAAK,aAAc,aAAa,SAAS,CAC3C,CAAA,EAGG,KAAA,eAAe,KAAK,aAAa,CACxC,CAAA,GAGF1N,EAAA,gBAAW,IAAM,OACX,IAAA5K,EAAA,KAAK,gBAAL,MAAAA,EAAoB,KAAM,CAEtB,MAAAsY,EADe,KAAK,aAAc,WACK,wBAExC,KAAA,cAAc,aAAe,IAAI,QACpC,KAAK,4BACD,KAAK,oBACLA,EAAwB,EAC5BA,EAAwB,EACxBA,EAAwB,MACxBA,EAAwB,MAAA,EAErB,KAAA,eAAe,KAAK,aAAa,CACxC,CAAA,GA9NiB,KAAA,OAAApY,EACA,KAAA,OAAAyT,EACA,KAAA,eAAAqE,EAIjB,KAAK,4BAA8B,GACnC,KAAK,oBACH,KAAK,OAAO,IAAI,WAChB,sBAAwB,EAAA,EAE1B,SAAS,KAAK,iBAAiB,OAAQ,KAAK,OAAQ,EAAI,EACxD,SAAS,KAAK,iBAAiB,WAAY,KAAK,UAAU,EAC1D,KAAK,OAAO,IAAI,iBAAiB,YAAa,KAAK,WAAW,EAG9D,SAAS,KAAK,iBAAiB,YAAa,KAAK,YAAa,EAAI,EAGzD,SAAA,iBAAiB,SAAU,KAAK,QAAQ,EAGjD,SAAS,KAAK,iBAAiB,UAAW,KAAK,UAAW,EAAI,CAChE,CA0MA,SAAU,QACJhY,EAAA,KAAK,gBAAL,MAAAA,EAAoB,OACtB,KAAK,cAAc,KAAO,GACrB,KAAA,eAAe,KAAK,aAAa,GAExC,SAAS,KAAK,oBAAoB,YAAa,KAAK,WAAW,EAC/D,SAAS,KAAK,oBAAoB,WAAY,KAAK,UAAU,EAC7D,KAAK,OAAO,IAAI,oBAAoB,YAAa,KAAK,WAAW,EACjE,SAAS,KAAK,oBAAoB,OAAQ,KAAK,OAAQ,EAAI,EAClD,SAAA,oBAAoB,SAAU,KAAK,QAAQ,EACpD,SAAS,KAAK,oBAAoB,UAAW,KAAK,UAAW,EAAI,CACnE,CAEA,UAAW,QACLA,EAAA,KAAK,gBAAL,MAAAA,EAAoB,OACtB,KAAK,cAAc,KAAO,GACrB,KAAA,eAAe,KAAK,aAAa,GAGxC,KAAK,WAAa,GAGZ,MAAAsY,EADe,KAAK,aAAc,WACK,wBAEvCpb,EAAM,KAAK,OAAO,YAAY,CAClC,KAAMob,EAAwB,KAAOA,EAAwB,MAAQ,EACrE,IAAKA,EAAwB,IAAMA,EAAwB,OAAS,CAAA,CACrE,EACD,GAAI,CAACpb,EACH,OAGF,MAAMgB,EAAYlB,EAChB,KAAK,OAAO,cAAc,MAAM,IAChCE,EAAI,GAAA,EAEN,GAAIgB,IAAc,OAChB,OAGI,KAAA,CAAE,YAAArB,EAAa,OAAAY,CAAW,EAAAS,EAG5B,GAAArB,EAAY,YAAY,SAAW,EAAG,CACxC,MAAMgN,EAAuBpM,EAAS,EAChCqM,EAAqBD,EAAuB,EAE7C,KAAA,OAAO,cACT,MAAM,EACN,cAAcA,CAAoB,EAClC,cAAcC,EAAoB,CAAE,KAAM,YAAa,MAAO,EAAI,CAAA,EAClE,iBAAiBA,CAAkB,EACnC,KAAI,MAEP,KAAK,OAAO,cAAc,SAAS,iBAAiBrM,CAAM,EAI5D,KAAK,OAAO,QACZ,KAAK,OAAO,SACV,KAAK,OAAO,MAAM,GAAG,eAAe,EAAE,QAAQkP,EAAoB,CAEhE,SAAU,GACV,KAAM,MAAA,CACP,CAAA,CAEL,CACF,CAEa,MAAA4L,GAAoB,IAAIlX,EAAA,UAAU,gBAAgB,EAExD,MAAMmX,WAEH7N,CAAkB,CAI1B,YAA6BzK,EAAkC,CACvD,QAJA0K,EAAA,qBACQA,EAAA,eA2BhBA,EAAA,gBAAW,IAAM,KAAK,aAAc,SAAS,GAK7CA,EAAA,sBAAkBnG,GAGZ,CACJ,KAAK,aAAc,WAAa,GACtB+S,GAAA/S,EAAO,KAAK,OAAO,eAAe,CAAA,GAM9CmG,EAAA,oBAAe,IAAMyM,MAMrBzM,EAAA,kBAAa,IAAO,KAAK,aAAc,WAAa,IAMpDA,EAAA,oBAAe,IAAO,KAAK,aAAc,WAAa,IArDzB,KAAA,OAAA1K,EAEtB,KAAA,OAAS,IAAIqB,SAAO,CACvB,IAAKgX,GACL,KAAO5D,IACL,KAAK,aAAe,IAAIoD,GACtB7X,EACAyU,EACC8D,GAAkB,CACZ,KAAA,KAAK,SAAUA,CAAa,CACnC,CAAA,EAEK,KAAK,aACd,CACD,CACH,CAEO,SAASzN,EAAmD,CAC1D,OAAA,KAAK,GAAG,SAAUA,CAAQ,CACnC,CAmCF,CCrlBA,SAAS0N,EACPxY,EACAE,EACA,CACM,MAAAuY,EAAezY,EAAO,sBAAA,EAAwB,MAGjDyY,EAAa,QAAQ,SAAW,GAC/BA,EAAa,QAAQ,CAAC,EAAE,OAAS,QACjCA,EAAa,QAAQ,CAAC,EAAE,OAAS,KACnCA,EAAa,QAAQ,SAAW,EAEzBzY,EAAA,YAAYyY,EAAcvY,CAAK,GAEtCF,EAAO,aAAa,CAACE,CAAK,EAAGuY,EAAc,OAAO,EAClDzY,EAAO,sBAAsBA,EAAO,sBAAsB,EAAE,SAAU,EAE1E,CAEa,MAAA0Y,GAA2B,CAKtCvT,EAAkBhD,IACf,WACH,MAAMwW,EAA+C,CAAA,EAErD,MAAI,YAAaxT,GAAU,UAAWA,EAAO,QAAQ,cAE/CrF,EAAAqF,EAAO,QAAQ,WAAW,MAAM,SAAhC,MAAArF,EAAwC,SAAS,MACnD6Y,EAAe,KAAK,CAClB,KAAM,UACN,QAAS,CAAC,IAAK,WAAY,IAAI,EAC/B,QAAU3Y,GACRwY,EAAoBxY,EAAQ,CAC1B,KAAM,UACN,MAAO,CAAE,MAAO,GAAI,CAAA,CACI,CAAA,CAC7B,GAICK,EAAA8E,EAAO,QAAQ,WAAW,MAAM,SAAhC,MAAA9E,EAAwC,SAAS,MACnDsY,EAAe,KAAK,CAClB,KAAM,YACN,QAAS,CAAC,KAAM,WAAY,YAAY,EACxC,QAAU3Y,GACRwY,EAAoBxY,EAAQ,CAC1B,KAAM,UACN,MAAO,CAAE,MAAO,GAAI,CAAA,CACI,CAAA,CAC7B,GAICgM,EAAA7G,EAAO,QAAQ,WAAW,MAAM,SAAhC,MAAA6G,EAAwC,SAAS,MACnD2M,EAAe,KAAK,CAClB,KAAM,YACN,QAAS,CAAC,KAAM,WAAY,YAAY,EACxC,QAAU3Y,GACRwY,EAAoBxY,EAAQ,CAC1B,KAAM,UACN,MAAO,CAAE,MAAO,GAAI,CAAA,CACI,CAAA,CAC7B,GAID,mBAAoBmF,GACtBwT,EAAe,KAAK,CAClB,KAAM,cACN,QAAS,CAAC,KAAM,OAAQ,aAAc,aAAa,EACnD,QAAU3Y,GACRwY,EAAoBxY,EAAQ,CAC1B,KAAM,gBAAA,CACkB,CAAA,CAC7B,EAGC,qBAAsBmF,GACxBwT,EAAe,KAAK,CAClB,KAAM,gBACN,QAAS,CAAC,KAAM,OAAQ,eAAgB,eAAe,EACvD,QAAU3Y,GACRwY,EAAoBxY,EAAQ,CAC1B,KAAM,kBAAA,CACkB,CAAA,CAC7B,EAGC,cAAemF,GACjBwT,EAAe,KAAK,CAClB,KAAM,YACN,QAAS,CAAC,GAAG,EACb,QAAU3Y,GACRwY,EAAoBxY,EAAQ,CAC1B,KAAM,WAAA,CACkB,CAAA,CAC7B,EAGI2Y,CACT,EC6BMC,GAAyB,CAC7B,iBAAkB,GAClB,iBAAkB,GAClB,qBAAsB,EACxB,EAEO,MAAMC,EAAkE,CAW7E,YACmBxH,EAAoD,GACrE,CAZc3G,EAAA,sBACTA,EAAA,sBAAiB,SACRA,EAAA,eACTA,EAAA,aAAQ,IAECA,EAAA,iBACAA,EAAA,0BACAA,EAAA,kBACAA,EAAA,uCAGG,KAAA,QAAA2G,EAGjB,MAAMyH,EAGF,CACF,cAAe,GAMf,YAAazH,EAAQ,aAAgBlP,EACrC,GAAGkP,CAAA,EAGA,KAAA,SAAW,IAAIiH,GAA0B,IAAI,EAC7C,KAAA,kBAAoB,IAAI9D,GAAmC,IAAI,EACpE,KAAK,UAAY,IAAI9H,GACnB,KACAoM,EAAW,gBACTJ,GAAyBI,EAAW,WAAW,CAAA,EAE9C,KAAA,iBAAmB,IAAI1D,GAAkC,IAAI,EAElE,MAAM/G,EAAaH,GAAgC,CACjD,OAAQ,KACR,cAAe4K,EAAW,eAAiB,CAAC,EAC5C,YAAaA,EAAW,YACxB,cAAeA,EAAW,aAAA,CAC3B,EAEKC,EAAuBtb,YAAU,OAAO,CAC5C,KAAM,uBAEN,sBAAuB,IACd,CACL,KAAK,SAAS,OACd,KAAK,kBAAkB,OACvB,KAAK,UAAU,OACf,KAAK,iBAAiB,MAAA,CAE1B,CACD,EACD4Q,EAAW,KAAK0K,CAAoB,EAEpC,KAAK,OAASD,EAAW,YAEzB,MAAME,EACJF,EAAW,iBACVzH,EAAQ,cACL,OACA,CACE,CACE,KAAM,YACN,GAAItO,EAAS,QAAQ,WAAW,CAClC,CAAA,GAGFkW,EAA+B,CACnC,GAAGL,GACH,GAAGE,EAAW,eACd,SAAU,IAAM,QACdhZ,EAAAgZ,EAAW,gBAAX,MAAAhZ,EAAA,KAAAgZ,EAA2B,MAC3B,KAAK,MAAQ,EACf,EACA,eAAe9Y,EAAQ,CACrB,GAAI,CAACgZ,EAEH,OAII,MAAA7T,EAASnF,EAAO,OAAO,OACvBkZ,EAAKF,EAAe,IAAK9Y,GAAU4F,EAAY5F,EAAOiF,CAAM,CAAC,EAE7DgU,EAAOhU,EAAO,KAClB,MACA,OACAA,EAAO,KAAK,aAAc,OAAW+T,CAAE,CAAA,EAGzClZ,EAAO,OAAO,QAAQ,QAAUmZ,EAAK,OAAO,CAC9C,EACA,SAAU,IAAM,OAGT,KAAK,SAIVrZ,EAAAgZ,EAAW,wBAAX,MAAAhZ,EAAA,KAAAgZ,EAAmC,MACrC,EACA,kBAAmB,IAAM,OAGlB,KAAK,SAIVhZ,EAAAgZ,EAAW,6BAAX,MAAAhZ,EAAA,KAAAgZ,EAAwC,MAC1C,EACA,SAAUzH,EAAQ,WAAa,OAAY,GAAOA,EAAQ,SAC1D,WACEyH,EAAW,4BAA8B,IACrChZ,EAAAgZ,EAAW,iBAAX,YAAAhZ,EAA2B,WAC3B,CAAC,KAAIO,EAAAyY,EAAW,iBAAX,YAAAzY,EAA2B,aAAc,CAAC,EAAI,GAAGgO,CAAU,EACtE,YAAa,CACX,WAAY,CACV,IAAGrC,EAAA8M,EAAW,gBAAX,YAAA9M,EAA0B,OAC7B,MAAOxN,EACLuB,EAAO,SACPA,EAAO,OACP+Y,EAAW,cAAgB/Y,EAAO,cAAgB,KAClDoY,GAAAlM,EAAA6M,EAAW,gBAAX,YAAA7M,EAA0B,SAA1B,YAAAkM,EAAkC,QAAS,EAC7C,CACF,CACF,CAAA,EAGEW,EAAW,gBACbG,EAAc,QAAUH,EAAW,eAGhC,KAAA,cAAgB,IAAIM,EAAA,OAAOH,CAAa,CAG/C,CAEA,IAAW,iBAAkB,CAC3B,OAAO,KAAK,cAAc,IAC5B,CAEA,IAAW,YAAa,CACf,OAAA,KAAK,cAAc,KAAK,GACjC,CAEO,WAAY,CACV,OAAA,KAAK,cAAc,KAAK,SAAS,CAC1C,CAEO,OAAQ,CACR,KAAA,cAAc,KAAK,OAC1B,CAMA,IAAW,gBAAmC,CAC5C,MAAMjH,EAA2B,CAAA,EAEjC,YAAK,cAAc,MAAM,IAAI,WAAY,YAAa5U,IACpD4U,EAAO,KAAKzL,EAAYnJ,EAAM,KAAK,OAAQ,KAAK,UAAU,CAAC,EAEpD,GACR,EAEM4U,CACT,CAOO,SACL/R,EAC4B,CAC5B,MAAMvD,EACJ,OAAOuD,GAAoB,SACvBA,EACAA,EAAgB,GACtB,IAAI4I,EAEJ,YAAK,cAAc,MAAM,IAAI,WAAY,YAAazL,GAChD,OAAOyL,EAAa,IACf,GAGLzL,EAAK,KAAK,OAAS,kBAAoBA,EAAK,MAAM,KAAOV,EACpD,IAGTmM,EAAWtC,EAAYnJ,EAAM,KAAK,OAAQ,KAAK,UAAU,EAElD,GACR,EAEMyL,CACT,CAOO,aACLiC,EACAuO,EAAU,GACJ,CACA,MAAArH,EAAS,KAAK,eAAe,MAAM,EAErCqH,GACFrH,EAAO,QAAQ,EAGjB,SAASsH,EAAmBC,EAAuC,CACjE,UAAWrZ,KAASqZ,EAAY,CAC1B,GAAA,CAACzO,EAAS5K,CAAK,EACV,MAAA,GAGH,MAAA8F,EAAWqT,EACbnZ,EAAM,SAAS,QAAQ,QAAA,EACvBA,EAAM,SAEN,GAAA,CAACoZ,EAAmBtT,CAAQ,EACvB,MAAA,EAEX,CAEO,MAAA,EACT,CAEAsT,EAAmBtH,CAAM,CAC3B,CAMO,sBAAsBlH,EAAsB,CAC5C,KAAA,cAAc,GAAG,SAAUA,CAAQ,CAC1C,CAMO,wBAAwBA,EAAsB,CAC9C,KAAA,cAAc,GAAG,kBAAmBA,CAAQ,CACnD,CAMO,uBAAqD,CAC1D,KAAM,CAAE,KAAA1N,EAAM,MAAAC,EAAO,SAAAC,EAAU,OAAAC,CAAW,EAAAT,EACxC,KAAK,cAAc,MAAM,IACzB,KAAK,cAAc,MAAM,UAAU,IAAA,EAI/B0c,EAAY,KAAK,cAAc,MAAM,IACxC,QAAQjc,CAAM,EACd,MAAMF,EAAQ,CAAC,EAEZoc,EAAW,KAAK,cAAc,MAAM,IACvC,QAAQlc,EAAS,CAAC,EAClB,KAAA,EAAO,WAGV,IAAImc,EACAF,EAAY,IACHE,EAAA,KAAK,cAAc,MAAM,IAAI,QAAQpc,EAAW,CAAC,EAAE,QAIhE,IAAIqc,EACA,OAAAH,EAAYC,EAAW,IACdE,EAAA,KAAK,cAAc,MAAM,IAAI,QAAQpc,EAAS,CAAC,EAAE,QAGvD,CACL,MAAOgJ,EAAYnJ,EAAM,KAAK,OAAQ,KAAK,UAAU,EACrD,UACEsc,IAAa,OACT,OACAnT,EAAYmT,EAAU,KAAK,OAAQ,KAAK,UAAU,EACxD,UACEC,IAAa,OACT,OACApT,EAAYoT,EAAU,KAAK,OAAQ,KAAK,UAAU,CAAA,CAE5D,CAQO,sBACLC,EACA5J,EAA6B,QAC7B,CACA,MAAMtT,EAAK,OAAOkd,GAAgB,SAAWA,EAAcA,EAAY,GAEjE,CAAE,cAAAhK,CAAkB,EAAAF,EAAYhT,EAAI,KAAK,cAAc,MAAM,GAAG,EAChE,CAAE,SAAAY,EAAU,YAAAX,CAAA,EAAgBG,EAChC,KAAK,cAAc,MAAM,IACzB8S,EAAgB,CAAA,EAGdI,IAAc,QAChB,KAAK,cAAc,SAAS,iBAAiB1S,EAAW,CAAC,EAEzD,KAAK,cAAc,SAAS,iBAC1BA,EAAWX,EAAY,SAAW,CAAA,CAGxC,CAKO,cAA+C,CAElD,GAAA,KAAK,cAAc,MAAM,UAAU,OACnC,KAAK,cAAc,MAAM,UAAU,GAE5B,OAGT,MAAMqV,EAA2B,CAAA,EAEjC,YAAK,cAAc,MAAM,IAAI,YAAY,CAAC5U,EAAMJ,IAC1CI,EAAK,KAAK,KAAK,QAAU,gBAK3BJ,EAAMI,EAAK,SAAW,KAAK,cAAc,MAAM,UAAU,MACzDJ,EAAM,KAAK,cAAc,MAAM,UAAU,GAElC,IAGFgV,EAAA,KACLzL,EACE,KAAK,cAAc,MAAM,IAAI,QAAQvJ,CAAG,EAAE,KAAK,EAC/C,KAAK,OACL,KAAK,UACP,CAAA,EAGK,GACR,EAEM,CAAE,OAAAgV,CAAe,CAC1B,CAMA,IAAW,YAAsB,CAC/B,OAAO,KAAK,cAAc,UAC5B,CAMA,IAAW,WAAW6H,EAAmB,CAClC,KAAA,cAAc,YAAYA,CAAQ,CACzC,CAUO,aACL/J,EACAC,EACAC,EAA2C,SACrC,CACNH,GAAaC,EAAgBC,EAAgBC,EAAW,KAAK,aAAa,CAC5E,CASO,YACLK,EACAC,EACA,CACYF,GAAAC,EAAeC,EAAQ,KAAK,aAAa,CACvD,CAMO,aAAaE,EAAmC,CACxCD,GAAAC,EAAgB,KAAK,aAAa,CACjD,CASO,cACLA,EACAV,EACA,CACcgB,GAAAN,EAAgBV,EAAgB,KAAK,aAAa,CAClE,CAKO,iBAAkB,CACvB,MAAM/P,EAAiB,CAAA,EACjBqF,EAAQ,KAAK,cAAc,MAAM,UAAU,IAAI,QAE/CL,MAAmB,IAAkB,CACzC,OACA,SACA,YACA,SACA,MAAA,CACD,EACKC,EAAkB,IAAA,IAAgB,CAAC,YAAa,iBAAiB,CAAC,EAExE,UAAWsB,KAAQlB,EACbL,EAAa,IAAIuB,EAAK,KAAK,IAAoB,EACjDvG,EAAOuG,EAAK,KAAK,IAAoB,EAAI,GAChCtB,EAAY,IAAIsB,EAAK,KAAK,IAAkB,IACrDvG,EAAOuG,EAAK,KAAK,IAAkB,EAAIA,EAAK,MAAM,OAI/CvG,OAAAA,CACT,CAMO,UAAUA,EAAgB,CACzB,MAAAgF,MAAmB,IAAkB,CACzC,OACA,SACA,YACA,SACA,MAAA,CACD,EACKC,EAAkB,IAAA,IAAgB,CAAC,YAAa,iBAAiB,CAAC,EAEnE,KAAA,cAAc,KAAK,QAExB,SAAW,CAACK,EAAO7F,CAAK,IAAK,OAAO,QAAQO,CAAM,EAC5CgF,EAAa,IAAIM,CAAqB,EACnC,KAAA,cAAc,SAAS,QAAQA,CAAK,EAChCL,EAAY,IAAIK,CAAmB,GAC5C,KAAK,cAAc,SAAS,QAAQA,EAAO,CAAE,MAAO7F,EAAO,CAGjE,CAMO,aAAaO,EAAgB,CAC7B,KAAA,cAAc,KAAK,QAExB,UAAWsF,KAAS,OAAO,KAAKtF,CAAM,EAC/B,KAAA,cAAc,SAAS,UAAUsF,CAAK,CAE/C,CAMO,aAAatF,EAAgB,CAC5B,MAAAgF,MAAmB,IAAkB,CACzC,OACA,SACA,YACA,SACA,MAAA,CACD,EACKC,EAAkB,IAAA,IAAgB,CAAC,YAAa,iBAAiB,CAAC,EAEnE,KAAA,cAAc,KAAK,QAExB,SAAW,CAACK,EAAO7F,CAAK,IAAK,OAAO,QAAQO,CAAM,EAC5CgF,EAAa,IAAIM,CAAqB,EACnC,KAAA,cAAc,SAAS,WAAWA,CAAK,EACnCL,EAAY,IAAIK,CAAmB,GAC5C,KAAK,cAAc,SAAS,WAAWA,EAAO,CAAE,MAAO7F,EAAO,CAGpE,CAKO,iBAAkB,CAChB,OAAA,KAAK,cAAc,MAAM,IAAI,YAClC,KAAK,cAAc,MAAM,UAAU,KACnC,KAAK,cAAc,MAAM,UAAU,EAAA,CAEvC,CAKO,oBAAqB,CAC1B,OAAO,KAAK,cAAc,cAAc,MAAM,EAAE,IAClD,CAOO,WAAWyV,EAAa3P,EAAe,CAC5C,GAAI2P,IAAQ,GACV,OAGF,KAAM,CAAE,KAAAtB,EAAM,GAAAC,CAAO,EAAA,KAAK,cAAc,MAAM,UAEzCtO,IACHA,EAAO,KAAK,cAAc,MAAM,IAAI,YAAYqO,EAAMC,CAAE,GAGpD,MAAAtN,EAAO,KAAK,cAAc,OAAO,KAAK,OAAQ,CAAE,KAAM2O,CAAA,CAAK,EAEjE,KAAK,cAAc,KAAK,SACtB,KAAK,cAAc,KAAK,MAAM,GAC3B,WAAW3P,EAAMqO,EAAMC,CAAE,EACzB,QAAQD,EAAMA,EAAOrO,EAAK,OAAQgB,CAAI,CAAA,CAE7C,CAKO,cAAe,CACd,KAAA,CAAE,SAAAhJ,EAAU,MAAAD,CAAA,EAAUP,EAC1B,KAAK,cAAc,MAAM,IACzB,KAAK,cAAc,MAAM,UAAU,IAAA,EAG9B,OAAA,KAAK,cAAc,MAAM,IAAI,QAAQQ,CAAQ,EAAE,MAAMD,EAAQ,CAAC,EAAI,CAC3E,CAKO,WAAY,CACZ,KAAA,cAAc,SAAS,aAAa,gBAAgB,CAC3D,CAKO,gBAAiB,CAChB,KAAA,CAAE,MAAAA,GAAUP,EAChB,KAAK,cAAc,MAAM,IACzB,KAAK,cAAc,MAAM,UAAU,IAAA,EAGrC,OAAOO,EAAQ,CACjB,CAKO,aAAc,CACd,KAAA,cAAc,SAAS,aAAa,gBAAgB,CAC3D,CAQA,MAAa,aAAa2U,EAA2C,CACnE,OAAOD,GAAaC,EAAQ,KAAK,cAAc,MAAM,CACvD,CASA,MAAa,aAAaQ,EAAyC,CACjE,OAAOD,GAAaC,EAAM,KAAK,OAAQ,KAAK,cAAc,MAAM,CAClE,CAQA,MAAa,iBAAiBR,EAA2C,CACvE,OAAOW,GAAiBX,EAAQ,KAAK,cAAc,MAAM,CAC3D,CASA,MAAa,iBAAiBmB,EAA6C,CACzE,OAAOD,GAAiBC,EAAU,KAAK,OAAQ,KAAK,cAAc,MAAM,CAC1E,CAKO,4BAA4BhE,EAAuC,CACpE,GAAA,CAAC,KAAK,QAAQ,cAChB,MAAM,IAAI,MACR,uEAAA,EAGC,KAAA,cAAc,SAAS,WAAWA,CAAI,CAC7C,CACF"}